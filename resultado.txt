Estrutura de arquivos e pastas:

+-- main/
    +-- java/
        +-- br/
            +-- com/
                +-- domenic/
                    +-- edtech/
                        +-- app/
                            +-- database/
                                +-- AppDatabase.java
                                +-- dao/
                                    +-- AlunoCursoDao.java
                                    +-- AlunoDao.java
                                    +-- AulaCursoDao.java
                                    +-- AulaCursoInscritoDao.java
                                    +-- CursoAvaliacaoDao.java
                                    +-- CursoDao.java
                                    +-- ProfessorAvaliacaoDao.java
                                    +-- ProfessorDao.java
                                    +-- base/
                                        +-- BaseDao.java
                            +-- models/
                                +-- Aluno.java
                                +-- AlunoAula.java
                                +-- AlunoCurso.java
                                +-- AulaCurso.java
                                +-- AulaCursoInscrito.java
                                +-- Curso.java
                                +-- CursoAvaliacao.java
                                +-- Professor.java
                                +-- ProfessorAvaliacao.java
                                +-- repositories/
                                    +-- AlunoCursoRepository.java
                                    +-- AlunoRepository.java
                                    +-- AulaCursoInscritoRepository.java
                                    +-- AulaCursoRepository.java
                                    +-- CursoAvaliacaoRepository.java
                                    +-- CursoRepository.java
                                    +-- ProfessorAvaliacaoRepository.java
                                    +-- ProfessorRepository.java
                                    +-- base/
                                        +-- BaseRepository.java
                            +-- ui/
                                +-- CadastroActivity.java
                                +-- GerarMassaActivity.java
                                +-- LoginActivity.java
                                +-- MainActivity.java
                                +-- MainActivityAluno.java
                                +-- MainActivityProfessor.java
                                +-- adapters/
                                    +-- AlunoAdapter.java
                                    +-- AulasAdapter.java
                                    +-- AvaliacaoAdapter.java
                                    +-- CursoAdapter.java
                                    +-- ProfessorAdapter.java
                                    +-- ProfessorAdapterHomeAluno.java
                                    +-- base/
                                        +-- BaseAdapter.java
                                +-- calendars/
                                    +-- CustomCalendarDecorator.java
                                    +-- DisabledDaysDecorator.java
                                +-- fragments/
                                    +-- MeuPerfilFragment.java
                                    +-- aluno/
                                        +-- HomeAlunoFragment.java
                                        +-- MeusCursosAlunoFragment.java
                                        +-- MinhasAulasAlunoFragment.java
                                    +-- professor/
                                        +-- HomeProfessorFragment.java
                                        +-- MeusCursosProfessorFragment.java
                                        +-- MinhasAulasProfessorFragment.java
                                +-- modals/
                                    +-- aluno/
                                        +-- AgendarAulaParticularDialog.java
                                        +-- AvaliarCursoDialog.java
                                        +-- AvaliarProfessorDialog.java
                                        +-- IncreverAulaEmGrupoDialog.java
                                        +-- MatricularCursoDialog.java
                                    +-- professor/
                                        +-- CadastrarAulaEmGrupoDialog.java
                                        +-- CadastrarCursoDialog.java
                                        +-- CursoOptionProfessorDialog.java
                                        +-- DeletarCursoDialog.java
                                        +-- EditarCursoDialog.java
                                +-- viewmodels/
                                    +-- AlunoCursoViewModel.java
                                    +-- AlunoViewModel.java
                                    +-- AulaCursoInscritoViewModel.java
                                    +-- AulaCursoViewModel.java
                                    +-- CursoAvaliacaoViewModel.java
                                    +-- CursoViewModel.java
                                    +-- ProfessorAvaliacaoViewModel.java
                                    +-- ProfessorViewModel.java
                                    +-- base/
                                        +-- BaseViewModel.java
                                    +-- factories/
                                        +-- base/
                                            +-- BaseFactory.java
                            +-- utils/
                                +-- DateConverter.java
                                +-- SessionManager.java
                                +-- StringUtils.java
                                +-- geradores/
                                    +-- GeradorDados.java
                                    +-- GerarAluno.java
                                    +-- GerarAlunoCurso.java
                                    +-- GerarAulaCurso.java
                                    +-- GerarCurso.java
                                    +-- GerarMassa.java
                                    +-- GerarProfessor.java
    +-- res/
        +-- drawable/
        +-- layout/
            +-- activity_cadastro.xml
            +-- activity_gerar_massa.xml
            +-- activity_login.xml
            +-- activity_main_aluno.xml
            +-- activity_main_professor.xml
            +-- calendar_aulas.xml
            +-- card_aluno.xml
            +-- card_aula.xml
            +-- card_avaliacao_professor.xml
            +-- card_curso_com_nota.xml
            +-- card_professor_com_nota.xml
            +-- card_professor_com_nota_aluno.xml
            +-- fragment_home_aluno.xml
            +-- fragment_home_professor.xml
            +-- fragment_meus_cursos_aluno.xml
            +-- fragment_meus_cursos_professor.xml
            +-- fragment_meu_perfil.xml
            +-- fragment_minhas_aulas_aluno.xml
            +-- fragment_minhas_aulas_professor.xml
            +-- modal_aderir_curso.xml
            +-- modal_aula_em_grupo.xml
            +-- modal_aula_entrar.xml
            +-- modal_aula_inscricao_aluno.xml
            +-- modal_aula_particular.xml
            +-- modal_aula_reagendar.xml
            +-- modal_cadastrar_aula.xml
            +-- modal_cadastrar_aula_em_grupo.xml
            +-- modal_cadastrar_curso.xml
            +-- modal_curso_avaliacao.xml
            +-- modal_curso_opcoes.xml
            +-- modal_curso_opcoes_professor.xml
            +-- modal_deletar_curso.xml
            +-- modal_detalhe_aula_grupo.xml
            +-- modal_editar_curso.xml
            +-- modal_matricula_curso.xml
            +-- modal_professor_avaliacao.xml
        +-- menu/
            +-- bottom_nav_menu_aluno.xml
            +-- bottom_nav_menu_professor.xml
        +-- mipmap-anydpi-v26/
        +-- mipmap-hdpi/
        +-- mipmap-mdpi/
        +-- mipmap-xhdpi/
        +-- mipmap-xxhdpi/
        +-- mipmap-xxxhdpi/
        +-- values/
        +-- values-night/
        +-- xml/


Conteúdo dos arquivos (sem imports e comentários):



--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/database/AppDatabase.java ---
package br.com.domenic.edtech.app.database;
@Database(entities = {
        Professor.class,
        Aluno.class,
        Curso.class,
        AulaCurso.class,
        AulaCursoInscrito.class,
        AlunoCurso.class,
        CursoAvaliacao.class,
        ProfessorAvaliacao.class
}, version = 17, exportSchema = false)
public abstract class AppDatabase extends RoomDatabase {
    private static AppDatabase INSTANCE;
    public abstract ProfessorDao professorDao();
    public abstract AlunoDao alunoDao();
    public abstract CursoDao cursoDao();
    public abstract AulaCursoDao aulaCursoDao();
    public abstract AulaCursoInscritoDao aulaCursoInscritoDao();
    public abstract AlunoCursoDao alunoCursoDao();
    public abstract CursoAvaliacaoDao cursoAvaliacaoDao();
    public abstract ProfessorAvaliacaoDao professorAvaliacaoDao();
    public static AppDatabase getInstance(Context context) {
        if (INSTANCE == null) {
            synchronized (AppDatabase.class) {
                if (INSTANCE == null) {
                    INSTANCE = Room.databaseBuilder(context.getApplicationContext(),
                                    AppDatabase.class, "edtech-db")
                            .fallbackToDestructiveMigration()
                            .build();
                }
            }
        }
        return INSTANCE;
    }
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/database/dao/AlunoCursoDao.java ---
package br.com.domenic.edtech.app.database.dao;
@Dao
public interface AlunoCursoDao extends BaseDao<AlunoCurso> {
    @Query("SELECT * FROM aluno_curso WHERE idAluno = :idAluno")
    LiveData<List<AlunoCurso>> getCursosByAluno(int idAluno);
    @Query("SELECT * FROM aluno_curso WHERE idCurso = :idCurso")
    LiveData<List<AlunoCurso>> getAlunosByCurso(int idCurso);
    @Query("SELECT cursos.* FROM cursos JOIN aluno_curso ON cursos.idCurso = aluno_curso.idCurso WHERE aluno_curso.idAluno = :idAluno")
    LiveData<List<Curso>> getOnlyCursosByAluno(int idAluno);
    @Query("SELECT * FROM aluno_curso")
    LiveData<List<AlunoCurso>> getAll();
    @Query("DELETE FROM aluno_curso WHERE idAluno = :idAluno")
    void deleteAllByAlunoId(int idAluno);
    @Query("DELETE FROM aluno_curso")
    void deleteAll();
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/database/dao/AlunoDao.java ---
package br.com.domenic.edtech.app.database.dao;
@Dao
public interface AlunoDao extends BaseDao<Aluno> {
    @Query("SELECT * FROM alunos WHERE idAluno = :idAluno")
    LiveData<Aluno> findById(int idAluno);
    @Query("SELECT * FROM alunos WHERE email = :email AND senha = :senha LIMIT 1")
    LiveData<Aluno> findByEmailAndSenha(String email, String senha);
    @Query("SELECT * FROM alunos")
    LiveData<List<Aluno>> getAll();
    @Query("DELETE FROM alunos")
    void deleteAll();
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/database/dao/AulaCursoDao.java ---
package br.com.domenic.edtech.app.database.dao;
@Dao
public interface AulaCursoDao extends BaseDao<AulaCurso> {
    @Query("SELECT * FROM aula_curso")
    LiveData<List<AulaCurso>> getAll();
    @Query("SELECT * FROM aula_curso WHERE idCurso = :idCurso")
    LiveData<List<AulaCurso>> findAulasByCursoId(int idCurso);
    @Query("SELECT * FROM aula_curso WHERE idProfessor = :idProfessor")
    LiveData<List<AulaCurso>> findAulasByProfessorId(int idProfessor);
    @Query("SELECT aula_curso.* FROM aula_curso JOIN aula_curso_inscrito ON aula_curso.idAulaCurso = aula_curso_inscrito.idAulaCurso WHERE aula_curso_inscrito.idAluno = :idAluno")
    LiveData<List<AulaCurso>> findAulasByAlunoId(int idAluno);
    @Query("DELETE FROM aula_curso")
    void deleteAll();
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/database/dao/AulaCursoInscritoDao.java ---
package br.com.domenic.edtech.app.database.dao;
@Dao
public interface AulaCursoInscritoDao extends BaseDao<AulaCursoInscrito> {
    @Query("SELECT * FROM aula_curso_inscrito")
    LiveData<List<AulaCursoInscrito>> getAll();
    @Query("SELECT * FROM aula_curso_inscrito WHERE idAulaCurso = :idAulaCurso")
    List<AulaCursoInscrito> findInscritosPorAula(int idAulaCurso);
    @Query("SELECT * FROM aula_curso_inscrito WHERE idAluno = :idAluno")
    List<AulaCursoInscrito> findAulaCursoByAlunoId(int idAluno);
    @Query("DELETE FROM aula_curso_inscrito")
    void deleteAll();
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/database/dao/CursoAvaliacaoDao.java ---
package br.com.domenic.edtech.app.database.dao;
@Dao
public interface CursoAvaliacaoDao extends BaseDao<CursoAvaliacao> {
    @Query("SELECT * FROM curso_avaliacao WHERE idCurso = :idCurso")
    LiveData<List<CursoAvaliacao>> getAvaliacoesByCursoId(int idCurso);
    @Query("SELECT * FROM curso_avaliacao")
    LiveData<List<CursoAvaliacao>> getAll();
    @Query("DELETE FROM curso_avaliacao")
    void deleteAll();
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/database/dao/CursoDao.java ---
package br.com.domenic.edtech.app.database.dao;
@Dao
public interface CursoDao extends BaseDao<Curso> {
    @Query("SELECT * FROM cursos WHERE idProfessor = :idProfessor")
    LiveData<List<Curso>> findByProfessorId(int idProfessor);
    @Query("SELECT * FROM cursos")
    LiveData<List<Curso>> getAll();
    @Query("DELETE FROM cursos")
    void deleteAll();
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/database/dao/ProfessorAvaliacaoDao.java ---
package br.com.domenic.edtech.app.database.dao;
@Dao
public interface ProfessorAvaliacaoDao extends BaseDao<ProfessorAvaliacao> {
    @Query("SELECT * FROM professor_avaliacao WHERE idProfessor = :idProfessor")
    LiveData<List<ProfessorAvaliacao>> getAvaliacoesByProfessor(int idProfessor);
    @Query("SELECT * FROM professor_avaliacao")
    LiveData<List<ProfessorAvaliacao>> getAll();
    @Query("DELETE FROM professor_avaliacao")
    void deleteAll();
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/database/dao/ProfessorDao.java ---
package br.com.domenic.edtech.app.database.dao;
@Dao
public interface ProfessorDao extends BaseDao<Professor> {
    @Query("SELECT * FROM professores WHERE idProfessor = :idProfessor")
    LiveData<Professor> findById(int idProfessor);
    @Query("SELECT * FROM professores WHERE email = :email AND senha = :senha LIMIT 1")
    LiveData<Professor> findByEmailAndSenha(String email, String senha);
    @Query("SELECT * FROM professores")
    LiveData<List<Professor>> getAll();
    @Query("DELETE FROM professores")
    void deleteAll();
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/database/dao/base/BaseDao.java ---
package br.com.domenic.edtech.app.database.dao.base;
public interface BaseDao<T> {
    @Insert
    void insert(T entity);
    @Update
    void update(T entity);
    @Delete
    void delete(T entity);
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/models/Aluno.java ---
package br.com.domenic.edtech.app.models;
@Entity(tableName = "alunos")
@TypeConverters({DateConverter.class})
public class Aluno {
    @PrimaryKey(autoGenerate = true)
    private int idAluno;
    private String nomeCompleto;
    private Date dataNascimento;
    private String celular;
    private String endereco;
    private String cpf;
    private String fotoPerfil;
    private String email;
    private String senha;
    private Date dataCadastro;
    public int getIdAluno() {
        return idAluno;
    }
    public void setIdAluno(int idAluno) {
        this.idAluno = idAluno;
    }
    public String getNomeCompleto() {
        return nomeCompleto;
    }
    public void setNomeCompleto(String nomeCompleto) {
        this.nomeCompleto = nomeCompleto;
    }
    public Date getDataNascimento() {
        return dataNascimento;
    }
    public void setDataNascimento(Date dataNascimento) {
        this.dataNascimento = dataNascimento;
    }
    public String getCelular() {
        return celular;
    }
    public void setCelular(String celular) {
        this.celular = celular;
    }
    public String getEndereco() {
        return endereco;
    }
    public void setEndereco(String endereco) {
        this.endereco = endereco;
    }
    public String getCpf() {
        return cpf;
    }
    public void setCpf(String cpf) {
        this.cpf = cpf;
    }
    public String getFotoPerfil() {
        return fotoPerfil;
    }
    public void setFotoPerfil(String fotoPerfil) {
        this.fotoPerfil = fotoPerfil;
    }
    public String getEmail() {
        return email;
    }
    public void setEmail(String email) {
        this.email = email;
    }
    public String getSenha() {
        return senha;
    }
    public void setSenha(String senha) {
        this.senha = senha;
    }
    public Date getDataCadastro() {
        return dataCadastro;
    }
    public void setDataCadastro(Date dataCadastro) {
        this.dataCadastro = dataCadastro;
    }
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/models/AlunoAula.java ---
package br.com.domenic.edtech.app.models;
@Entity(
        tableName = "aluno_aula",
        foreignKeys = @ForeignKey(
                entity = AulaCurso.class, // Referencia a entidade correta
                parentColumns = "idAulaCurso",
                childColumns = "idAulaCurso",
                onDelete = ForeignKey.CASCADE // Aplica o delete on cascade
        ),
        indices = @Index(value = "idAulaCurso")  // Adiciona um índice na coluna idAulaCurso
)
@TypeConverters({DateConverter.class})
public class AlunoAula {
    @PrimaryKey(autoGenerate = true)
    private int idAlunoAula;
    private int idAluno;
    private int idAulaCurso;
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/models/AlunoCurso.java ---
package br.com.domenic.edtech.app.models;
@Entity(
        tableName = "aluno_curso",
        foreignKeys = {
                @ForeignKey(
                        entity = Aluno.class,
                        parentColumns = "idAluno",
                        childColumns = "idAluno",
                        onDelete = ForeignKey.CASCADE // Aplica o delete on cascade para a entidade Aluno
                ),
                @ForeignKey(
                        entity = Curso.class,
                        parentColumns = "idCurso",
                        childColumns = "idCurso",
                        onDelete = ForeignKey.CASCADE // Aplica o delete on cascade para a entidade Curso
                )
        },
        indices = {
                @Index(value = "idAluno"),  // Índice na coluna idAluno
                @Index(value = "idCurso")   // Índice na coluna idCurso
        }
)
@TypeConverters({DateConverter.class})
public class AlunoCurso {
    @PrimaryKey(autoGenerate = true)
    private int idAlunoCurso;
    private int idAluno;
    private int idCurso;
    private Date dataMatricula;
    private Date dataConclusao;
    private String status;
    private int qtdCursoAulaParticular;
    private Double notaFinal;
    private String comentarios;
    public AlunoCurso() {
    }
    @Ignore
    public AlunoCurso(int idAluno, int idCurso, Date dataMatricula, Date dataConclusao, String status, int qtdCursoAulaParticular, Double notaFinal, String comentarios) {
        this.idAluno = idAluno;
        this.idCurso = idCurso;
        this.dataMatricula = dataMatricula;
        this.dataConclusao = dataConclusao;
        this.status = status;
        this.qtdCursoAulaParticular = qtdCursoAulaParticular;
        this.notaFinal = notaFinal;
        this.comentarios = comentarios;
    }
    public int getIdAlunoCurso() {
        return idAlunoCurso;
    }
    public void setIdAlunoCurso(int idAlunoCurso) {
        this.idAlunoCurso = idAlunoCurso;
    }
    public int getIdAluno() {
        return idAluno;
    }
    public void setIdAluno(int idAluno) {
        this.idAluno = idAluno;
    }
    public int getIdCurso() {
        return idCurso;
    }
    public void setIdCurso(int idCurso) {
        this.idCurso = idCurso;
    }
    public Date getDataMatricula() {
        return dataMatricula;
    }
    public void setDataMatricula(Date dataMatricula) {
        this.dataMatricula = dataMatricula;
    }
    public Date getDataConclusao() {
        return dataConclusao;
    }
    public void setDataConclusao(Date dataConclusao) {
        this.dataConclusao = dataConclusao;
    }
    public String getStatus() {
        return status;
    }
    public void setStatus(String status) {
        this.status = status;
    }
    public int getQtdCursoAulaParticular() {
        return qtdCursoAulaParticular;
    }
    public void setQtdCursoAulaParticular(int qtdCursoAulaParticular) {
        this.qtdCursoAulaParticular = qtdCursoAulaParticular;
    }
    public Double getNotaFinal() {
        return notaFinal;
    }
    public void setNotaFinal(Double notaFinal) {
        this.notaFinal = notaFinal;
    }
    public String getComentarios() {
        return comentarios;
    }
    public void setComentarios(String comentarios) {
        this.comentarios = comentarios;
    }
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/models/AulaCurso.java ---
package br.com.domenic.edtech.app.models;
@Entity(
        tableName = "aula_curso",
        foreignKeys = {
                @ForeignKey(
                        entity = Curso.class,
                        parentColumns = "idCurso",
                        childColumns = "idCurso",
                        onDelete = ForeignKey.CASCADE  // Define o comportamento ao deletar o curso
                ),
                @ForeignKey(
                        entity = Professor.class,
                        parentColumns = "idProfessor",
                        childColumns = "idProfessor",
                        onDelete = ForeignKey.CASCADE  // Define o comportamento ao deletar o professor
                )
        },
        indices = {
                @Index(value = "idCurso"),      // Índice na coluna idCurso
                @Index(value = "idProfessor")   // Índice na coluna idProfessor
        }
)
@TypeConverters({DateConverter.class})
public class AulaCurso {
    @PrimaryKey(autoGenerate = true)
    private int idAulaCurso;
    private int idCurso;
    private int idProfessor;
    private boolean aulaParticular;
    private boolean aulaOnline;
    private String titulo;
    private String descricao;
    private Date dataAula;
    private String linkAulaAoVivo;
    public AulaCurso() {
    }
    @Ignore
    public AulaCurso(int idCurso, int idProfessor, boolean aulaParticular, boolean aulaOnline, String titulo, String descricao, Date dataAula, String linkAulaAoVivo) {
        this.idCurso = idCurso;
        this.idProfessor = idProfessor;
        this.aulaParticular = aulaParticular;
        this.aulaOnline = aulaOnline;
        this.titulo = titulo;
        this.descricao = descricao;
        this.dataAula = dataAula;
        this.linkAulaAoVivo = linkAulaAoVivo;
    }
    public int getIdAulaCurso() {
        return idAulaCurso;
    }
    public void setIdAulaCurso(int idAulaCurso) {
        this.idAulaCurso = idAulaCurso;
    }
    public int getIdCurso() {
        return idCurso;
    }
    public void setIdCurso(int idCurso) {
        this.idCurso = idCurso;
    }
    public int getIdProfessor() {
        return idProfessor;
    }
    public void setIdProfessor(int idProfessor) {
        this.idProfessor = idProfessor;
    }
    public boolean isAulaParticular() {
        return aulaParticular;
    }
    public void setAulaParticular(boolean aulaParticular) {
        this.aulaParticular = aulaParticular;
    }
    public boolean isAulaOnline() {
        return aulaOnline;
    }
    public void setAulaOnline(boolean aulaOnline) {
        this.aulaOnline = aulaOnline;
    }
    public String getTitulo() {
        return titulo;
    }
    public void setTitulo(String titulo) {
        this.titulo = titulo;
    }
    public String getDescricao() {
        return descricao;
    }
    public void setDescricao(String descricao) {
        this.descricao = descricao;
    }
    public Date getDataAula() {
        return dataAula;
    }
    public void setDataAula(Date dataAula) {
        this.dataAula = dataAula;
    }
    public String getLinkAulaAoVivo() {
        return linkAulaAoVivo;
    }
    public void setLinkAulaAoVivo(String linkAulaAoVivo) {
        this.linkAulaAoVivo = linkAulaAoVivo;
    }
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/models/AulaCursoInscrito.java ---
package br.com.domenic.edtech.app.models;
@Entity(
        tableName = "aula_curso_inscrito",
        foreignKeys = @ForeignKey(
                entity = AulaCurso.class,
                parentColumns = "idAulaCurso",
                childColumns = "idAulaCurso",
                onDelete = ForeignKey.CASCADE
        ),
        indices = @Index(value = "idAulaCurso") // Índice para idAulaCurso
)
public class AulaCursoInscrito {
    @PrimaryKey(autoGenerate = true)
    private int idAulaCursoInscrito;
    private int idAulaCurso;
    private int idAluno;
    public AulaCursoInscrito() {
    }
    @Ignore
    public AulaCursoInscrito(int idAulaCurso, int idAluno) {
        this.idAulaCurso = idAulaCurso;
        this.idAluno = idAluno;
    }
    public int getIdAulaCursoInscrito() {
        return idAulaCursoInscrito;
    }
    public void setIdAulaCursoInscrito(int idAulaCursoInscrito) {
        this.idAulaCursoInscrito = idAulaCursoInscrito;
    }
    public int getIdAulaCurso() {
        return idAulaCurso;
    }
    public void setIdAulaCurso(int idAulaCurso) {
        this.idAulaCurso = idAulaCurso;
    }
    public int getIdAluno() {
        return idAluno;
    }
    public void setIdAluno(int idAluno) {
        this.idAluno = idAluno;
    }
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/models/Curso.java ---
package br.com.domenic.edtech.app.models;
@Entity(
        tableName = "cursos",
        foreignKeys = @ForeignKey(
                entity = Professor.class,
                parentColumns = "idProfessor",
                childColumns = "idProfessor",
                onDelete = ForeignKey.CASCADE // Adiciona a opção de Delete on Cascade
        ),
        indices = {@Index(value = "idProfessor")} // Índice para idProfessor
)
@TypeConverters({DateConverter.class})
public class Curso {
    @PrimaryKey(autoGenerate = true)
    private int idCurso;
    private int idProfessor;
    private String nomeCurso;
    private String descricao;
    private double precoCurso;
    private double precoCursoAulaParticular;
    private int duracaoHoras;
    private Date dataCriacao;
    private int popularidade;
    private int recomendacao;
    public Curso() {
    }
    @Ignore
    public Curso(String nome, String descricao, int duracaoHoras, double precoCurso, double precoCursoAulaParticular, int idProfessor, Date dataCriacao, int popularidade, int recomendacao) {
        this.nomeCurso = nome;
        this.descricao = descricao;
        this.precoCurso = precoCurso;
        this.precoCursoAulaParticular = precoCursoAulaParticular;
        this.duracaoHoras = duracaoHoras;
        this.idProfessor = idProfessor;
        this.dataCriacao = dataCriacao;
        this.popularidade = popularidade;
        this.recomendacao = recomendacao;
    }
    public int getIdCurso() {
        return idCurso;
    }
    public void setIdCurso(int idCurso) {
        this.idCurso = idCurso;
    }
    public int getIdProfessor() {
        return idProfessor;
    }
    public void setIdProfessor(int idProfessor) {
        this.idProfessor = idProfessor;
    }
    public String getNomeCurso() {
        return nomeCurso;
    }
    public void setNomeCurso(String nomeCurso) {
        this.nomeCurso = nomeCurso;
    }
    public String getDescricao() {
        return descricao;
    }
    public void setDescricao(String descricao) {
        this.descricao = descricao;
    }
    public double getPrecoCurso() {
        return precoCurso;
    }
    public void setPrecoCurso(double precoCurso) {
        this.precoCurso = precoCurso;
    }
    public double getPrecoCursoAulaParticular() {
        return precoCursoAulaParticular;
    }
    public void setPrecoCursoAulaParticular(double precoCursoAulaParticular) {
        this.precoCursoAulaParticular = precoCursoAulaParticular;
    }
    public int getDuracaoHoras() {
        return duracaoHoras;
    }
    public void setDuracaoHoras(int duracaoHoras) {
        this.duracaoHoras = duracaoHoras;
    }
    public Date getDataCriacao() {
        return dataCriacao;
    }
    public void setDataCriacao(Date dataCriacao) {
        this.dataCriacao = dataCriacao;
    }
    public int getPopularidade() {
        return popularidade;
    }
    public void setPopularidade(int popularidade) {
        this.popularidade = popularidade;
    }
    public int getRecomendacao() {
        return recomendacao;
    }
    public void setRecomendacao(int recomendacao) {
        this.recomendacao = recomendacao;
    }
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/models/CursoAvaliacao.java ---
package br.com.domenic.edtech.app.models;
@Entity(
        tableName = "curso_avaliacao",
        primaryKeys = {"idAluno", "idCurso"},
        foreignKeys = {
                @ForeignKey(entity = Aluno.class, parentColumns = "idAluno", childColumns = "idAluno", onDelete = ForeignKey.CASCADE), // Delete on Cascade para Aluno
                @ForeignKey(entity = Curso.class, parentColumns = "idCurso", childColumns = "idCurso", onDelete = ForeignKey.CASCADE)  // Delete on Cascade para Curso
        },
        indices = {@Index(value = "idCurso")} // Índice para idCurso
)
@TypeConverters({DateConverter.class})
public class CursoAvaliacao {
    private int idAluno;
    private int idCurso;
    private int nota;
    private String comentario;
    private Date dataAvaliacao;
    public int getIdAluno() {
        return idAluno;
    }
    public void setIdAluno(int idAluno) {
        this.idAluno = idAluno;
    }
    public int getIdCurso() {
        return idCurso;
    }
    public void setIdCurso(int idCurso) {
        this.idCurso = idCurso;
    }
    public int getNota() {
        return nota;
    }
    public void setNota(int nota) {
        this.nota = nota;
    }
    public String getComentario() {
        return comentario;
    }
    public void setComentario(String comentario) {
        this.comentario = comentario;
    }
    public Date getDataAvaliacao() {
        return dataAvaliacao;
    }
    public void setDataAvaliacao(Date dataAvaliacao) {
        this.dataAvaliacao = dataAvaliacao;
    }
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/models/Professor.java ---
package br.com.domenic.edtech.app.models;
@Entity(tableName = "professores")
@TypeConverters({DateConverter.class})
public class Professor {
    @PrimaryKey(autoGenerate = true)
    private int idProfessor;
    private String nomeCompleto;
    private Date dataNascimento;
    private String celular;
    private String endereco;
    private String cpf;
    private String bio;
    private String fotoPerfil;
    private String email;
    private String senha;
    private Date dataCadastro;
    private String especialidade;
    public int getIdProfessor() {
        return idProfessor;
    }
    public void setIdProfessor(int idProfessor) {
        this.idProfessor = idProfessor;
    }
    public String getNomeCompleto() {
        return nomeCompleto;
    }
    public void setNomeCompleto(String nomeCompleto) {
        this.nomeCompleto = nomeCompleto;
    }
    public Date getDataNascimento() {
        return dataNascimento;
    }
    public void setDataNascimento(Date dataNascimento) {
        this.dataNascimento = dataNascimento;
    }
    public String getCelular() {
        return celular;
    }
    public void setCelular(String celular) {
        this.celular = celular;
    }
    public String getEndereco() {
        return endereco;
    }
    public void setEndereco(String endereco) {
        this.endereco = endereco;
    }
    public String getCpf() {
        return cpf;
    }
    public void setCpf(String cpf) {
        this.cpf = cpf;
    }
    public String getBio() {
        return bio;
    }
    public void setBio(String bio) {
        this.bio = bio;
    }
    public String getFotoPerfil() {
        return fotoPerfil;
    }
    public void setFotoPerfil(String fotoPerfil) {
        this.fotoPerfil = fotoPerfil;
    }
    public String getEmail() {
        return email;
    }
    public void setEmail(String email) {
        this.email = email;
    }
    public String getSenha() {
        return senha;
    }
    public void setSenha(String senha) {
        this.senha = senha;
    }
    public Date getDataCadastro() {
        return dataCadastro;
    }
    public void setDataCadastro(Date dataCadastro) {
        this.dataCadastro = dataCadastro;
    }
    public String getEspecialidade() {
        return especialidade;
    }
    public void setEspecialidade(String especialidade) {
        this.especialidade = especialidade;
    }
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/models/ProfessorAvaliacao.java ---
package br.com.domenic.edtech.app.models;
@Entity(
        tableName = "professor_avaliacao",
        primaryKeys = {"idAluno", "idProfessor"},
        foreignKeys = {
                @ForeignKey(entity = Aluno.class, parentColumns = "idAluno", childColumns = "idAluno", onDelete = ForeignKey.CASCADE), // Delete on Cascade para Aluno
                @ForeignKey(entity = Professor.class, parentColumns = "idProfessor", childColumns = "idProfessor", onDelete = ForeignKey.CASCADE) // Delete on Cascade para Professor
        },
        indices = {@Index(value = "idProfessor")} // Índice para idProfessor
)
@TypeConverters({DateConverter.class})
public class ProfessorAvaliacao {
    private int idAluno;
    private int idProfessor;
    private int nota;
    private String comentario;
    private Date dataAvaliacao;
    public ProfessorAvaliacao() {
    }
    @Ignore
    public ProfessorAvaliacao(int idAluno, int idProfessor, int nota, String comentario, Date dataAvaliacao) {
        this.idAluno = idAluno;
        this.idProfessor = idProfessor;
        this.nota = nota;
        this.comentario = comentario;
        this.dataAvaliacao = dataAvaliacao;
    }
    public int getIdAluno() {
        return idAluno;
    }
    public void setIdAluno(int idAluno) {
        this.idAluno = idAluno;
    }
    public int getIdProfessor() {
        return idProfessor;
    }
    public void setIdProfessor(int idProfessor) {
        this.idProfessor = idProfessor;
    }
    public int getNota() {
        return nota;
    }
    public void setNota(int nota) {
        this.nota = nota;
    }
    public String getComentario() {
        return comentario;
    }
    public void setComentario(String comentario) {
        this.comentario = comentario;
    }
    public Date getDataAvaliacao() {
        return dataAvaliacao;
    }
    public void setDataAvaliacao(Date dataAvaliacao) {
        this.dataAvaliacao = dataAvaliacao;
    }
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/models/repositories/AlunoCursoRepository.java ---
package br.com.domenic.edtech.app.models.repositories;
public class AlunoCursoRepository extends BaseRepository<AlunoCurso> {
    private final AlunoCursoDao alunoCursoDao;
    public AlunoCursoRepository(Application application) {
        super(application);
        AppDatabase db = AppDatabase.getInstance(application);
        alunoCursoDao = db.alunoCursoDao();
    }
    @Override
    public LiveData<List<AlunoCurso>> getAll() {
        return alunoCursoDao.getAll();
    }
    public LiveData<List<AlunoCurso>> getCursosByAluno(int idAluno) {
        return alunoCursoDao.getCursosByAluno(idAluno);
    }
    @Override
    protected void insertInDatabase(AlunoCurso alunoCurso) {
        alunoCursoDao.insert(alunoCurso);
    }
    @Override
    protected void updateInDatabase(AlunoCurso alunoCurso) {
        alunoCursoDao.update(alunoCurso);
    }
    @Override
    protected void deleteInDatabase(AlunoCurso alunoCurso) {
        alunoCursoDao.delete(alunoCurso);
    }
    public LiveData<List<Curso>> getOnlyCursosByAluno(int idAluno) {
        return alunoCursoDao.getOnlyCursosByAluno(idAluno);
    }
    @Override
    protected void deleteInDatabaseByCriteria(int idAluno) {
        alunoCursoDao.deleteAllByAlunoId(idAluno);
    }
    public void deleteAll() {
        alunoCursoDao.deleteAll();
    }
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/models/repositories/AlunoRepository.java ---
package br.com.domenic.edtech.app.models.repositories;
public class AlunoRepository extends BaseRepository<Aluno> {
    private final AlunoDao alunoDao;
    public AlunoRepository(Application application) {
        super(application);
        AppDatabase db = AppDatabase.getInstance(application);
        alunoDao = db.alunoDao();
    }
    @Override
    public LiveData<List<Aluno>> getAll() {
        return alunoDao.getAll();
    }
    public LiveData<Aluno> findByEmailAndSenha(String email, String senha) {
        return alunoDao.findByEmailAndSenha(email, senha);
    }
    @Override
    protected void insertInDatabase(Aluno aluno) {
        alunoDao.insert(aluno);
    }
    @Override
    protected void updateInDatabase(Aluno aluno) {
        alunoDao.update(aluno);
    }
    @Override
    protected void deleteInDatabase(Aluno aluno) {
        alunoDao.delete(aluno);
    }
    public LiveData<Aluno> findById(int idAluno) {
        return alunoDao.findById(idAluno);
    }
    @Override
    protected void deleteInDatabaseByCriteria(int criteria) {
    }
    public void deleteAll() {
        alunoDao.deleteAll();
    }
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/models/repositories/AulaCursoInscritoRepository.java ---
package br.com.domenic.edtech.app.models.repositories;
public class AulaCursoInscritoRepository extends BaseRepository<AulaCursoInscrito> {
    private final AulaCursoInscritoDao aulaCursoInscritoDao;
    public AulaCursoInscritoRepository(Application application) {
        super(application);
        AppDatabase db = AppDatabase.getInstance(application);
        aulaCursoInscritoDao = db.aulaCursoInscritoDao();
    }
    @Override
    public LiveData<List<AulaCursoInscrito>> getAll() {
        return aulaCursoInscritoDao.getAll();
    }
    @Override
    protected void insertInDatabase(AulaCursoInscrito aulaCursoInscrito) {
        aulaCursoInscritoDao.insert(aulaCursoInscrito);
    }
    @Override
    protected void updateInDatabase(AulaCursoInscrito aulaCursoInscrito) {
        aulaCursoInscritoDao.update(aulaCursoInscrito);
    }
    @Override
    protected void deleteInDatabase(AulaCursoInscrito aulaCursoInscrito) {
        aulaCursoInscritoDao.delete(aulaCursoInscrito);
    }
    @Override
    protected void deleteInDatabaseByCriteria(int criteria) {
    }
    public void deleteAll() {
        aulaCursoInscritoDao.deleteAll();
    }
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/models/repositories/AulaCursoRepository.java ---
package br.com.domenic.edtech.app.models.repositories;
public class AulaCursoRepository extends BaseRepository<AulaCurso> {
    private final AulaCursoDao aulaCursoDao;
    public AulaCursoRepository(Application application) {
        super(application);
        AppDatabase db = AppDatabase.getInstance(application);
        aulaCursoDao = db.aulaCursoDao();
    }
    @Override
    public LiveData<List<AulaCurso>> getAll() {
        return aulaCursoDao.getAll();
    }
    @Override
    protected void insertInDatabase(AulaCurso aulaCurso) {
        aulaCursoDao.insert(aulaCurso);
    }
    @Override
    protected void updateInDatabase(AulaCurso aulaCurso) {
        aulaCursoDao.update(aulaCurso);
    }
    @Override
    protected void deleteInDatabase(AulaCurso aulaCurso) {
        aulaCursoDao.delete(aulaCurso);
    }
    @Override
    protected void deleteInDatabaseByCriteria(int criteria) {
    }
    public LiveData<List<AulaCurso>> findAulasByCursoId(int idCurso) {
        return aulaCursoDao.findAulasByCursoId(idCurso);
    }
    public LiveData<List<AulaCurso>> findAulasByProfessorId(int idProfessor) {
        return aulaCursoDao.findAulasByProfessorId(idProfessor);
    }
    public LiveData<List<AulaCurso>> findAulasByAlunoId(int idAluno) {
        return aulaCursoDao.findAulasByAlunoId(idAluno);
    }
    public void deleteAll() {
        aulaCursoDao.deleteAll();
    }
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/models/repositories/CursoAvaliacaoRepository.java ---
package br.com.domenic.edtech.app.models.repositories;
public class CursoAvaliacaoRepository extends BaseRepository<CursoAvaliacao> {
    private final CursoAvaliacaoDao cursoAvaliacaoDao;
    public CursoAvaliacaoRepository(Application application) {
        super(application);
        AppDatabase db = AppDatabase.getInstance(application);
        cursoAvaliacaoDao = db.cursoAvaliacaoDao();
    }
    @Override
    public LiveData<List<CursoAvaliacao>> getAll() {
        return cursoAvaliacaoDao.getAll();
    }
    @Override
    protected void insertInDatabase(CursoAvaliacao cursoAvaliacao) {
        cursoAvaliacaoDao.insert(cursoAvaliacao);
    }
    @Override
    protected void updateInDatabase(CursoAvaliacao cursoAvaliacao) {
        cursoAvaliacaoDao.update(cursoAvaliacao);
    }
    @Override
    protected void deleteInDatabase(CursoAvaliacao cursoAvaliacao) {
        cursoAvaliacaoDao.delete(cursoAvaliacao);
    }
    @Override
    protected void deleteInDatabaseByCriteria(int criteria) {
    }
    public LiveData<List<CursoAvaliacao>> findAvaliacoesByCursoId(int cursoId) {
        return cursoAvaliacaoDao.getAvaliacoesByCursoId(cursoId);
    }
    public void deleteAll() {
        cursoAvaliacaoDao.deleteAll();
    }
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/models/repositories/CursoRepository.java ---
package br.com.domenic.edtech.app.models.repositories;
public class CursoRepository extends BaseRepository<Curso> {
    private final CursoDao cursoDao;
    public CursoRepository(Application application) {
        super(application);
        AppDatabase db = AppDatabase.getInstance(application);
        cursoDao = db.cursoDao();
    }
    @Override
    public LiveData<List<Curso>> getAll() {
        return cursoDao.getAll();
    }
    @Override
    protected void insertInDatabase(Curso curso) {
        cursoDao.insert(curso);
    }
    @Override
    protected void updateInDatabase(Curso curso) {
        cursoDao.update(curso);
    }
    @Override
    protected void deleteInDatabase(Curso curso) {
        cursoDao.delete(curso);
    }
    public LiveData<List<Curso>> findByProfessorId(int idProfessor) {
        return cursoDao.findByProfessorId(idProfessor);
    }
    @Override
    protected void deleteInDatabaseByCriteria(int criteria) {
    }
    public void deleteAll() {
        cursoDao.deleteAll();
    }
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/models/repositories/ProfessorAvaliacaoRepository.java ---
package br.com.domenic.edtech.app.models.repositories;
public class ProfessorAvaliacaoRepository extends BaseRepository<ProfessorAvaliacao> {
    private final ProfessorAvaliacaoDao professorAvaliacaoDao;
    public ProfessorAvaliacaoRepository(Application application) {
        super(application);
        AppDatabase db = AppDatabase.getInstance(application);
        professorAvaliacaoDao = db.professorAvaliacaoDao();
    }
    @Override
    public LiveData<List<ProfessorAvaliacao>> getAll() {
        return professorAvaliacaoDao.getAll();
    }
    @Override
    protected void insertInDatabase(ProfessorAvaliacao professorAvaliacao) {
        professorAvaliacaoDao.insert(professorAvaliacao);
    }
    @Override
    protected void updateInDatabase(ProfessorAvaliacao professorAvaliacao) {
        professorAvaliacaoDao.update(professorAvaliacao);
    }
    @Override
    protected void deleteInDatabase(ProfessorAvaliacao professorAvaliacao) {
        professorAvaliacaoDao.delete(professorAvaliacao);
    }
    @Override
    protected void deleteInDatabaseByCriteria(int criteria) {
    }
    public void deleteAll() {
        professorAvaliacaoDao.deleteAll();
    }
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/models/repositories/ProfessorRepository.java ---
package br.com.domenic.edtech.app.models.repositories;
public class ProfessorRepository extends BaseRepository<Professor> {
    private final ProfessorDao professorDao;
    public ProfessorRepository(Application application) {
        super(application);
        AppDatabase db = AppDatabase.getInstance(application);
        professorDao = db.professorDao();
    }
    @Override
    public LiveData<List<Professor>> getAll() {
        return professorDao.getAll();
    }
    public LiveData<Professor> findByEmailAndSenha(String email, String senha) {
        return professorDao.findByEmailAndSenha(email, senha);
    }
    @Override
    protected void insertInDatabase(Professor professor) {
        professorDao.insert(professor);
    }
    @Override
    protected void updateInDatabase(Professor professor) {
        professorDao.update(professor);
    }
    @Override
    protected void deleteInDatabase(Professor professor) {
        professorDao.delete(professor);
    }
    public LiveData<Professor> findById(int idProfessor) {
        return professorDao.findById(idProfessor);
    }
    @Override
    protected void deleteInDatabaseByCriteria(int criteria) {
    }
    public void deleteAll() {
        professorDao.deleteAll();
    }
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/models/repositories/base/BaseRepository.java ---
package br.com.domenic.edtech.app.models.repositories.base;
public abstract class BaseRepository<T> {
    protected ExecutorService executorService;
    public BaseRepository(Application application) {
        executorService = Executors.newSingleThreadExecutor();
    }
    public abstract LiveData<List<T>> getAll();
    public void insert(T entity, Runnable onCompletion) {
        executorService.execute(() -> {
            insertInDatabase(entity);
            onCompletion.run();
        });
    }
    protected abstract void insertInDatabase(T entity);
    public void update(T entity) {
        executorService.execute(() -> updateInDatabase(entity));
    }
    protected abstract void updateInDatabase(T entity);
    public void delete(T entity) {
        executorService.execute(() -> deleteInDatabase(entity));
    }
    protected abstract void deleteInDatabase(T entity);
    public void deleteByCriteria(int criteria, Runnable onCompletion) {
        executorService.execute(() -> {
            deleteInDatabaseByCriteria(criteria);  // Método abstrato a ser implementado por subclasses
            if (onCompletion != null) {
                onCompletion.run();
            }
        });
    }
    protected abstract void deleteInDatabaseByCriteria(int criteria);
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/ui/CadastroActivity.java ---
package br.com.domenic.edtech.app.ui;
public class CadastroActivity extends AppCompatActivity {
    private TextInputLayout nomeInput, emailInput, senhaInput, confirmarSenhaInput, cpfInput, celularInput, especialidadeInput;
    private Spinner spinnerEspecialidade;
    private RadioGroup perfilGroup;
    private RadioButton perfilAluno, perfilProfessor;
    private MaterialButton cadastrarButton;
    private AlunoViewModel alunoViewModel;
    private ProfessorViewModel professorViewModel;
    private String especialidadeSelecionada = "";
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_cadastro);
        initToolbar();
        initViews();
        setupViewModels();
        setupListeners();
    }
    private void initToolbar() {
        Toolbar toolbar = findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);
        if (getSupportActionBar() != null) {
            getSupportActionBar().setDisplayShowTitleEnabled(false);
            getSupportActionBar().setDisplayHomeAsUpEnabled(true);
            getSupportActionBar().setHomeAsUpIndicator(R.drawable.baseline_arrow_back_ios_24);
        }
    }
    private void initViews() {
        nomeInput = findViewById(R.id.tiNomeCompleto);
        emailInput = findViewById(R.id.tiEmailCadastro);
        senhaInput = findViewById(R.id.tiSenhaCadastro);
        confirmarSenhaInput = findViewById(R.id.tiConfirmarSenha);
        cpfInput = findViewById(R.id.tiCPF);
        celularInput = findViewById(R.id.tiCelular);
        especialidadeInput = findViewById(R.id.tiEspecialidade);
        spinnerEspecialidade = findViewById(R.id.spinnerEspecialidade);
        perfilGroup = findViewById(R.id.rgPerfil);
        perfilAluno = findViewById(R.id.rbAluno);
        perfilProfessor = findViewById(R.id.rbProfessor);
        cadastrarButton = findViewById(R.id.btnCadastrar);
        nomeInput.getEditText().setText(GeradorDados.gerarNomeAleatorio());
        cpfInput.getEditText().setText(GeradorDados.gerarCpfAleatorio());
        celularInput.getEditText().setText(GeradorDados.gerarCelularAleatorio());
        spinnerEspecialidade.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                especialidadeSelecionada = parent.getItemAtPosition(position).toString(); // Armazena a especialidade selecionada
            }
            @Override
            public void onNothingSelected(AdapterView<?> parent) {
                especialidadeSelecionada = ""; // Caso nenhuma especialidade seja selecionada
            }
        });
    }
    private void setupViewModels() {
        alunoViewModel = new ViewModelProvider(this, new BaseFactory<>(getApplication(), AlunoViewModel.class)).get(AlunoViewModel.class);
        professorViewModel = new ViewModelProvider(this, new BaseFactory<>(getApplication(), ProfessorViewModel.class)).get(ProfessorViewModel.class);
    }
    private void setupListeners() {
        perfilGroup.setOnCheckedChangeListener((group, checkedId) -> {
            if (checkedId == R.id.rbProfessor) {
                especialidadeInput.setVisibility(View.VISIBLE);
            } else {
                especialidadeInput.setVisibility(View.GONE);
            }
        });
        cadastrarButton.setOnClickListener(v -> cadastrarUsuario());
    }
    private void cadastrarUsuario() {
        String nome = nomeInput.getEditText().getText().toString();
        String email = emailInput.getEditText().getText().toString();
        String senha = senhaInput.getEditText().getText().toString();
        String confirmarSenha = confirmarSenhaInput.getEditText().getText().toString();
        String cpf = cpfInput.getEditText().getText().toString();
        String celular = celularInput.getEditText().getText().toString();
        int perfilSelecionado = perfilGroup.getCheckedRadioButtonId();
        if (isInputValid(nome, email, senha, confirmarSenha, cpf, celular)) {
            if (perfilSelecionado == R.id.rbAluno) {
                Aluno novoAluno = new Aluno();
                novoAluno.setNomeCompleto(nome);
                novoAluno.setEmail(email);
                novoAluno.setSenha(senha);
                novoAluno.setCpf(cpf);
                novoAluno.setCelular(celular);
                alunoViewModel.insert(novoAluno, () -> {
                    runOnUiThread(() -> {
                        showToast("Cadastro realizado com sucesso!");
                        irParaLogin();
                    });
                });
            } else if (perfilSelecionado == R.id.rbProfessor) {
                if (especialidadeSelecionada.isEmpty() || especialidadeSelecionada.equals("Selecione sua especialidade:")) {
                    showToast("Por favor, selecione uma especialidade válida.");
                    return;
                }
                Professor novoProfessor = new Professor();
                novoProfessor.setNomeCompleto(nome);
                novoProfessor.setEmail(email);
                novoProfessor.setSenha(senha);
                novoProfessor.setCpf(cpf);
                novoProfessor.setCelular(celular);
                novoProfessor.setEspecialidade(especialidadeSelecionada);
                professorViewModel.insert(novoProfessor, () -> {
                    runOnUiThread(() -> {
                        showToast("Cadastro realizado com sucesso!");
                        irParaLogin();
                    });
                });
            }
        }
    }
    private boolean isInputValid(String nome, String email, String senha, String confirmarSenha, String cpf, String celular) {
        if (nome.isEmpty()) {
            showToast("Por favor, preencha o nome.");
            return false;
        }
        if (email.isEmpty() || !Patterns.EMAIL_ADDRESS.matcher(email).matches()) {
            showToast("Por favor, insira um e-mail válido.");
            return false;
        }
        if (senha.isEmpty()) {
            showToast("Por favor, preencha a senha.");
            return false;
        }
        if (confirmarSenha.isEmpty()) {
            showToast("Por favor, confirme a senha.");
            return false;
        }
        if (!senha.equals(confirmarSenha)) {
            showToast("As senhas não coincidem.");
            return false;
        }
        if (cpf.isEmpty()) {
            showToast("Por favor, preencha o cpf.");
            return false;
        }
        if (celular.isEmpty()) {
            showToast("Por favor, preencha o celular.");
            return false;
        }
        if (cpf.isEmpty() || cpf.length() != 11 || !cpf.matches("\\d{11}")) {
            showToast("Por favor, insira um CPF válido (11 dígitos numéricos).");
            return false;
        }
        if (celular.isEmpty() || celular.length() != 11 || !celular.matches("\\d{11}")) {
            showToast("Por favor, insira um número de celular válido (com DDD, 11 dígitos).");
            return false;
        }
        return true;
    }
    private void showToast(String message) {
        Toast.makeText(this, message, Toast.LENGTH_SHORT).show();
    }
    private void irParaLogin() {
        Intent intent = new Intent(this, LoginActivity.class);
        startActivity(intent);
        finish();
    }
    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        if (item.getItemId() == android.R.id.home) {
            getOnBackPressedDispatcher().onBackPressed();
            return true;
        }
        return super.onOptionsItemSelected(item);
    }
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/ui/GerarMassaActivity.java ---
package br.com.domenic.edtech.app.ui;
public class GerarMassaActivity extends AppCompatActivity {
    private AlunoCursoViewModel alunoCursoViewModel;
    private AlunoViewModel alunoViewModel;
    private AulaCursoInscritoViewModel aulaCursoInscritoViewModel;
    private AulaCursoViewModel aulaCursoViewModel;
    private CursoAvaliacaoViewModel cursoAvaliacaoViewModel;
    private CursoViewModel cursoViewModel;
    private ProfessorAvaliacaoViewModel professorAvaliacaoViewModel;
    private ProfessorViewModel professorViewModel;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_gerar_massa);
        initViewModels();
        configurarBotoes();
    }
    private void initViewModels() {
        professorViewModel = new ViewModelProvider(this).get(ProfessorViewModel.class);
        cursoViewModel = new ViewModelProvider(this).get(CursoViewModel.class);
        aulaCursoViewModel = new ViewModelProvider(this).get(AulaCursoViewModel.class);
        alunoViewModel = new ViewModelProvider(this).get(AlunoViewModel.class);
        alunoCursoViewModel = new ViewModelProvider(this).get(AlunoCursoViewModel.class);
        aulaCursoInscritoViewModel = new ViewModelProvider(this).get(AulaCursoInscritoViewModel.class);
        cursoAvaliacaoViewModel = new ViewModelProvider(this).get(CursoAvaliacaoViewModel.class);
        professorAvaliacaoViewModel = new ViewModelProvider(this).get(ProfessorAvaliacaoViewModel.class);
    }
    private void configurarBotoes() {
        MaterialButton btnGerarMassa = findViewById(R.id.btnGerarMassa);
        MaterialButton btnDeletarMassa = findViewById(R.id.btnDeletarMassa);
        MaterialButton btnCancelar = findViewById(R.id.btnCancelar);
        btnGerarMassa.setOnClickListener(v -> initGeradorMassa(true));
        btnDeletarMassa.setOnClickListener(v -> deletarTodosOsDados());
        btnCancelar.setOnClickListener(v -> startLogin());
    }
    private void initGeradorMassa(boolean ativarGerarMassa) {
        if (!ativarGerarMassa) {
            startLogin();
        } else {
            GerarMassa gerarMassa = new GerarMassa(
                    professorViewModel,
                    cursoViewModel,
                    aulaCursoViewModel,
                    alunoViewModel,
                    alunoCursoViewModel,
                    this
            );
            Toast.makeText(this, "Gerando massa de dados...", Toast.LENGTH_SHORT).show();
            new Thread(() -> {
                gerarMassa.gerarProfessorComCursoEAula(5, 3, 2);
                gerarMassa.gerarAlunoComCurso(5, 4);
                runOnUiThread(() -> {
                    Toast.makeText(this, "Geração de massa de dados finalizada!", Toast.LENGTH_SHORT).show();
                    startLogin();
                });
            }).start();
        }
    }
    private void deletarTodosOsDados() {
        new Thread(() -> {
            professorViewModel.deleteAll();
            cursoViewModel.deleteAll();
            alunoViewModel.deleteAll();
            alunoCursoViewModel.deleteAll();
            aulaCursoInscritoViewModel.deleteAll();
            aulaCursoViewModel.deleteAll();
            cursoAvaliacaoViewModel.deleteAll();
            professorAvaliacaoViewModel.deleteAll();
            runOnUiThread(() -> Toast.makeText(this, "Todos os dados foram excluídos!", Toast.LENGTH_SHORT).show());
        }).start();
    }
    private void startLogin() {
        Intent intent = new Intent(GerarMassaActivity.this, LoginActivity.class);
        startActivity(intent);
        finish();
    }
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/ui/LoginActivity.java ---
package br.com.domenic.edtech.app.ui;
public class LoginActivity extends AppCompatActivity {
    private TextInputLayout emailInput, senhaInput;
    private MaterialButton loginButton;
    private TextView cadastroButton, tvTitulo;
    private AlunoViewModel alunoViewModel;
    private ProfessorViewModel professorViewModel;
    private SessionManager sessionManager;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_login);
        initViews();
        setupViewModels();
        setupListeners();
    }
    private void initViews() {
        emailInput = findViewById(R.id.tiEmail);
        senhaInput = findViewById(R.id.tiSenha);
        loginButton = findViewById(R.id.btnLogin);
        cadastroButton = findViewById(R.id.tvSubtitleNaoPossuiCadastro);
        tvTitulo = findViewById(R.id.tvTitulo);
    }
    private void setupViewModels() {
        alunoViewModel = new ViewModelProvider(this, new BaseFactory<>(getApplication(), AlunoViewModel.class)).get(AlunoViewModel.class);
        professorViewModel = new ViewModelProvider(this, new BaseFactory<>(getApplication(), ProfessorViewModel.class)).get(ProfessorViewModel.class);
        sessionManager = new SessionManager(this);
    }
    private void setupListeners() {
        loginButton.setOnClickListener(v -> validarCredenciais());
        cadastroButton.setOnClickListener(v -> irParaCadastro());
        tvTitulo.setOnClickListener(v -> startGeraMassa());
    }
    private void startGeraMassa() {
        Intent intent = new Intent(LoginActivity.this, GerarMassaActivity.class);
        startActivity(intent);
        finish();
    }
    private void validarCredenciais() {
        String email = emailInput.getEditText().getText().toString();
        String senha = senhaInput.getEditText().getText().toString();
        if (isInputValid(email, senha)) {
            alunoViewModel.findByEmailAndSenha(email, senha).observe(this, aluno -> {
                if (aluno != null) {
                    sessionManager.saveAlunoSession(aluno);
                    showToast("Bem-vindo, " + aluno.getNomeCompleto());
                    irParaMainActivityAluno();
                } else {
                    professorViewModel.findByEmailAndSenha(email, senha).observe(this, professor -> {
                        if (professor != null) {
                            sessionManager.saveProfessorSession(professor);
                            showToast("Bem-vindo, " + professor.getNomeCompleto());
                            irParaMainActivityProfessor();
                        } else {
                            showToast("Credenciais inválidas");
                        }
                    });
                }
            });
        }
    }
    private boolean isInputValid(String email, String senha) {
        if (email.isEmpty() || senha.isEmpty()) {
            showToast("Por favor, preencha todos os campos");
            return false;
        }
        return true;
    }
    private void showToast(String message) {
        Toast.makeText(this, message, Toast.LENGTH_SHORT).show();
    }
    private void irParaMainActivityAluno() {
        Intent intent = new Intent(this, MainActivityAluno.class);
        startActivity(intent);
        finish();
    }
    private void irParaMainActivityProfessor() {
        Intent intent = new Intent(this, MainActivityProfessor.class);
        startActivity(intent);
        finish();
    }
    private void irParaCadastro() {
        Intent intent = new Intent(this, CadastroActivity.class);
        startActivity(intent);
    }
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/ui/MainActivity.java ---
package br.com.domenic.edtech.app.ui;
public class MainActivity extends AppCompatActivity {
    private SessionManager sessionManager;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        sessionManager = new SessionManager(this);
        String userType = sessionManager.getUserType();
        if (userType == null) {
            redirectToLogin();
        } else if ("aluno".equals(userType)) {
            redirectToMainActivityAluno();
        } else if ("professor".equals(userType)) {
            redirectToMainActivityProfessor();
        }
    }
    private void redirectToLogin() {
        Intent intent = new Intent(this, LoginActivity.class);
        startActivity(intent);
        finish();
    }
    private void redirectToMainActivityAluno() {
        Intent intent = new Intent(this, MainActivityAluno.class);
        startActivity(intent);
        finish();
    }
    private void redirectToMainActivityProfessor() {
        Intent intent = new Intent(this, MainActivityProfessor.class);
        startActivity(intent);
        finish();
    }
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/ui/MainActivityAluno.java ---
package br.com.domenic.edtech.app.ui;
public class MainActivityAluno extends AppCompatActivity {
    private BottomNavigationView bottomNavigationView;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main_aluno);
        bottomNavigationView = findViewById(R.id.bottomNavigationAluno);
        bottomNavigationView.setOnItemSelectedListener(item -> {
            Fragment selectedFragment = null;
            int itemId = item.getItemId();
            if (itemId == R.id.nav_home) {
                selectedFragment = new HomeAlunoFragment();
            } else if (itemId == R.id.nav_meus_cursos) {
                selectedFragment = new MeusCursosAlunoFragment();
            } else if (itemId == R.id.nav_minhas_aulas) {
                selectedFragment = new MinhasAulasAlunoFragment();
            } else if (itemId == R.id.nav_meu_perfil) {
                selectedFragment = new MeuPerfilFragment();
            }
            if (selectedFragment != null) {
                loadFragment(selectedFragment);
            }
            return true;
        });
        if (savedInstanceState == null) {
            bottomNavigationView.setSelectedItemId(R.id.nav_home);
        }
    }
    private void loadFragment(Fragment fragment) {
        FragmentManager fragmentManager = getSupportFragmentManager();
        fragmentManager.beginTransaction()
                .replace(R.id.flMainContentAluno, fragment)
                .commit();
    }
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/ui/MainActivityProfessor.java ---
package br.com.domenic.edtech.app.ui;
public class MainActivityProfessor extends AppCompatActivity {
    private BottomNavigationView bottomNavigationView;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main_professor);
        bottomNavigationView = findViewById(R.id.bottomNavigationProfessor);
        bottomNavigationView.setOnItemSelectedListener(item -> {
            Fragment selectedFragment = null;
            int itemId = item.getItemId();
            if (itemId == R.id.nav_home) {
                selectedFragment = new HomeProfessorFragment();
            } else if (itemId == R.id.nav_meus_cursos) {
                selectedFragment = new MeusCursosProfessorFragment();
            } else if (itemId == R.id.nav_minhas_aulas) {
                selectedFragment = new MinhasAulasProfessorFragment();
            } else if (itemId == R.id.nav_meu_perfil) {
                selectedFragment = new MeuPerfilFragment();
            }
            if (selectedFragment != null) {
                loadFragment(selectedFragment);
            }
            return true;
        });
        if (savedInstanceState == null) {
            bottomNavigationView.setSelectedItemId(R.id.nav_home);
        }
    }
    private void loadFragment(Fragment fragment) {
        FragmentManager fragmentManager = getSupportFragmentManager();
        fragmentManager.beginTransaction()
                .replace(R.id.flMainContentProfessor, fragment)
                .commit();
    }
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/ui/adapters/AlunoAdapter.java ---
package br.com.domenic.edtech.app.ui.adapters;
public class AlunoAdapter extends BaseAdapter<Aluno, AlunoAdapter.AlunoViewHolder> {
    public AlunoAdapter(Context context, List<Aluno> alunos, OnItemClickListener<Aluno> itemClickListener) {
        super(context, alunos, itemClickListener);
    }
    @Override
    protected int getItemLayoutId() {
        return R.layout.card_aluno; // Certifique-se de que card_aluno.xml está no diretório correto
    }
    @Override
    protected AlunoViewHolder createViewHolder(View view) {
        return new AlunoViewHolder(view);
    }
    @Override
    protected void bindViewHolder(AlunoViewHolder holder, Aluno aluno) {
        holder.nomeAluno.setText(aluno.getNomeCompleto());
        holder.emailAluno.setText(aluno.getEmail());
    }
    @Override
    protected boolean areItemsEqual(Aluno oldItem, Aluno newItem) {
        return oldItem.getIdAluno() == newItem.getIdAluno();
    }
    @Override
    protected boolean areContentsEqual(Aluno oldItem, Aluno newItem) {
        return oldItem.equals(newItem); // Certifique-se de que a classe Aluno possui um método equals adequado
    }
    public static class AlunoViewHolder extends RecyclerView.ViewHolder {
        TextView nomeAluno, emailAluno;
        ImageView fotoAluno;
        public AlunoViewHolder(@NonNull View itemView) {
            super(itemView);
            nomeAluno = itemView.findViewById(R.id.tvNomeAluno);
            emailAluno = itemView.findViewById(R.id.tvEmailAluno);
            fotoAluno = itemView.findViewById(R.id.ivAlunoFoto); // Certifique-se de que o ID está correto no layout card_aluno.xml
        }
    }
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/ui/adapters/AulasAdapter.java ---
package br.com.domenic.edtech.app.ui.adapters;
public class AulasAdapter extends BaseAdapter<AulaCurso, AulasAdapter.AulaCursoViewHolder> {
    private static final SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
    public AulasAdapter(Context context, List<AulaCurso> aulas, OnItemClickListener<AulaCurso> itemClickListener) {
        super(context, aulas, itemClickListener);
    }
    @NonNull
    @Override
    public AulaCursoViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        View view = inflater.inflate(R.layout.card_aula, parent, false);
        return new AulaCursoViewHolder(view);
    }
    @Override
    public void onBindViewHolder(@NonNull AulaCursoViewHolder holder, int position) {
        AulaCurso aulaCurso = items.get(position);
        holder.bind(aulaCurso);
    }
    @Override
    protected int getItemLayoutId() {
        return R.layout.card_aula; // O layout que será inflado para cada item
    }
    @Override
    protected AulaCursoViewHolder createViewHolder(View view) {
        return new AulaCursoViewHolder(view);
    }
    @Override
    protected void bindViewHolder(AulaCursoViewHolder holder, AulaCurso item) {
        holder.bind(item);
    }
    @Override
    protected boolean areItemsEqual(AulaCurso oldItem, AulaCurso newItem) {
        return oldItem.getIdAulaCurso() == newItem.getIdAulaCurso();
    }
    @Override
    protected boolean areContentsEqual(AulaCurso oldItem, AulaCurso newItem) {
        return oldItem.equals(newItem);
    }
    public void updateAulas(List<AulaCurso> aulas) {
        this.items.clear();
        this.items.addAll(aulas);
        notifyDataSetChanged();
    }
    public static class AulaCursoViewHolder extends RecyclerView.ViewHolder {
        TextView tvNomeAula, tvDataAula, tvModalidadeAula;
        public AulaCursoViewHolder(@NonNull View itemView) {
            super(itemView);
            tvNomeAula = itemView.findViewById(R.id.tvNomeAula);
            tvDataAula = itemView.findViewById(R.id.tvDataAula);
            tvModalidadeAula = itemView.findViewById(R.id.tvModalidadeAula);
        }
        public void bind(AulaCurso aulaCurso) {
            tvNomeAula.setText(aulaCurso.getTitulo());
            tvDataAula.setText(dateFormat.format(aulaCurso.getDataAula()));
            tvModalidadeAula.setText(aulaCurso.isAulaOnline() ? "Online" : "Presencial");
        }
    }
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/ui/adapters/AvaliacaoAdapter.java ---
package br.com.domenic.edtech.app.ui.adapters;
public class AvaliacaoAdapter extends BaseAdapter<ProfessorAvaliacao, AvaliacaoAdapter.AvaliacaoViewHolder> {
    public AvaliacaoAdapter(Context context, List<ProfessorAvaliacao> avaliacaoList, OnItemClickListener<ProfessorAvaliacao> itemClickListener) {
        super(context, avaliacaoList, itemClickListener);
    }
    @Override
    protected int getItemLayoutId() {
        return R.layout.card_avaliacao_professor;
    }
    @Override
    protected AvaliacaoViewHolder createViewHolder(View view) {
        return new AvaliacaoViewHolder(view);
    }
    @Override
    protected void bindViewHolder(AvaliacaoViewHolder holder, ProfessorAvaliacao avaliacao) {
        holder.ratingBar.setRating(avaliacao.getNota());
        holder.comentarioTextView.setText(avaliacao.getComentario());
    }
    @Override
    protected boolean areItemsEqual(ProfessorAvaliacao oldItem, ProfessorAvaliacao newItem) {
        return oldItem.getIdAluno() == newItem.getIdAluno() &&
                oldItem.getIdProfessor() == newItem.getIdProfessor();
    }
    @Override
    protected boolean areContentsEqual(ProfessorAvaliacao oldItem, ProfessorAvaliacao newItem) {
        return oldItem.equals(newItem); // Isso vai comparar todos os campos.
    }
    public static class AvaliacaoViewHolder extends RecyclerView.ViewHolder {
        RatingBar ratingBar;
        TextView comentarioTextView;
        public AvaliacaoViewHolder(@NonNull View itemView) {
            super(itemView);
            ratingBar = itemView.findViewById(R.id.ratingBarAvaliacao);
            comentarioTextView = itemView.findViewById(R.id.textComentario);
        }
    }
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/ui/adapters/CursoAdapter.java ---
package br.com.domenic.edtech.app.ui.adapters;
public class CursoAdapter extends BaseAdapter<Curso, CursoAdapter.CursoViewHolder> {
    private List<CursoAvaliacao> avaliacaoList;
    public CursoAdapter(Context context, List<Curso> cursoList, OnItemClickListener<Curso> itemClickListener) {
        super(context, cursoList, itemClickListener);
    }
    public CursoAdapter(Context context, List<Curso> cursoList, List<CursoAvaliacao> avaliacaoList, OnItemClickListener<Curso> itemClickListener) {
        super(context, cursoList, itemClickListener);
        this.avaliacaoList = avaliacaoList;
    }
    @Override
    protected int getItemLayoutId() {
        return R.layout.card_curso_com_nota;
    }
    @Override
    protected CursoViewHolder createViewHolder(View view) {
        return new CursoViewHolder(view);
    }
    @Override
    protected void bindViewHolder(CursoViewHolder holder, Curso curso) {
        holder.tvNomeCurso.setText(curso.getNomeCurso());
        holder.tvDescricaoCurso.setText(curso.getDescricao());
        holder.tvCursoPreco.setText(new StringUtils().doubleParaBRL(curso.getPrecoCurso()));
        holder.tvCursoPrecoAulaParticular.setText(new StringUtils().doubleParaBRL(curso.getPrecoCursoAulaParticular()));
        holder.ratingBar.setRating(calculateCursoRating(curso.getIdCurso()));
    }
    private float calculateCursoRating(int cursoId) {
        float result = 0.0f;
        if (avaliacaoList != null) {
            List<CursoAvaliacao> avaliacoesDoCurso = avaliacaoList.stream()
                    .filter(avaliacao -> avaliacao.getIdCurso() == cursoId)
                    .collect(Collectors.toList());
            if (avaliacoesDoCurso.isEmpty()) {
                return result;
            }
            int totalNotas = avaliacoesDoCurso.stream()
                    .mapToInt(CursoAvaliacao::getNota)
                    .sum();
            result = totalNotas / (float) avaliacoesDoCurso.size();
        }
        return result;
    }
    @Override
    protected boolean areItemsEqual(Curso oldItem, Curso newItem) {
        return oldItem.getIdCurso() == newItem.getIdCurso();
    }
    @Override
    protected boolean areContentsEqual(Curso oldItem, Curso newItem) {
        return oldItem.equals(newItem);
    }
    public static class CursoViewHolder extends RecyclerView.ViewHolder {
        TextView tvNomeCurso, tvDescricaoCurso, tvCursoPreco, tvCursoPrecoAulaParticular;
        RatingBar ratingBar;
        public CursoViewHolder(@NonNull View itemView) {
            super(itemView);
            tvNomeCurso = itemView.findViewById(R.id.tvCursoNome);
            tvDescricaoCurso = itemView.findViewById(R.id.tvCursoDescricao);
            tvCursoPreco = itemView.findViewById(R.id.tvCursoPreco);
            tvCursoPrecoAulaParticular = itemView.findViewById(R.id.tvCursoPrecoAulaParticular);
            ratingBar = itemView.findViewById(R.id.ratingCurso);
        }
    }
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/ui/adapters/ProfessorAdapter.java ---
package br.com.domenic.edtech.app.ui.adapters;
public class ProfessorAdapter extends BaseAdapter<Professor, ProfessorAdapter.ProfessorViewHolder> {
    public ProfessorAdapter(Context context, List<Professor> professorList, OnItemClickListener<Professor> itemClickListener) {
        super(context, professorList, itemClickListener);
    }
    @Override
    protected int getItemLayoutId() {
        return R.layout.card_professor_com_nota;
    }
    @Override
    protected ProfessorViewHolder createViewHolder(View view) {
        return new ProfessorViewHolder(view);
    }
    @Override
    protected void bindViewHolder(ProfessorViewHolder holder, Professor professor) {
        holder.tvNomeProfessor.setText(professor.getNomeCompleto());
        holder.tvEspecialidade.setText(professor.getEspecialidade());
        holder.tvEmail.setText(professor.getEmail());
        holder.ratingBar.setRating(calculateProfessorRating(professor.getIdProfessor()));
    }
    @Override
    protected boolean areItemsEqual(Professor oldItem, Professor newItem) {
        return oldItem.getIdProfessor() == newItem.getIdProfessor();
    }
    @Override
    protected boolean areContentsEqual(Professor oldItem, Professor newItem) {
        return oldItem.equals(newItem);
    }
    private float calculateProfessorRating(int professorId) {
        return 4.5f; // Exemplo de nota fixa
    }
    public static class ProfessorViewHolder extends RecyclerView.ViewHolder {
        TextView tvNomeProfessor, tvEspecialidade, tvEmail;
        RatingBar ratingBar;
        public ProfessorViewHolder(@NonNull View itemView) {
            super(itemView);
            tvNomeProfessor = itemView.findViewById(R.id.tvProfessorNome);
            tvEspecialidade = itemView.findViewById(R.id.tvProfessorEspecialidade);
            tvEmail = itemView.findViewById(R.id.tvProfessorEmail);
            ratingBar = itemView.findViewById(R.id.ratingProfessor);
        }
    }
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/ui/adapters/ProfessorAdapterHomeAluno.java ---
package br.com.domenic.edtech.app.ui.adapters;
public class ProfessorAdapterHomeAluno extends BaseAdapter<Professor, ProfessorAdapterHomeAluno.ProfessorViewHolder> {
    public ProfessorAdapterHomeAluno(Context context, List<Professor> professorList, OnItemClickListener<Professor> itemClickListener) {
        super(context, professorList, itemClickListener);
    }
    @Override
    protected int getItemLayoutId() {
        return R.layout.card_professor_com_nota_aluno;
    }
    @Override
    protected ProfessorViewHolder createViewHolder(View view) {
        return new ProfessorViewHolder(view);
    }
    @Override
    protected void bindViewHolder(ProfessorViewHolder holder, Professor professor) {
        holder.tvNomeProfessor.setText(professor.getNomeCompleto());
        holder.tvEspecialidade.setText(professor.getEspecialidade());
        holder.ratingBar.setRating(calculateProfessorRating(professor.getIdProfessor()));
    }
    @Override
    protected boolean areItemsEqual(Professor oldItem, Professor newItem) {
        return oldItem.getIdProfessor() == newItem.getIdProfessor();
    }
    @Override
    protected boolean areContentsEqual(Professor oldItem, Professor newItem) {
        return oldItem.equals(newItem);
    }
    private float calculateProfessorRating(int professorId) {
        return 4.5f; // Exemplo de nota fixa
    }
    public static class ProfessorViewHolder extends RecyclerView.ViewHolder {
        TextView tvNomeProfessor, tvEspecialidade, tvEmail;
        RatingBar ratingBar;
        public ProfessorViewHolder(@NonNull View itemView) {
            super(itemView);
            tvNomeProfessor = itemView.findViewById(R.id.tvProfessorNome);
            tvEspecialidade = itemView.findViewById(R.id.tvProfessorEspecialidade);
            ratingBar = itemView.findViewById(R.id.ratingProfessor);
        }
    }
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/ui/adapters/base/BaseAdapter.java ---
package br.com.domenic.edtech.app.ui.adapters.base;
public abstract class BaseAdapter<T, VH extends RecyclerView.ViewHolder> extends RecyclerView.Adapter<VH> {
    protected final List<T> items;
    protected final LayoutInflater inflater;
    private final OnItemClickListener<T> itemClickListener;
    public BaseAdapter(Context context, List<T> items, OnItemClickListener<T> itemClickListener) {
        this.items = items;
        this.inflater = LayoutInflater.from(context);
        this.itemClickListener = itemClickListener;
    }
    @NonNull
    @Override
    public VH onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        View view = inflater.inflate(getItemLayoutId(), parent, false);
        return createViewHolder(view);
    }
    @Override
    public void onBindViewHolder(@NonNull VH holder, int position) {
        T item = items.get(position);
        bindViewHolder(holder, item);
        holder.itemView.setOnClickListener(v -> {
            if (itemClickListener != null) {
                itemClickListener.onItemClick(item);
            }
        });
    }
    @Override
    public int getItemCount() {
        return items.size();
    }
    protected abstract @LayoutRes int getItemLayoutId();
    protected abstract VH createViewHolder(View view);
    protected abstract void bindViewHolder(VH holder, T item);
    public void updateItems(final List<T> newItems) {
        DiffUtil.DiffResult diffResult = DiffUtil.calculateDiff(new DiffUtil.Callback() {
            @Override
            public int getOldListSize() {
                return items.size();
            }
            @Override
            public int getNewListSize() {
                return newItems.size();
            }
            @Override
            public boolean areItemsTheSame(int oldItemPosition, int newItemPosition) {
                return areItemsEqual(items.get(oldItemPosition), newItems.get(newItemPosition));
            }
            @Override
            public boolean areContentsTheSame(int oldItemPosition, int newItemPosition) {
                return areContentsEqual(items.get(oldItemPosition), newItems.get(newItemPosition));
            }
        });
        items.clear();
        items.addAll(newItems);
        diffResult.dispatchUpdatesTo(this);
    }
    protected abstract boolean areItemsEqual(T oldItem, T newItem);
    protected abstract boolean areContentsEqual(T oldItem, T newItem);
    public interface OnItemClickListener<T> {
        void onItemClick(T item);
    }
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/ui/calendars/CustomCalendarDecorator.java ---
package br.com.domenic.edtech.app.ui.calendars;
public class CustomCalendarDecorator implements DayViewDecorator {
    private final Set<CalendarDay> dates;
    private final ColorDrawable colorDrawable;
    public CustomCalendarDecorator(Context context, Set<CalendarDay> dates, int colorResId) {
        this.dates = dates;
        this.colorDrawable = new ColorDrawable(ContextCompat.getColor(context, colorResId));
    }
    @Override
    public boolean shouldDecorate(CalendarDay day) {
        return dates.contains(day);
    }
    @Override
    public void decorate(DayViewFacade view) {
        view.setBackgroundDrawable(colorDrawable);
    }
}


--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/ui/calendars/DisabledDaysDecorator.java ---
package br.com.domenic.edtech.app.ui.calendars;
public class DisabledDaysDecorator implements DayViewDecorator {
    private final Set<CalendarDay> disabledDays;
    public DisabledDaysDecorator(Set<CalendarDay> disabledDays) {
        this.disabledDays = disabledDays;
    }
    @Override
    public boolean shouldDecorate(CalendarDay day) {
        return disabledDays.contains(day);
    }
    @Override
    public void decorate(DayViewFacade view) {
        view.setDaysDisabled(true);
        view.addSpan(new ForegroundColorSpan(Color.GRAY));
    }
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/ui/fragments/MeuPerfilFragment.java ---
package br.com.domenic.edtech.app.ui.fragments;
public class MeuPerfilFragment extends Fragment {
    private AlunoViewModel alunoViewModel;
    private ProfessorViewModel professorViewModel;
    private TextView tvNomeUsuario;
    private TextView tvEmailUsuario;
    private MaterialButton btnLogout; // Referência para o botão de logout
    private SessionManager sessionManager;
    private String userType; // Tipo de usuário: aluno ou professor
    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        return inflater.inflate(R.layout.fragment_meu_perfil, container, false);
    }
    @Override
    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        tvNomeUsuario = view.findViewById(R.id.tvNomeUsuario);
        tvEmailUsuario = view.findViewById(R.id.tvEmailUsuario);
        btnLogout = view.findViewById(R.id.btnLogout); // Inicializando o botão de logout
        sessionManager = new SessionManager(requireContext());
        userType = sessionManager.getUserType(); // Recupera o tipo de usuário da sessão
        int userId = sessionManager.getUserId();
        alunoViewModel = new ViewModelProvider(this).get(AlunoViewModel.class);
        professorViewModel = new ViewModelProvider(this).get(ProfessorViewModel.class);
        if ("aluno".equals(userType)) {
            alunoViewModel.findById(userId).observe(getViewLifecycleOwner(), new Observer<Aluno>() {
                @Override
                public void onChanged(@Nullable Aluno aluno) {
                    if (aluno != null) {
                        tvNomeUsuario.setText(aluno.getNomeCompleto());
                        tvEmailUsuario.setText(aluno.getEmail());
                    }
                }
            });
        } else if ("professor".equals(userType)) {
            professorViewModel.findById(userId).observe(getViewLifecycleOwner(), new Observer<Professor>() {
                @Override
                public void onChanged(@Nullable Professor professor) {
                    if (professor != null) {
                        tvNomeUsuario.setText(professor.getNomeCompleto());
                        tvEmailUsuario.setText(professor.getEmail());
                    }
                }
            });
        }
        btnLogout.setOnClickListener(v -> {
            sessionManager.clearSession(); // Limpar a sessão
            Intent intent = new Intent(requireContext(), LoginActivity.class);
            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK); // Limpa a pilha de atividades
            startActivity(intent);
        });
    }
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/ui/fragments/aluno/HomeAlunoFragment.java ---
package br.com.domenic.edtech.app.ui.fragments.aluno;
public class HomeAlunoFragment extends Fragment {
    private ProfessorViewModel professorViewModel;
    private CursoViewModel cursoViewModel;
    private AlunoCursoViewModel alunoCursoViewModel;
    private ProfessorAvaliacaoViewModel professorAvaliacaoViewModel;
    private RecyclerView recyclerViewProfessores, recyclerViewCursosNovidades, recyclerViewCursosDestaques, recyclerViewCursosParaVoce;
    private SessionManager sessionManager;
    private int alunoId;
    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        View view = inflater.inflate(R.layout.fragment_home_aluno, container, false);
        recyclerViewProfessores = view.findViewById(R.id.recyclerViewCardsProfessores);
        recyclerViewCursosNovidades = view.findViewById(R.id.recyclerViewCardsCursosNovidades);
        recyclerViewCursosDestaques = view.findViewById(R.id.recyclerViewCardsCursosDestaques);
        recyclerViewCursosParaVoce = view.findViewById(R.id.recyclerViewCardsCursosParaVoce);
        recyclerViewProfessores.setLayoutManager(new LinearLayoutManager(getContext(), LinearLayoutManager.HORIZONTAL, false));
        recyclerViewCursosNovidades.setLayoutManager(new LinearLayoutManager(getContext(), LinearLayoutManager.HORIZONTAL, false));
        recyclerViewCursosDestaques.setLayoutManager(new LinearLayoutManager(getContext(), LinearLayoutManager.HORIZONTAL, false));
        recyclerViewCursosParaVoce.setLayoutManager(new LinearLayoutManager(getContext(), LinearLayoutManager.HORIZONTAL, false));
        professorViewModel = new ViewModelProvider(requireActivity()).get(ProfessorViewModel.class);
        cursoViewModel = new ViewModelProvider(requireActivity()).get(CursoViewModel.class);
        alunoCursoViewModel = new ViewModelProvider(requireActivity()).get(AlunoCursoViewModel.class);
        professorAvaliacaoViewModel = new ViewModelProvider(requireActivity()).get(ProfessorAvaliacaoViewModel.class);
        sessionManager = new SessionManager(requireContext());
        alunoId = sessionManager.getUserId();
        professorViewModel.getAll().observe(getViewLifecycleOwner(), professores -> {
            ProfessorAdapterHomeAluno professorAdapterHomeAluno = new ProfessorAdapterHomeAluno(getContext(), professores, professor -> {
                openAvaliarProfessorDialog(professor.getNomeCompleto(), professor.getIdProfessor());
            });
            recyclerViewProfessores.setAdapter(professorAdapterHomeAluno);
        });
        alunoCursoViewModel.getCursosByAluno(alunoId).observe(getViewLifecycleOwner(), cursosAderidos -> {
            cursoViewModel.getAll().observe(getViewLifecycleOwner(), todosOsCursos -> {
                List<Curso> cursosNaoAderidos = todosOsCursos.stream()
                        .filter(curso -> cursosAderidos.stream()
                                .noneMatch(cursoAderido -> cursoAderido.getIdCurso() == curso.getIdCurso()))
                        .collect(Collectors.toList());
                List<Curso> cursosNovidades = new ArrayList<>(cursosNaoAderidos);
                List<Curso> cursosDestaques = new ArrayList<>(cursosNaoAderidos);
                List<Curso> cursosParaVoce = new ArrayList<>(cursosNaoAderidos);
                cursosNovidades.sort((curso1, curso2) -> curso2.getDataCriacao().compareTo(curso1.getDataCriacao()));
                cursosDestaques.sort((curso1, curso2) -> Integer.compare(curso2.getPopularidade(), curso1.getPopularidade()));
                cursosParaVoce.sort((curso1, curso2) -> Double.compare(curso2.getRecomendacao(), curso1.getRecomendacao()));
                CursoAdapter novidadesAdapter = new CursoAdapter(getContext(), cursosNovidades, curso -> openAderirCursoDialog(curso));
                CursoAdapter destaquesAdapter = new CursoAdapter(getContext(), cursosDestaques, curso -> openAderirCursoDialog(curso));
                CursoAdapter paraVoceAdapter = new CursoAdapter(getContext(), cursosParaVoce, curso -> openAderirCursoDialog(curso));
                recyclerViewCursosNovidades.setAdapter(novidadesAdapter);
                recyclerViewCursosDestaques.setAdapter(destaquesAdapter);
                recyclerViewCursosParaVoce.setAdapter(paraVoceAdapter);
            });
        });
        return view;
    }
    private void openAvaliarProfessorDialog(String professorNome, int idProfessor) {
        AvaliarProfessorDialog avaliarProfessorDialog = new AvaliarProfessorDialog(getContext(), professorNome);
        avaliarProfessorDialog.show();
        avaliarProfessorDialog.setOnAvaliarListener(v -> {
            int nota = Integer.parseInt(Float.toString(avaliarProfessorDialog.getNota()));
            String comentario = avaliarProfessorDialog.getComentario();
            ProfessorAvaliacao professorAvaliacao = new ProfessorAvaliacao(
                    idProfessor,
                    alunoId,
                    nota,
                    comentario,
                    new Date()
            );
            professorAvaliacaoViewModel.insert(professorAvaliacao, () -> {
                requireActivity().runOnUiThread(() -> {
                    Toast.makeText(getContext(), "Avaliação enviada! Nota: " + nota + ", Comentário: " + comentario, Toast.LENGTH_SHORT).show();
                    avaliarProfessorDialog.dismiss();
                });
            });
        });
    }
    private void openAderirCursoDialog(Curso curso) {
        MatricularCursoDialog matricularCursoDialog = new MatricularCursoDialog(
                getContext(),
                curso.getNomeCurso(),
                curso.getDescricao(),
                curso.getPrecoCurso()
        );
        matricularCursoDialog.show();
        matricularCursoDialog.setOnAderirListener(v -> {
            Date dataMatricula = new Date();
            Calendar calendar = Calendar.getInstance();
            calendar.setTime(dataMatricula);
            calendar.add(Calendar.YEAR, 1);
            Date dataConclusao = calendar.getTime();
            int idAluno = alunoId;
            int idCurso = curso.getIdCurso();
            String status = "Iniciado";
            int qtdCursoAulaParticular = 0;
            Double notaFinal = 0.0;
            String comentarios = "";
            AlunoCurso alunoCurso = new AlunoCurso(idAluno, idCurso, dataMatricula, dataConclusao, status, qtdCursoAulaParticular, notaFinal, comentarios);
            alunoCursoViewModel.insert(alunoCurso, () -> {
                requireActivity().runOnUiThread(() -> {
                    Toast.makeText(getContext(), "Você aderiu ao curso: " + curso.getNomeCurso(), Toast.LENGTH_SHORT).show();
                    matricularCursoDialog.dismiss();
                });
            });
        });
    }
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/ui/fragments/aluno/MeusCursosAlunoFragment.java ---
package br.com.domenic.edtech.app.ui.fragments.aluno;
public class MeusCursosAlunoFragment extends Fragment {
    private AlunoCursoViewModel alunoCursoViewModel;
    private AulaCursoViewModel aulaCursoViewModel;
    private AulaCursoInscritoViewModel aulaCursoInscritoViewModel;
    private CursoViewModel cursoViewModel;
    private RecyclerView recyclerViewMeusCursos;
    private SessionManager sessionManager;
    private int idAluno;
    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        View view = inflater.inflate(R.layout.fragment_meus_cursos_aluno, container, false);
        initializeUI(view);
        initializeViewModels();
        initSessionManager();
        observeAlunoCursos();
        setupDeleteAllCursosListener(view);
        return view;
    }
    private void initSessionManager() {
        idAluno = sessionManager.getUserId();
    }
    private void initializeUI(View view) {
        recyclerViewMeusCursos = view.findViewById(R.id.recyclerViewMeusCursos);
        recyclerViewMeusCursos.setLayoutManager(new LinearLayoutManager(getContext()));
        sessionManager = new SessionManager(requireContext());
    }
    private void initializeViewModels() {
        alunoCursoViewModel = new ViewModelProvider(requireActivity()).get(AlunoCursoViewModel.class);
        cursoViewModel = new ViewModelProvider(requireActivity()).get(CursoViewModel.class);
        aulaCursoInscritoViewModel = new ViewModelProvider(requireActivity()).get(AulaCursoInscritoViewModel.class);
        aulaCursoViewModel = new ViewModelProvider(requireActivity()).get(AulaCursoViewModel.class);
    }
    private void observeAlunoCursos() {
        alunoCursoViewModel.getOnlyCursosByAluno(idAluno).observe(getViewLifecycleOwner(), cursos -> {
            CursoAdapter cursoAdapter = new CursoAdapter(getContext(), cursos, this::showCursoOptionsModal);
            recyclerViewMeusCursos.setAdapter(cursoAdapter);
        });
    }
    private void setupDeleteAllCursosListener(View view) {
        TextView tvMeusCursos = view.findViewById(R.id.tvMeusCursos);
        tvMeusCursos.setOnClickListener(v -> confirmDeleteAllCursos());
    }
    private void confirmDeleteAllCursos() {
        new MaterialAlertDialogBuilder(requireContext())
                .setTitle("Confirmação")
                .setMessage("Você deseja apagar todos os seus cursos?")
                .setNegativeButton("Cancelar", (dialog, which) -> dialog.dismiss())
                .setPositiveButton("Apagar", (dialog, which) -> deleteAllCursos())
                .show();
    }
    private void deleteAllCursos() {
        alunoCursoViewModel.deleteAllCursosByAlunoId(idAluno, () -> {
            requireActivity().runOnUiThread(() -> {
                Toast.makeText(getContext(), "Todos os cursos foram apagados.", Toast.LENGTH_SHORT).show();
            });
        });
    }
    private void showCursoOptionsModal(Curso curso) {
        try {
            View view = LayoutInflater.from(getContext()).inflate(R.layout.modal_curso_opcoes, null);
            setupCursoOptionsDialog(view, curso);
        } catch (Exception e) {
            handleError("Erro ao abrir opções", e);
        }
    }
    private void setupCursoOptionsDialog(View view, Curso curso) {
        MaterialAlertDialogBuilder builder = new MaterialAlertDialogBuilder(getContext()).setView(view);
        final androidx.appcompat.app.AlertDialog dialog = builder.create();
        view.findViewById(R.id.btnAulaParticular).setOnClickListener(v -> {
            dialog.dismiss();
            openAulaParticularDialog(curso); // Passa o curso para abrir o agendamento
        });
        view.findViewById(R.id.btnAulaGrupo).setOnClickListener(v -> {
            dialog.dismiss();
            openAulaGrupoDialog(curso);
        });
        view.findViewById(R.id.btnAvaliar).setOnClickListener(v -> {
            dialog.dismiss();
            openAvaliarCursoDialog(curso);
        });
        dialog.show();
    }
    private void openAulaParticularDialog(Curso curso) {
        try {
            AgendarAulaParticularDialog agendarDialog = new AgendarAulaParticularDialog(
                    getContext(),
                    aulaCursoViewModel,
                    aulaCursoInscritoViewModel,
                    curso.getIdCurso(),
                    idAluno
            );
            agendarDialog.show();
        } catch (Exception e) {
            handleError("Erro ao abrir Agendar Aula Particular", e);
        }
    }
    private void openAulaGrupoDialog(Curso curso) {
        try {
            IncreverAulaEmGrupoDialog increverAulaEmGrupoDialog = new IncreverAulaEmGrupoDialog(getContext(), aulaCursoViewModel, aulaCursoInscritoViewModel, curso.getIdCurso(), idAluno);
            increverAulaEmGrupoDialog.show();
        } catch (Exception e) {
            handleError("Erro ao abrir Aula em Grupo", e);
        }
    }
    private void openAvaliarCursoDialog(Curso curso) {
        try {
            AvaliarCursoDialog avaliarCursoDialog = new AvaliarCursoDialog(getContext(), curso);
            avaliarCursoDialog.show();
            avaliarCursoDialog.setOnAvaliarListener(v -> saveCursoAvaliacao(avaliarCursoDialog, curso));
        } catch (Exception e) {
            handleError("Erro ao abrir Avaliação", e);
        }
    }
    private void saveCursoAvaliacao(AvaliarCursoDialog avaliarCursoDialog, Curso curso) {
        float nota = avaliarCursoDialog.getNota();
        String comentario = avaliarCursoDialog.getComentario();
        Toast.makeText(getContext(), "Avaliação salva! Nota: " + nota + " Comentário: " + comentario, Toast.LENGTH_SHORT).show();
        avaliarCursoDialog.dismiss();
    }
    private void handleError(String message, Exception e) {
        Toast.makeText(getContext(), message + ": " + e.getMessage(), Toast.LENGTH_SHORT).show();
    }
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/ui/fragments/aluno/MinhasAulasAlunoFragment.java ---
package br.com.domenic.edtech.app.ui.fragments.aluno;
public class MinhasAulasAlunoFragment extends Fragment {
    private AulaCursoViewModel aulaCursoViewModel;
    private AulasAdapter aulasAdapter;
    private MaterialCalendarView calendarView;
    private RecyclerView recyclerViewAulas;
    private int idAluno;
    private final Set<CalendarDay> datasPresenciais = new HashSet<>();
    private final Set<CalendarDay> datasOnline = new HashSet<>();
    private final Map<CalendarDay, AulaCurso> mapaAulas = new HashMap<>(); // Mapear as datas com as aulas
    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        View view = inflater.inflate(R.layout.fragment_minhas_aulas_aluno, container, false);
        initViews(view);
        initViewModel();
        idAluno = new SessionManager(requireContext()).getUserId();
        carregarAulas();
        configurarListenerCalendario();
        return view;
    }
    private void initViews(View view) {
        calendarView = view.findViewById(R.id.calendarViewAulas);
        recyclerViewAulas = view.findViewById(R.id.recyclerViewMinhasAulas);
        recyclerViewAulas.setLayoutManager(new LinearLayoutManager(getContext()));
        aulasAdapter = new AulasAdapter(getContext(), new ArrayList<>(), this::onItemClick);
        recyclerViewAulas.setAdapter(aulasAdapter);
    }
    private void initViewModel() {
        aulaCursoViewModel = new ViewModelProvider(requireActivity()).get(AulaCursoViewModel.class);
    }
    private void carregarAulas() {
        aulaCursoViewModel.findAulasByAlunoId(idAluno).observe(getViewLifecycleOwner(), aulas -> {
            aulas.sort((a1, a2) -> a1.getDataAula().compareTo(a2.getDataAula())); // Ordena por data
            atualizarCalendarioERecyclerView(aulas);
        });
    }
    private void configurarListenerCalendario() {
        calendarView.setOnDateChangedListener((widget, date, selected) -> {
            AulaCurso aulaSelecionada = mapaAulas.get(date);
            if (aulaSelecionada != null) {
                onItemClick(aulaSelecionada);
            } else {
                Toast.makeText(getContext(), "Nenhuma aula agendada para esta data", Toast.LENGTH_SHORT).show();
            }
        });
    }
    private void atualizarCalendarioERecyclerView(List<AulaCurso> aulas) {
        datasPresenciais.clear();
        datasOnline.clear();
        mapaAulas.clear(); // Limpar o mapa antes de recarregar as aulas
        for (AulaCurso aula : aulas) {
            CalendarDay dataAula = CalendarDay.from(aula.getDataAula());
            mapaAulas.put(dataAula, aula); // Mapeia a data para a aula correspondente
            if (aula.isAulaOnline()) {
                datasOnline.add(dataAula);
            } else {
                datasPresenciais.add(dataAula);
            }
        }
        atualizarDecoradoresCalendario();
        aulasAdapter.updateAulas(aulas);
    }
    private void atualizarDecoradoresCalendario() {
        calendarView.removeDecorators();  // Remover decoradores anteriores para evitar duplicação
        calendarView.addDecorator(new CustomCalendarDecorator(requireContext(), datasPresenciais, R.color.md_theme_primary));
        calendarView.addDecorator(new CustomCalendarDecorator(requireContext(), datasOnline, R.color.green));
    }
    private void onItemClick(AulaCurso aulaCurso) {
        View view = getLayoutInflater().inflate(R.layout.modal_aula_entrar, null);
        AlertDialog.Builder builder = new AlertDialog.Builder(requireContext());
        builder.setView(view);
        configurarModalAula(view, aulaCurso, builder);
        exibirModalAula(builder);
    }
    private void configurarModalAula(View view, AulaCurso aulaCurso, AlertDialog.Builder builder) {
        TextView tvAulaNome = view.findViewById(R.id.tvAulaCursoNome);
        TextView tvAulaDescricao = view.findViewById(R.id.tvAulaCursoDescricao);
        TextView tvAulaData = view.findViewById(R.id.tvAulaCursoData);
        TextView tvAulaModalidade = view.findViewById(R.id.tvTipoAulaCurso);
        MaterialButton btnEntrarReuniao = view.findViewById(R.id.btnAulaCursoIncreverSe);
        MaterialButton btnCancelar = view.findViewById(R.id.btnAulaCursoCancelar);
        tvAulaNome.setText(aulaCurso.getTitulo());
        tvAulaDescricao.setText(aulaCurso.getDescricao());
        tvAulaData.setText(StringUtils.formatarData(aulaCurso.getDataAula()));
        configurarModalAulaAcao(aulaCurso, tvAulaModalidade, btnEntrarReuniao);
        btnCancelar.setOnClickListener(v -> builder.create().dismiss());
    }
    private void configurarModalAulaAcao(AulaCurso aulaCurso, TextView tvAulaModalidade, MaterialButton btnEntrarReuniao) {
        if (aulaCurso.isAulaOnline()) {
            configurarAulaOnline(aulaCurso, tvAulaModalidade, btnEntrarReuniao);
        } else {
            configurarAulaPresencial(tvAulaModalidade, btnEntrarReuniao);
        }
    }
    private void configurarAulaOnline(AulaCurso aulaCurso, TextView tvAulaModalidade, MaterialButton btnEntrarReuniao) {
        tvAulaModalidade.setText("Online");
        btnEntrarReuniao.setText("Entrar na Reunião");
        String linkAula = aulaCurso.getLinkAulaAoVivo();
        if (linkAula != null && !linkAula.isEmpty()) {
            btnEntrarReuniao.setOnClickListener(v -> {
                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(linkAula));
                if (intent.resolveActivity(requireContext().getPackageManager()) != null) {
                    startActivity(intent);
                } else {
                    Toast.makeText(requireContext(), "Nenhum aplicativo encontrado para abrir o link", Toast.LENGTH_SHORT).show();
                }
            });
        } else {
            btnEntrarReuniao.setOnClickListener(v -> {
                Toast.makeText(requireContext(), "Link da aula online não disponível", Toast.LENGTH_SHORT).show();
            });
        }
    }
    private void configurarAulaPresencial(TextView tvAulaModalidade, MaterialButton btnEntrarReuniao) {
        tvAulaModalidade.setText("Presencial");
        btnEntrarReuniao.setText("Abrir Google Maps");
        btnEntrarReuniao.setOnClickListener(v -> {
            Uri gmmIntentUri = Uri.parse("geo:0,0?q=Av. Paulista, 1106 - 7º andar - Bela Vista, São Paulo - SP, 01311-000");
            Intent mapIntent = new Intent(Intent.ACTION_VIEW, gmmIntentUri);
            mapIntent.setPackage("com.google.android.apps.maps");
            startActivity(mapIntent);
        });
    }
    private void exibirModalAula(AlertDialog.Builder builder) {
        builder.create().show();
    }
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/ui/fragments/professor/HomeProfessorFragment.java ---
package br.com.domenic.edtech.app.ui.fragments.professor;
public class HomeProfessorFragment extends Fragment {
    private ProfessorAvaliacaoViewModel professorAvaliacaoViewModel;
    private RatingBar ratingProfessor;
    private TextView tvNomeProfessor;
    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        View view = inflater.inflate(R.layout.fragment_home_professor, container, false);
        ratingProfessor = view.findViewById(R.id.ratingProfessor);
        tvNomeProfessor = view.findViewById(R.id.tvProfessorNome);
        professorAvaliacaoViewModel = new ViewModelProvider(this).get(ProfessorAvaliacaoViewModel.class);
        professorAvaliacaoViewModel.getRating().observe(getViewLifecycleOwner(), averageRating -> {
            ratingProfessor.setRating(averageRating.floatValue());
        });
        String nomeProfessor = "Nome do Professor";  // Exemplo fixo, altere conforme necessário
        tvNomeProfessor.setText(nomeProfessor);
        return view;
    }
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/ui/fragments/professor/MeusCursosProfessorFragment.java ---
package br.com.domenic.edtech.app.ui.fragments.professor;
public class MeusCursosProfessorFragment extends Fragment {
    private CursoViewModel cursoViewModel;
    private CursoAvaliacaoViewModel cursoAvaliacaoViewModel;
    private AulaCursoViewModel aulaCursoViewModel;
    private RecyclerView recyclerViewCardsMeusCursos;
    private FloatingActionButton fabAddCurso;
    private SessionManager sessionManager;
    private int professorId;
    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        View view = inflater.inflate(R.layout.fragment_meus_cursos_professor, container, false);
        recyclerViewCardsMeusCursos = view.findViewById(R.id.recyclerViewMeusCursos);
        fabAddCurso = view.findViewById(R.id.fabAddCurso);
        recyclerViewCardsMeusCursos.setLayoutManager(new LinearLayoutManager(getContext()));
        sessionManager = new SessionManager(requireContext());
        professorId = sessionManager.getUserId();
        if (!"professor".equals(sessionManager.getUserType())) {
            requireActivity().runOnUiThread(() ->
                    Toast.makeText(getContext(), "Acesso restrito a professores.", Toast.LENGTH_SHORT).show()
            );
            requireActivity().onBackPressed();
            return view;
        }
        cursoViewModel = new ViewModelProvider(requireActivity()).get(CursoViewModel.class);
        cursoAvaliacaoViewModel = new ViewModelProvider(requireActivity()).get(CursoAvaliacaoViewModel .class);
        aulaCursoViewModel = new ViewModelProvider(requireActivity()).get(AulaCursoViewModel.class);
        cursoViewModel.findByProfessorId(professorId).observe(getViewLifecycleOwner(), cursos -> {
            cursoAvaliacaoViewModel.getAll().observe(getViewLifecycleOwner(), avaliacoes -> {
                CursoAdapter cursoAdapter = new CursoAdapter(getContext(), cursos, avaliacoes, curso -> {
                    try {
                        showCursoOptionsModal(curso);
                    } catch (Exception e) {
                        requireActivity().runOnUiThread(() ->
                                Toast.makeText(getContext(), "Erro ao abrir opções: " + e.getMessage(), Toast.LENGTH_SHORT).show()
                        );
                    }
                });
                recyclerViewCardsMeusCursos.setAdapter(cursoAdapter);
            });
        });
        fabAddCurso.setOnClickListener(v -> {
            try {
                showAddCursoDialog();
            } catch (Exception e) {
                requireActivity().runOnUiThread(() ->
                        Toast.makeText(getContext(), "Erro ao abrir diálogo de adição: " + e.getMessage(), Toast.LENGTH_SHORT).show()
                );
            }
        });
        return view;
    }
    private void showCursoOptionsModal(Curso curso) {
        CursoOptionProfessorDialog dialog = new CursoOptionProfessorDialog(getContext(), curso, new CursoOptionProfessorDialog.OnCursoOptionDialogListener() {
            @Override
            public void onEditCurso(Curso curso) {
                showEditCursoDialog(curso);
            }
            @Override
            public void onDeleteCurso(Curso curso) {
                showDeleteCursoConfirmationDialog(curso);
            }
            @Override
            public void onAgendarAulaEmGrupo(Curso curso) {
                CadastrarAulaEmGrupoDialog cadastrarAulaEmGrupoDialog = new CadastrarAulaEmGrupoDialog(getContext(), aulaCursoViewModel, curso.getIdCurso());
                cadastrarAulaEmGrupoDialog.show();
            }
        });
        dialog.show();
    }
    private void showEditCursoDialog(Curso curso) {
        EditarCursoDialog dialog = new EditarCursoDialog(getContext(), curso, updatedCurso -> {
            cursoViewModel.update(updatedCurso);
            requireActivity().runOnUiThread(() ->
                    Toast.makeText(getContext(), "Curso atualizado com sucesso!", Toast.LENGTH_SHORT).show()
            );
        });
        dialog.show();
    }
    private void showDeleteCursoConfirmationDialog(Curso curso) {
        DeletarCursoDialog dialog = new DeletarCursoDialog(getContext(), curso, cursoToDelete -> {
            cursoViewModel.delete(cursoToDelete);
            requireActivity().runOnUiThread(() ->
                    Toast.makeText(getContext(), "Curso deletado com sucesso!", Toast.LENGTH_SHORT).show()
            );
        });
        dialog.show();
    }
    private void showAddCursoDialog() {
        CadastrarCursoDialog dialog = new CadastrarCursoDialog(requireContext(), (nomeCurso, descricaoCurso, duracaoCurso, precoCurso, precoCursoAulaParticular, dataCriacao, popularidade, recomendacao) -> {
            Curso novoCurso = new Curso(nomeCurso, descricaoCurso, duracaoCurso, precoCurso, precoCursoAulaParticular, professorId, dataCriacao, popularidade, recomendacao);
            cursoViewModel.insert(novoCurso, () -> {
                requireActivity().runOnUiThread(() ->
                        Toast.makeText(getContext(), "Curso cadastrado com sucesso!", Toast.LENGTH_SHORT).show()
                );
            });
        });
        dialog.show();
    }
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/ui/fragments/professor/MinhasAulasProfessorFragment.java ---
package br.com.domenic.edtech.app.ui.fragments.professor;
public class MinhasAulasProfessorFragment extends Fragment {
    private MaterialCalendarView calendarView; // Substituição do CustomCalendarView
    private RecyclerView recyclerViewAulas;
    private AulasAdapter aulasAdapter;
    private AulaCursoViewModel aulaCursoViewModel;
    private int idProfessor;
    private final Set<CalendarDay> datasPresenciais = new HashSet<>();
    private final Set<CalendarDay> datasOnline = new HashSet<>();
    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        View view = inflater.inflate(R.layout.fragment_minhas_aulas_professor, container, false);
        calendarView = view.findViewById(R.id.calendarViewAulas);  // Usando MaterialCalendarView
        recyclerViewAulas = view.findViewById(R.id.recyclerViewMinhasAulas);
        recyclerViewAulas.setLayoutManager(new LinearLayoutManager(getContext()));
        aulaCursoViewModel = new ViewModelProvider(requireActivity()).get(AulaCursoViewModel.class);
        aulasAdapter = new AulasAdapter(getContext(), new ArrayList<>(), this::onItemClick);
        recyclerViewAulas.setAdapter(aulasAdapter);
        SessionManager sessionManager = new SessionManager(requireContext());
        idProfessor = sessionManager.getUserId();
        observeViewModels();
        return view;
    }
    private void observeViewModels() {
        aulaCursoViewModel.findAulasByProfessorId(idProfessor).observe(getViewLifecycleOwner(), aulas -> {
            Collections.sort(aulas, Comparator.comparing(AulaCurso::getDataAula));
            updateCalendarView(aulas);
            updateRecyclerView(aulas);
        });
    }
    private void updateRecyclerView(List<AulaCurso> aulaCursoList) {
        aulasAdapter.updateAulas(aulaCursoList);
    }
    private void updateCalendarView(List<AulaCurso> aulaCursoList) {
        datasPresenciais.clear();
        datasOnline.clear();
        for (AulaCurso aulaCurso : aulaCursoList) {
            CalendarDay dataAula = CalendarDay.from((aulaCurso).getDataAula());
            if (aulaCurso.isAulaOnline()) {
                datasOnline.add(dataAula);
            } else {
                datasPresenciais.add(dataAula);
            }
        }
        calendarView.addDecorator(new CustomCalendarDecorator(requireContext(), datasPresenciais, R.color.md_theme_primary));
        calendarView.addDecorator(new CustomCalendarDecorator(requireContext(), datasOnline, R.color.green));
    }
    private void onItemClick(AulaCurso aulaCurso) {
        View view = getLayoutInflater().inflate(R.layout.modal_aula_entrar, null);
        AlertDialog.Builder builder = new AlertDialog.Builder(requireContext());
        builder.setView(view);
        TextView tvAulaNome = view.findViewById(R.id.tvAulaCursoNome);
        TextView tvAulaDescricao = view.findViewById(R.id.tvAulaCursoDescricao);
        TextView tvAulaData = view.findViewById(R.id.tvAulaCursoData);
        TextView tvAulaModalidade = view.findViewById(R.id.tvTipoAulaCurso);
        MaterialButton btnEntrarReuniao = view.findViewById(R.id.btnAulaCursoIncreverSe);
        MaterialButton btnCancelar = view.findViewById(R.id.btnAulaCursoCancelar);
        tvAulaNome.setText(aulaCurso.getTitulo());
        tvAulaDescricao.setText(aulaCurso.getDescricao());
        tvAulaData.setText(StringUtils.formatarData(aulaCurso.getDataAula()));
        if (aulaCurso.isAulaOnline()) {
            tvAulaModalidade.setText("Online");
            btnEntrarReuniao.setText("Entrar na Reunião");
            btnEntrarReuniao.setOnClickListener(v -> {
                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(aulaCurso.getLinkAulaAoVivo()));
                startActivity(intent);
            });
        } else {
            tvAulaModalidade.setText("Presencial");
            btnEntrarReuniao.setText("Abrir Google Maps");
            btnEntrarReuniao.setOnClickListener(v -> {
                Uri gmmIntentUri = Uri.parse("geo:0,0?q=Av. Paulista, 1106 - 7º andar - Bela Vista, São Paulo - SP, 01311-000");
                Intent mapIntent = new Intent(Intent.ACTION_VIEW, gmmIntentUri);
                mapIntent.setPackage("com.google.android.apps.maps");
                startActivity(mapIntent);
            });
        }
        btnCancelar.setOnClickListener(v -> {
            builder.create().dismiss();
        });
        builder.setPositiveButton("Fechar", null);
        builder.create().show();
    }
    private void showRescheduleDialog() {
        View view = getLayoutInflater().inflate(R.layout.modal_aula_reagendar, null);
        AlertDialog.Builder builder = new AlertDialog.Builder(requireContext());
        builder.setView(view);
        MaterialCalendarView calendarView = view.findViewById(R.id.calendarViewAulaReagendar);
        MaterialButton btnReagendar = view.findViewById(R.id.btnReagendar);
        MaterialButton btnCancelarAula = view.findViewById(R.id.btnCancelarAula);
        btnReagendar.setOnClickListener(v -> {
            CalendarDay selectedDate = calendarView.getSelectedDate();
            if (selectedDate != null) {
                Toast.makeText(getContext(), "Aula reagendada para " + selectedDate.getDate(), Toast.LENGTH_SHORT).show();
            } else {
                Toast.makeText(getContext(), "Selecione uma data para reagendar", Toast.LENGTH_SHORT).show();
            }
        });
        btnCancelarAula.setOnClickListener(v -> {
            Toast.makeText(getContext(), "Aula cancelada", Toast.LENGTH_SHORT).show();
        });
        builder.setNeutralButton("Fechar", null);
        builder.create().show();
    }
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/ui/modals/aluno/AgendarAulaParticularDialog.java ---
package br.com.domenic.edtech.app.ui.modals.aluno;
public class AgendarAulaParticularDialog {
    private final Dialog dialog;
    private final Context context;
    private final AulaCursoViewModel aulaCursoViewModel;
    private final AulaCursoInscritoViewModel aulaCursoInscritoViewModel;
    private final int idCurso, idAluno;
    private Date selectedDate;
    private final Set<CalendarDay> diasIndisponiveis = new HashSet<>();
    private MaterialCalendarView calendarView;
    private TextInputEditText etTitulo, etDescricao, etLink;
    private MaterialButton btnCadastrar, btnCancelar;
    private RadioGroup radioGroupTipoAula;
    private RadioButton radioAulaOnline, radioAulaRemota;
    public AgendarAulaParticularDialog(Context context, AulaCursoViewModel aulaCursoViewModel, AulaCursoInscritoViewModel aulaCursoInscritoViewModel, int idCurso, int idAluno) {
        this.context = context;
        this.aulaCursoViewModel = aulaCursoViewModel;
        this.aulaCursoInscritoViewModel = aulaCursoInscritoViewModel;
        this.idCurso = idCurso;
        this.idAluno = idAluno;
        dialog = createDialog();
        configurarCalendario();
        configurarBotoes();
        configurarRadioGroup();  // Configuração do RadioGroup
    }
    private Dialog createDialog() {
        View view = LayoutInflater.from(context).inflate(R.layout.modal_cadastrar_aula, null);
        Dialog dialog = new Dialog(context);
        dialog.setContentView(view);
        dialog.setCancelable(true);
        calendarView = view.findViewById(R.id.calendarViewAulaEmGrupo);
        etTitulo = view.findViewById(R.id.etTituloAulaGrupo);
        etDescricao = view.findViewById(R.id.etDescricaoAulaGrupo);
        etLink = view.findViewById(R.id.etLinkAulaGrupo);
        btnCadastrar = view.findViewById(R.id.btnCadastrar);
        btnCancelar = view.findViewById(R.id.btnCancelar);
        radioGroupTipoAula = view.findViewById(R.id.radioGroupTipoAula);
        radioAulaOnline = view.findViewById(R.id.radioIsAulaOnline);
        radioAulaRemota = view.findViewById(R.id.radioIsAulaRemota);
        disableFields();
        return dialog;
    }
    public void show() {
        dialog.show();
    }
    private void configurarCalendario() {
        aulaCursoViewModel.findAulasByCursoId(idCurso).observe((LifecycleOwner) context, aulas -> {
            if (aulas != null && !aulas.isEmpty()) {
                for (AulaCurso aula : aulas) {
                    diasIndisponiveis.add(CalendarDay.from(aula.getDataAula()));
                }
                calendarView.addDecorator(new DisabledDaysDecorator(diasIndisponiveis));
            }
        });
        calendarView.setOnDateChangedListener((widget, date, selected) -> {
            if (isDayValid(date)) {
                selectedDate = date.getDate();
                enableFields();
            } else {
                disableFields();
                showToast("Dia indisponível");
            }
        });
    }
    private void configurarRadioGroup() {
        radioGroupTipoAula.setOnCheckedChangeListener((group, checkedId) -> {
            if (checkedId == R.id.radioIsAulaOnline) {
                etLink.setEnabled(true);
            } else if (checkedId == R.id.radioIsAulaRemota) {
                etLink.setEnabled(false);
                etLink.setText("");  // Limpar o campo se não for necessário
            }
        });
    }
    private void configurarBotoes() {
        btnCadastrar.setOnClickListener(v -> cadastrarAulaParticular());
        btnCancelar.setOnClickListener(v -> dialog.dismiss());
    }
    private void enableFields() {
        etTitulo.setEnabled(true);
        etDescricao.setEnabled(true);
        etLink.setEnabled(true);  // Isso será controlado pelo RadioGroup
        btnCadastrar.setEnabled(true);
    }
    private void disableFields() {
        etTitulo.setEnabled(false);
        etDescricao.setEnabled(false);
        etLink.setEnabled(false);
        btnCadastrar.setEnabled(false);
    }
    private boolean isDayValid(CalendarDay date) {
        return !diasIndisponiveis.contains(date);
    }
    private void cadastrarAulaParticular() {
        String titulo = etTitulo.getText().toString();
        String descricao = etDescricao.getText().toString();
        String linkAula = etLink.getText().toString();
        if (!validateInput(titulo, descricao)) {
            showToast("Preencha todos os campos obrigatórios");
            return;
        }
        boolean isAulaOnline = radioAulaOnline.isChecked();  // Verificação do RadioButton selecionado
        LiveData<List<AulaCurso>> aulasLiveData = aulaCursoViewModel.findAulasByCursoId(idCurso);
        aulasLiveData.observe((LifecycleOwner) context, aulas -> {
            if (aulas != null && !aulas.isEmpty()) {
                int idProfessor = aulas.get(0).getIdProfessor();
                AulaCurso novaAula = new AulaCurso(
                        idCurso,
                        idProfessor,
                        isAulaOnline,  // Definir se a aula é online ou remota com base na escolha do RadioButton
                        !linkAula.isEmpty(),
                        titulo,
                        descricao,
                        selectedDate,
                        isAulaOnline ? linkAula : null  // O link só é relevante para aulas online
                );
                aulaCursoViewModel.insert(novaAula, () -> {
                    ((Activity) context).runOnUiThread(() -> {
                        aulasLiveData.removeObservers((LifecycleOwner) context);
                        buscarUltimaAulaCriada();
                    });
                });
            } else {
                showToast("Nenhuma aula encontrada para este curso");
            }
        });
    }
    private void buscarUltimaAulaCriada() {
        ((Activity) context).runOnUiThread(() -> {
            LiveData<List<AulaCurso>> novaAulaLiveData = aulaCursoViewModel.findAulasByCursoId(idCurso);
            novaAulaLiveData.observe((LifecycleOwner) context, novasAulas -> {
                if (novasAulas != null && !novasAulas.isEmpty()) {
                    AulaCurso aulaCriada = novasAulas.get(novasAulas.size() - 1);
                    ((Activity) context).runOnUiThread(() -> {
                        AulaCursoInscrito aulaCursoInscrito = new AulaCursoInscrito(aulaCriada.getIdAulaCurso(), idAluno);
                        aulaCursoInscritoViewModel.insert(aulaCursoInscrito, () -> {
                            ((Activity) context).runOnUiThread(() -> {
                                novaAulaLiveData.removeObservers((LifecycleOwner) context);
                                onInscricaoConcluida();
                            });
                        });
                    });
                }
            });
        });
    }
    private void onInscricaoConcluida() {
        showToast("Aula particular agendada e inscrição realizada com sucesso!");
        dialog.dismiss();
    }
    private boolean validateInput(String titulo, String descricao) {
        return !titulo.isEmpty() && !descricao.isEmpty() && selectedDate != null;
    }
    private void showToast(String message) {
        if (context instanceof Activity) {
            ((Activity) context).runOnUiThread(() ->
                    Toast.makeText(context, message, Toast.LENGTH_SHORT).show()
            );
        }
    }
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/ui/modals/aluno/AvaliarCursoDialog.java ---
package br.com.domenic.edtech.app.ui.modals.aluno;
public class AvaliarCursoDialog {
    private final TextView textView;
    private final Dialog dialog;
    private final Button btnAvaliar, btnCancelar;
    private final RatingBar ratingBar;
    private final EditText etComentario;
    public AvaliarCursoDialog(Context context, Curso curso) {
        View view = LayoutInflater.from(context).inflate(R.layout.modal_curso_avaliacao, null);
        dialog = new Dialog(context);
        dialog.setContentView(view);
        dialog.setCancelable(true);
        textView = view.findViewById(R.id.tvNomeCurso);
        btnAvaliar = view.findViewById(R.id.btnAvaliarCurso);
        btnCancelar = view.findViewById(R.id.btnCancelarAvaliarCurso);
        ratingBar = view.findViewById(R.id.ratingBarAvaliarCurso);
        etComentario = view.findViewById(R.id.etComentario);
        textView.setText(curso.getNomeCurso());
        btnCancelar.setOnClickListener(v -> dialog.dismiss());
    }
    public void show() {
        dialog.show();
    }
    public void dismiss() {
        dialog.dismiss();
    }
    public void setOnAvaliarListener(View.OnClickListener listener) {
        btnAvaliar.setOnClickListener(listener);
    }
    public float getNota() {
        return ratingBar.getRating();
    }
    public String getComentario() {
        return etComentario.getText().toString();
    }
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/ui/modals/aluno/AvaliarProfessorDialog.java ---
package br.com.domenic.edtech.app.ui.modals.aluno;
public class AvaliarProfessorDialog {
    private final TextView textView;
    private final Dialog dialog;
    private final Button btnAvaliar, btnCancelar;
    private final RatingBar ratingBar;
    private final EditText etComentario;
    public AvaliarProfessorDialog(Context context, String professorNome) {
        View view = LayoutInflater.from(context).inflate(R.layout.modal_professor_avaliacao, null);
        dialog = new Dialog(context);
        dialog.setContentView(view);
        dialog.setCancelable(true);
        textView = view.findViewById(R.id.tvNomeProfessor);
        btnAvaliar = view.findViewById(R.id.btnAvaliarProfessor);
        btnCancelar = view.findViewById(R.id.btnCancelarAvaliarProfessor);
        ratingBar = view.findViewById(R.id.ratingBarAvaliarProfessor);
        etComentario = view.findViewById(R.id.etComentario);
        textView.setText(professorNome);
        btnCancelar.setOnClickListener(v -> dialog.dismiss());
    }
    public void show() {
        dialog.show();
    }
    public void dismiss() {
        dialog.dismiss();
    }
    public void setOnAvaliarListener(View.OnClickListener listener) {
        btnAvaliar.setOnClickListener(listener);
    }
    public float getNota() {
        return ratingBar.getRating();
    }
    public String getComentario() {
        return etComentario.getText().toString();
    }
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/ui/modals/aluno/IncreverAulaEmGrupoDialog.java ---
package br.com.domenic.edtech.app.ui.modals.aluno;
public class IncreverAulaEmGrupoDialog {
    private final Dialog dialog;
    private final MaterialCalendarView calendarView;
    private final Context context;
    private final AulaCursoViewModel aulaCursoViewModel;
    private final AulaCursoInscritoViewModel aulaCursoInscritoViewModel;
    private final Map<CalendarDay, AulaCurso> aulaMap = new HashMap<>();
    private final int idAluno;
    public IncreverAulaEmGrupoDialog(Context context, AulaCursoViewModel aulaCursoViewModel, AulaCursoInscritoViewModel aulaCursoInscritoViewModel, int idCurso, int idAluno) {
        this.context = context;
        this.aulaCursoViewModel = aulaCursoViewModel;
        this.aulaCursoInscritoViewModel = aulaCursoInscritoViewModel;
        this.idAluno = idAluno;
        View view = LayoutInflater.from(context).inflate(R.layout.modal_aula_em_grupo, null);
        dialog = new Dialog(context);
        dialog.setContentView(view);
        dialog.setCancelable(true);
        calendarView = view.findViewById(R.id.calendarViewAulaEmGrupo);
        configurarCalendario(idCurso);
        configurarBotoes(view);
    }
    public void show() {
        dialog.show();
    }
    private void configurarCalendario(int idCurso) {
        aulaCursoViewModel.findAulasByCursoId(idCurso).observe((LifecycleOwner) context, aulasGrupo -> {
            Set<CalendarDay> datasPresenciais = new HashSet<>();
            Set<CalendarDay> datasOnline = new HashSet<>();
            for (AulaCurso aula : aulasGrupo) {
                CalendarDay day = CalendarDay.from(aula.getDataAula());
                aulaMap.put(day, aula);
                if (aula.isAulaOnline()) {
                    datasOnline.add(day);
                } else {
                    datasPresenciais.add(day);
                }
            }
            atualizarDecoradores(datasPresenciais, datasOnline);
        });
        calendarView.setOnDateChangedListener((widget, date, selected) -> {
            AulaCurso aulaSelecionada = aulaMap.get(date);
            if (aulaSelecionada != null) {
                openAulaGrupoInscricaoModal(aulaSelecionada);
            }
        });
    }
    private void atualizarDecoradores(Set<CalendarDay> datasPresenciais, Set<CalendarDay> datasOnline) {
        calendarView.removeDecorators();
        calendarView.addDecorator(new CustomCalendarDecorator(context, datasPresenciais, R.color.md_theme_primary));
        calendarView.addDecorator(new CustomCalendarDecorator(context, datasOnline, R.color.green));
    }
    private void configurarBotoes(View view) {
        view.findViewById(R.id.btnInscreverSe).setOnClickListener(v -> dialog.dismiss());
        view.findViewById(R.id.btnCancelar).setOnClickListener(v -> dialog.dismiss());
    }
    private void openAulaGrupoInscricaoModal(AulaCurso aula) {
        View modalView = LayoutInflater.from(context).inflate(R.layout.modal_aula_inscricao_aluno, null);
        Dialog modalDialog = new Dialog(context);
        modalDialog.setContentView(modalView);
        modalDialog.setCancelable(true);
        preencherInformacoesAula(modalView, aula);
        configurarBotoesModal(modalView, modalDialog, aula);
        modalDialog.show();
    }
    private void preencherInformacoesAula(View modalView, AulaCurso aula) {
        TextView tvNomeAula = modalView.findViewById(R.id.tvAulaGrupoNome);
        TextView tvDescricaoAula = modalView.findViewById(R.id.tvAulaGrupoDescricao);
        TextView tvTipoAula = modalView.findViewById(R.id.tvTipoAula);
        TextView tvDataAula = modalView.findViewById(R.id.tvAulaGrupoData);
        tvNomeAula.setText(aula.getTitulo());
        tvDescricaoAula.setText(aula.getDescricao());
        tvTipoAula.setText(aula.isAulaOnline() ? "Online" : "Presencial");
        tvDataAula.setText(StringUtils.formatarData(aula.getDataAula()));
    }
    private void configurarBotoesModal(View modalView, Dialog modalDialog, AulaCurso aula) {
        modalView.findViewById(R.id.btnAulaGrupoIncreverSe).setOnClickListener(v -> inscreverAlunoNaAula(aula, modalDialog));
        modalView.findViewById(R.id.btnAulaGrupoCancelar).setOnClickListener(v -> modalDialog.dismiss());
    }
    private void inscreverAlunoNaAula(AulaCurso aula, Dialog modalDialog) {
        AulaCursoInscrito aulaCursoInscrito = new AulaCursoInscrito(aula.getIdAulaCurso(), idAluno);
        aulaCursoInscritoViewModel.insert(aulaCursoInscrito, () -> {
            if (context instanceof Activity) {
                ((Activity) context).runOnUiThread(() -> {
                    Toast.makeText(context, "Você foi inscrito na aula " + aula.getTitulo(), Toast.LENGTH_SHORT).show();
                });
            }
        });
        modalDialog.dismiss();
    }
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/ui/modals/aluno/MatricularCursoDialog.java ---
package br.com.domenic.edtech.app.ui.modals.aluno;
public class MatricularCursoDialog {
    private final Dialog dialog;
    private final Button btnAderir, btnCancelar;
    private final TextView tvNomeCurso, tvDescricaoCurso, tvPrecoCurso;
    public MatricularCursoDialog(Context context, String nomeCurso, String descricaoCurso, double precoCurso) {
        View view = LayoutInflater.from(context).inflate(R.layout.modal_matricula_curso, null);
        dialog = new Dialog(context);
        dialog.setContentView(view);
        dialog.setCancelable(true);
        tvNomeCurso = view.findViewById(R.id.tvCursoModalNome);
        tvDescricaoCurso = view.findViewById(R.id.tvCursoModalDescricao);
        tvPrecoCurso = view.findViewById(R.id.tvCursoModalPreco);
        tvNomeCurso.setText(nomeCurso);
        tvDescricaoCurso.setText(descricaoCurso);
        tvPrecoCurso.setText(String.format("Preço: R$ %.2f", precoCurso));
        btnAderir = view.findViewById(R.id.btnAderirMatriculaCurso);
        btnCancelar = view.findViewById(R.id.btnCancelarMatricula);
        btnCancelar.setOnClickListener(v -> dialog.dismiss());
    }
    public void show() {
        dialog.show();
    }
    public void dismiss() {
        dialog.dismiss();
    }
    public void setOnAderirListener(View.OnClickListener listener) {
        btnAderir.setOnClickListener(listener);
    }
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/ui/modals/professor/CadastrarAulaEmGrupoDialog.java ---
package br.com.domenic.edtech.app.ui.modals.professor;
public class CadastrarAulaEmGrupoDialog {
    private final Dialog dialog;
    private final MaterialCalendarView materialCalendarView;
    private final EditText etTitulo, etDescricao, etLinkAula;
    private final Button btnCadastrar;
    private CalendarDay dataSelecionada;
    private final AulaCursoViewModel aulaCursoViewModel;
    private final int idCurso;
    public CadastrarAulaEmGrupoDialog(Context context, AulaCursoViewModel aulaCursoViewModel, int idCurso) {
        this.aulaCursoViewModel = aulaCursoViewModel;
        this.idCurso = idCurso;
        View view = LayoutInflater.from(context).inflate(R.layout.modal_cadastrar_aula_em_grupo, null);
        dialog = new Dialog(context);
        dialog.setContentView(view);
        dialog.setCancelable(true);
        materialCalendarView = view.findViewById(R.id.calendarViewAulaEmGrupo);
        etTitulo = view.findViewById(R.id.etTituloAulaGrupo);
        etDescricao = view.findViewById(R.id.etDescricaoAulaGrupo);
        etLinkAula = view.findViewById(R.id.etLinkAulaGrupo);
        btnCadastrar = view.findViewById(R.id.btnCadastrar);
        AulaCurso aulaCurso = GeradorDados.gerarAulaGrupo(idCurso);
        etTitulo.setText(aulaCurso.getTitulo());
        etDescricao.setText(aulaCurso.getDescricao());
        etLinkAula.setText(aulaCurso.getLinkAulaAoVivo());
        btnCadastrar.setEnabled(false);
        materialCalendarView.setOnDateChangedListener((widget, date, selected) -> {
            dataSelecionada = date;
            etTitulo.setEnabled(true);
            etDescricao.setEnabled(true);
            etLinkAula.setEnabled(true);
            btnCadastrar.setEnabled(true);
        });
        btnCadastrar.setOnClickListener(v -> {
            if (dataSelecionada != null && validarCampos()) {
                aulaCurso.setDataAula(dataSelecionada.getDate()); // Definir a data selecionada
                aulaCursoViewModel.insert(aulaCurso, () -> {
                    ((Activity) context).runOnUiThread(() -> {
                        Toast.makeText(context, "Aula em grupo cadastrada com sucesso!", Toast.LENGTH_SHORT).show();
                        dialog.dismiss();
                    });
                });
            } else {
                ((Activity) context).runOnUiThread(() ->
                        Toast.makeText(context, "Por favor, preencha todos os campos.", Toast.LENGTH_SHORT).show()
                );
            }
        });
        view.findViewById(R.id.btnCancelar).setOnClickListener(v -> dialog.dismiss());
    }
    public void show() {
        dialog.show();
    }
    private boolean validarCampos() {
        return !etTitulo.getText().toString().isEmpty() && !etDescricao.getText().toString().isEmpty();
    }
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/ui/modals/professor/CadastrarCursoDialog.java ---
package br.com.domenic.edtech.app.ui.modals.professor;
public class CadastrarCursoDialog {
    private final Dialog dialog;
    private final EditText etNomeCurso;
    private final EditText etDescricaoCurso;
    private final EditText etDuracaoCurso;
    private final EditText etPrecoCurso;
    private final EditText etPrecoCursoAulaParticular;
    public CadastrarCursoDialog(Context context, OnCursoDialogListener listener) {
        View view = LayoutInflater.from(context).inflate(R.layout.modal_cadastrar_curso, null);
        dialog = new Dialog(context);
        dialog.setContentView(view);
        dialog.setCancelable(true);
        etNomeCurso = view.findViewById(R.id.etNomeCurso);
        etDescricaoCurso = view.findViewById(R.id.etDescricaoCurso);
        etDuracaoCurso = view.findViewById(R.id.etDuracaoCurso);
        etPrecoCurso = view.findViewById(R.id.etPrecoCurso);
        etPrecoCursoAulaParticular = view.findViewById(R.id.etPrecoCursoAulaParticular);
        Curso curso = GeradorDados.gerarCurso();
        etNomeCurso.setText(curso.getNomeCurso());
        etDescricaoCurso.setText(curso.getDescricao());
        etDuracaoCurso.setText(String.valueOf(curso.getDuracaoHoras()));
        etPrecoCurso.setText(String.format("%.2f", curso.getPrecoCurso()));
        etPrecoCursoAulaParticular.setText(String.format("%.2f", curso.getPrecoCursoAulaParticular()));
        Date dataCriacao = curso.getDataCriacao();
        int popularidade = curso.getPopularidade();
        int recomendacao = curso.getRecomendacao();
        view.findViewById(R.id.btnCadastrar).setOnClickListener(v -> {
            String nomeCurso = etNomeCurso.getText().toString();
            String descricaoCurso = etDescricaoCurso.getText().toString();
            String duracaoCursoStr = etDuracaoCurso.getText().toString();
            String precoCursoStr = etPrecoCurso.getText().toString();
            String precoCursoAulaParticularStr = etPrecoCursoAulaParticular.getText().toString();
            int duracaoCurso = !duracaoCursoStr.isEmpty() ? Integer.parseInt(duracaoCursoStr) : 0;
            double precoCurso = !precoCursoStr.isEmpty() ? Double.parseDouble(precoCursoStr) : 0.0;
            double precoCursoAulaParticular = !precoCursoAulaParticularStr.isEmpty() ? Double.parseDouble(precoCursoAulaParticularStr) : 0.0;
            if (listener != null) {
                listener.onCadastrarCurso(nomeCurso, descricaoCurso, duracaoCurso, precoCurso, precoCursoAulaParticular, dataCriacao, popularidade, recomendacao);
            }
            dialog.dismiss();
        });
        view.findViewById(R.id.btnCancelar).setOnClickListener(v -> dialog.dismiss());
    }
    public void show() {
        dialog.show();
    }
    public interface OnCursoDialogListener {
        void onCadastrarCurso(String nomeCurso, String descricaoCurso, int duracaoCurso, double precoCurso, double precoCursoAulaParticular, Date dataCriacao, int popularidade, int recomendacao);
    }
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/ui/modals/professor/CursoOptionProfessorDialog.java ---
package br.com.domenic.edtech.app.ui.modals.professor;
public class CursoOptionProfessorDialog {
    private final Dialog dialog;
    public CursoOptionProfessorDialog(Context context, Curso curso, OnCursoOptionDialogListener listener) {
        View view = LayoutInflater.from(context).inflate(R.layout.modal_curso_opcoes_professor, null);
        dialog = new Dialog(context);
        dialog.setContentView(view);
        dialog.setCancelable(true);
        TextView tvNomeCurso = view.findViewById(R.id.tvNomeCurso);
        TextView tvDescricaoCurso = view.findViewById(R.id.tvDescricaoCurso);
        TextView tvDuracaoCurso = view.findViewById(R.id.tvDuracaoCurso);
        tvNomeCurso.setText(curso.getNomeCurso());
        tvDescricaoCurso.setText(curso.getDescricao());
        tvDuracaoCurso.setText(String.format("Duração: %d horas", curso.getDuracaoHoras()));
        view.findViewById(R.id.btnEditarCurso).setOnClickListener(v -> {
            if (listener != null) {
                listener.onEditCurso(curso);
            }
            dialog.dismiss();
        });
        view.findViewById(R.id.btnDeletarCurso).setOnClickListener(v -> {
            if (listener != null) {
                listener.onDeleteCurso(curso);
            }
            dialog.dismiss();
        });
        view.findViewById(R.id.btnAgendarAulaEmGrupo).setOnClickListener(v -> {
            if (listener != null) {
                listener.onAgendarAulaEmGrupo(curso);
            }
            dialog.dismiss();
        });
        view.findViewById(R.id.btnCancelarCurso).setOnClickListener(v -> dialog.dismiss());
    }
    public void show() {
        dialog.show();
    }
    public interface OnCursoOptionDialogListener {
        void onEditCurso(Curso curso);
        void onDeleteCurso(Curso curso);
        void onAgendarAulaEmGrupo(Curso curso); // Nova ação para agendar aula em grupo
    }
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/ui/modals/professor/DeletarCursoDialog.java ---
package br.com.domenic.edtech.app.ui.modals.professor;
public class DeletarCursoDialog {
    private final Dialog dialog;
    public DeletarCursoDialog(Context context, Curso curso, OnDeletarCursoDialogListener listener) {
        View view = LayoutInflater.from(context).inflate(R.layout.modal_deletar_curso, null);
        dialog = new Dialog(context);
        dialog.setContentView(view);
        dialog.setCancelable(true);
        TextView tvConfirmacaoDeletar = view.findViewById(R.id.tvConfirmacaoDeletar);
        tvConfirmacaoDeletar.setText(String.format("Você realmente deseja excluir o curso '%s'?", curso.getNomeCurso()));
        view.findViewById(R.id.btnConfirmarDeletar).setOnClickListener(v -> {
            if (listener != null) {
                listener.onConfirmarDeletar(curso);
            }
            dialog.dismiss();
        });
        view.findViewById(R.id.btnCancelarDeletar).setOnClickListener(v -> dialog.dismiss());
    }
    public void show() {
        dialog.show();
    }
    public interface OnDeletarCursoDialogListener {
        void onConfirmarDeletar(Curso curso);
    }
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/ui/modals/professor/EditarCursoDialog.java ---
package br.com.domenic.edtech.app.ui.modals.professor;
public class EditarCursoDialog {
    private final Dialog dialog;
    private final EditText etNomeCurso;
    private final EditText etDescricaoCurso;
    private final EditText etDuracaoCurso;
    private final EditText etPrecoCurso;
    private final EditText etPrecoCursoAulaParticular;
    private final Curso curso;
    public EditarCursoDialog(Context context, Curso curso, OnEditCursoDialogListener listener) {
        this.curso = curso;
        View view = LayoutInflater.from(context).inflate(R.layout.modal_editar_curso, null);
        dialog = new Dialog(context);
        dialog.setContentView(view);
        dialog.setCancelable(true);
        etNomeCurso = view.findViewById(R.id.etNomeCurso);
        etDescricaoCurso = view.findViewById(R.id.etDescricaoCurso);
        etDuracaoCurso = view.findViewById(R.id.etDuracaoHoras);
        etPrecoCurso = view.findViewById(R.id.etPrecoCurso);
        etPrecoCursoAulaParticular = view.findViewById(R.id.etPrecoCursoAulaParticular);
        etNomeCurso.setText(curso.getNomeCurso());
        etDescricaoCurso.setText(curso.getDescricao());
        etDuracaoCurso.setText(String.valueOf(curso.getDuracaoHoras()));
        etPrecoCurso.setText(String.valueOf(curso.getPrecoCurso()));
        etPrecoCursoAulaParticular.setText(String.valueOf(curso.getPrecoCursoAulaParticular()));
        view.findViewById(R.id.btnSalvarCurso).setOnClickListener(v -> {
            String nomeCurso = etNomeCurso.getText().toString();
            String descricaoCurso = etDescricaoCurso.getText().toString();
            int duracaoCurso = Integer.parseInt(etDuracaoCurso.getText().toString());
            double precoCurso = Double.parseDouble(etPrecoCurso.getText().toString());
            double precoAulaParticular = Double.parseDouble(etPrecoCursoAulaParticular.getText().toString());
            curso.setNomeCurso(nomeCurso);
            curso.setDescricao(descricaoCurso);
            curso.setDuracaoHoras(duracaoCurso);
            curso.setPrecoCurso(precoCurso);
            curso.setPrecoCursoAulaParticular(precoAulaParticular);
            if (listener != null) {
                listener.onEditCurso(curso);
            }
            dialog.dismiss();
        });
        view.findViewById(R.id.btnCancelarCurso).setOnClickListener(v -> dialog.dismiss());
    }
    public void show() {
        dialog.show();
    }
    public interface OnEditCursoDialogListener {
        void onEditCurso(Curso curso);
    }
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/ui/viewmodels/AlunoCursoViewModel.java ---
package br.com.domenic.edtech.app.ui.viewmodels;
public class AlunoCursoViewModel extends BaseViewModel<AlunoCurso> {
    private final AlunoCursoRepository alunoCursoRepository;
    public AlunoCursoViewModel(@NonNull Application application) {
        super(application);
        alunoCursoRepository = new AlunoCursoRepository(application);
    }
    @Override
    public LiveData<List<AlunoCurso>> getAll() {
        return alunoCursoRepository.getAll();
    }
    public LiveData<List<AlunoCurso>> getCursosByAluno(int idAluno) {
        return alunoCursoRepository.getCursosByAluno(idAluno);
    }
    @Override
    public void insert(AlunoCurso alunoCurso, Runnable onCompletion) {
        alunoCursoRepository.insert(alunoCurso, onCompletion);
    }
    @Override
    public void update(AlunoCurso alunoCurso) {
        alunoCursoRepository.update(alunoCurso);
    }
    @Override
    public void delete(AlunoCurso alunoCurso) {
        alunoCursoRepository.delete(alunoCurso);
    }
    public LiveData<List<Curso>> getOnlyCursosByAluno(int idAluno) {
        return alunoCursoRepository.getOnlyCursosByAluno(idAluno);
    }
    public void deleteAllCursosByAlunoId(int idAluno, Runnable onCompletion) {
        alunoCursoRepository.deleteByCriteria(idAluno, onCompletion);
    }
    public void deleteAll() {
        alunoCursoRepository.deleteAll();
    }
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/ui/viewmodels/AlunoViewModel.java ---
package br.com.domenic.edtech.app.ui.viewmodels;
public class AlunoViewModel extends BaseViewModel<Aluno> {
    private final AlunoRepository alunoRepository;
    public AlunoViewModel(@NonNull Application application) {
        super(application);
        alunoRepository = new AlunoRepository(application);
    }
    @Override
    public LiveData<List<Aluno>> getAll() {
        return alunoRepository.getAll();
    }
    public LiveData<Aluno> findByEmailAndSenha(String email, String senha) {
        return alunoRepository.findByEmailAndSenha(email, senha);
    }
    @Override
    public void insert(Aluno aluno, Runnable onCompletion) {
        alunoRepository.insert(aluno, onCompletion);
    }
    @Override
    public void update(Aluno aluno) {
        alunoRepository.update(aluno);
    }
    @Override
    public void delete(Aluno aluno) {
        alunoRepository.delete(aluno);
    }
    public LiveData<Aluno> findById(int idAluno) {
        return alunoRepository.findById(idAluno);
    }
    public void deleteAll() {
        alunoRepository.deleteAll();
    }
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/ui/viewmodels/AulaCursoInscritoViewModel.java ---
package br.com.domenic.edtech.app.ui.viewmodels;
public class AulaCursoInscritoViewModel extends BaseViewModel<AulaCursoInscrito> {
    private final AulaCursoInscritoRepository aulaCursoInscritoRepository;
    public AulaCursoInscritoViewModel(@NonNull Application application) {
        super(application);
        aulaCursoInscritoRepository = new AulaCursoInscritoRepository(application);
    }
    @Override
    public LiveData<List<AulaCursoInscrito>> getAll() {
        return aulaCursoInscritoRepository.getAll();
    }
    @Override
    public void insert(AulaCursoInscrito aulaCurso, Runnable onCompletion) {
        aulaCursoInscritoRepository.insert(aulaCurso, onCompletion);
    }
    @Override
    public void update(AulaCursoInscrito aulaCurso) {
        aulaCursoInscritoRepository.update(aulaCurso);
    }
    @Override
    public void delete(AulaCursoInscrito aulaCurso) {
        aulaCursoInscritoRepository.delete(aulaCurso);
    }
    public void deleteAll() {
        aulaCursoInscritoRepository.deleteAll();
    }
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/ui/viewmodels/AulaCursoViewModel.java ---
package br.com.domenic.edtech.app.ui.viewmodels;
public class AulaCursoViewModel extends BaseViewModel<AulaCurso> {
    private final AulaCursoRepository aulaCursoRepository;
    public AulaCursoViewModel(@NonNull Application application) {
        super(application);
        aulaCursoRepository = new AulaCursoRepository(application);
    }
    @Override
    public LiveData<List<AulaCurso>> getAll() {
        return aulaCursoRepository.getAll();
    }
    @Override
    public void insert(AulaCurso aulaCurso, Runnable onCompletion) {
        aulaCursoRepository.insert(aulaCurso, onCompletion);
    }
    @Override
    public void update(AulaCurso aulaCurso) {
        aulaCursoRepository.update(aulaCurso);
    }
    @Override
    public void delete(AulaCurso aulaCurso) {
        aulaCursoRepository.delete(aulaCurso);
    }
    public LiveData<List<AulaCurso>> findAulasByCursoId(int idCurso) {
        return aulaCursoRepository.findAulasByCursoId(idCurso);
    }
    public LiveData<List<AulaCurso>> findAulasByProfessorId(int idProfessor) {
        return aulaCursoRepository.findAulasByProfessorId(idProfessor);
    }
    public LiveData<List<AulaCurso>> findAulasByAlunoId(int idAluno) {
        return aulaCursoRepository.findAulasByAlunoId(idAluno);
    }
    public void deleteAll() {
        aulaCursoRepository.deleteAll();
    }
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/ui/viewmodels/CursoAvaliacaoViewModel.java ---
package br.com.domenic.edtech.app.ui.viewmodels;
public class CursoAvaliacaoViewModel extends BaseViewModel<CursoAvaliacao> {
    private final CursoAvaliacaoRepository cursoAvaliacaoRepository;
    public CursoAvaliacaoViewModel(@NonNull Application application) {
        super(application);
        cursoAvaliacaoRepository = new CursoAvaliacaoRepository(application);
    }
    @Override
    public LiveData<List<CursoAvaliacao>> getAll() {
        return cursoAvaliacaoRepository.getAll();
    }
    @Override
    public void insert(CursoAvaliacao cursoAvaliacao, Runnable onCompletion) {
        cursoAvaliacaoRepository.insert(cursoAvaliacao, onCompletion);
    }
    @Override
    public void update(CursoAvaliacao cursoAvaliacao) {
        cursoAvaliacaoRepository.update(cursoAvaliacao);
    }
    @Override
    public void delete(CursoAvaliacao cursoAvaliacao) {
        cursoAvaliacaoRepository.delete(cursoAvaliacao);
    }
    public LiveData<List<CursoAvaliacao>> findAvaliacoesByCursoId(int idProfessor) {
        return cursoAvaliacaoRepository.findAvaliacoesByCursoId(idProfessor);
    }
    public void deleteAll() {
        cursoAvaliacaoRepository.deleteAll();
    }
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/ui/viewmodels/CursoViewModel.java ---
package br.com.domenic.edtech.app.ui.viewmodels;
public class CursoViewModel extends BaseViewModel<Curso> {
    private final CursoRepository cursoRepository;
    public CursoViewModel(@NonNull Application application) {
        super(application);
        cursoRepository = new CursoRepository(application);
    }
    @Override
    public LiveData<List<Curso>> getAll() {
        return cursoRepository.getAll();
    }
    @Override
    public void insert(Curso curso, Runnable onCompletion) {
        cursoRepository.insert(curso, onCompletion);
    }
    @Override
    public void update(Curso curso) {
        cursoRepository.update(curso);
    }
    @Override
    public void delete(Curso curso) {
        cursoRepository.delete(curso);
    }
    public LiveData<List<Curso>> findByProfessorId(int idProfessor) {
        return cursoRepository.findByProfessorId(idProfessor);
    }
    public void deleteAll() {
        cursoRepository.deleteAll();
    }
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/ui/viewmodels/ProfessorAvaliacaoViewModel.java ---
package br.com.domenic.edtech.app.ui.viewmodels;
public class ProfessorAvaliacaoViewModel extends BaseViewModel<ProfessorAvaliacao> {
    private final ProfessorAvaliacaoRepository professorAvaliacaoRepository;
    public ProfessorAvaliacaoViewModel(@NonNull Application application) {
        super(application);
        professorAvaliacaoRepository = new ProfessorAvaliacaoRepository(application);
    }
    @Override
    public LiveData<List<ProfessorAvaliacao>> getAll() {
        return professorAvaliacaoRepository.getAll();
    }
    @Override
    public void insert(ProfessorAvaliacao professorAvaliacao, Runnable onCompletion) {
        professorAvaliacaoRepository.insert(professorAvaliacao, onCompletion);
    }
    @Override
    public void update(ProfessorAvaliacao professorAvaliacao) {
        professorAvaliacaoRepository.update(professorAvaliacao);
    }
    @Override
    public void delete(ProfessorAvaliacao professorAvaliacao) {
        professorAvaliacaoRepository.delete(professorAvaliacao);
    }
    public LiveData<Double> getRating() {
        return Transformations.map(getAll(), avaliacoes -> {
            if (avaliacoes == null || avaliacoes.isEmpty()) {
                return 0.0;
            }
            double sum = 0;
            for (ProfessorAvaliacao avaliacao : avaliacoes) {
                sum += avaliacao.getNota();
            }
            return sum / avaliacoes.size();
        });
    }
    public void deleteAll() {
        professorAvaliacaoRepository.deleteAll();
    }
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/ui/viewmodels/ProfessorViewModel.java ---
package br.com.domenic.edtech.app.ui.viewmodels;
public class ProfessorViewModel extends BaseViewModel<Professor> {
    private final ProfessorRepository professorRepository;
    public ProfessorViewModel(@NonNull Application application) {
        super(application);
        professorRepository = new ProfessorRepository(application);
    }
    @Override
    public LiveData<List<Professor>> getAll() {
        return professorRepository.getAll();
    }
    public LiveData<Professor> findByEmailAndSenha(String email, String senha) {
        return professorRepository.findByEmailAndSenha(email, senha);
    }
    @Override
    public void insert(Professor professor, Runnable onCompletion) {
        professorRepository.insert(professor, onCompletion);
    }
    @Override
    public void update(Professor professor) {
        professorRepository.update(professor);
    }
    @Override
    public void delete(Professor professor) {
        professorRepository.delete(professor);
    }
    public LiveData<Professor> findById(int idProfessor) {
        return professorRepository.findById(idProfessor);
    }
    public void deleteAll() {
        professorRepository.deleteAll();
    }
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/ui/viewmodels/base/BaseViewModel.java ---
package br.com.domenic.edtech.app.ui.viewmodels.base;
public abstract class BaseViewModel<T> extends AndroidViewModel {
    public BaseViewModel(@NonNull Application application) {
        super(application);
    }
    public abstract LiveData<List<T>> getAll();
    public abstract void insert(T entity, Runnable onCompletion);
    public abstract void update(T entity);
    public abstract void delete(T entity);
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/ui/viewmodels/factories/base/BaseFactory.java ---
package br.com.domenic.edtech.app.ui.viewmodels.factories.base;
public class BaseFactory<T extends ViewModel> implements ViewModelProvider.Factory {
    private final Application application;
    private final Class<T> viewModelClass;
    public BaseFactory(Application application, Class<T> viewModelClass) {
        this.application = application;
        this.viewModelClass = viewModelClass;
    }
    @NonNull
    @Override
    public <V extends ViewModel> V create(@NonNull Class<V> modelClass) {
        if (modelClass.isAssignableFrom(viewModelClass)) {
            try {
                Constructor<T> constructor = viewModelClass.getConstructor(Application.class);
                return (V) constructor.newInstance(application);
            } catch (Exception e) {
                throw new RuntimeException("Error creating ViewModel instance", e);
            }
        }
        throw new IllegalArgumentException("Unknown ViewModel class");
    }
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/utils/DateConverter.java ---
package br.com.domenic.edtech.app.utils;
public class DateConverter {
    @TypeConverter
    public static Long fromDate(Date date) {
        return date == null ? null : date.getTime();
    }
    @TypeConverter
    public static Date toDate(Long timestamp) {
        return timestamp == null ? null : new Date(timestamp);
    }
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/utils/SessionManager.java ---
package br.com.domenic.edtech.app.utils;
public class SessionManager {
    private static final String PREF_NAME = "EdTechSession";
    private static final String KEY_USER_TYPE = "userType";
    private static final String KEY_USER_ID = "userId";
    private SharedPreferences preferences;
    private SharedPreferences.Editor editor;
    public SessionManager(Context context) {
        preferences = context.getSharedPreferences(PREF_NAME, Context.MODE_PRIVATE);
        editor = preferences.edit();
    }
    public void saveAlunoSession(Aluno aluno) {
        editor.putString(KEY_USER_TYPE, "aluno");
        editor.putInt(KEY_USER_ID, aluno.getIdAluno());
        editor.apply();
    }
    public void saveProfessorSession(Professor professor) {
        editor.putString(KEY_USER_TYPE, "professor");
        editor.putInt(KEY_USER_ID, professor.getIdProfessor());
        editor.apply();
    }
    public String getUserType() {
        return preferences.getString(KEY_USER_TYPE, null);
    }
    public int getUserId() {
        return preferences.getInt(KEY_USER_ID, -1);
    }
    public void clearSession() {
        editor.clear();
        editor.apply();
    }
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/utils/StringUtils.java ---
package br.com.domenic.edtech.app.utils;
public class StringUtils {
    public String doubleParaBRL(double value) {
        BigDecimal bigValue = new BigDecimal(value);
        NumberFormat nf = NumberFormat.getCurrencyInstance(new Locale("pt", "BR"));
        return nf.format(bigValue);
    }
    public static String formatarData(Date date) {
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy", Locale.getDefault());
        return sdf.format(date);
    }
}


--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/utils/geradores/GeradorDados.java ---
package br.com.domenic.edtech.app.utils.geradores;
public class GeradorDados {
    private static final Random random = new Random();
    private static final Map<String, List<String>> listaCursoDescricao = new HashMap<>();
    private static final Map<String, List<String>> listaAulaDescricao = new HashMap<>();
    private static final List<String> listaLinksAula = Arrays.asList(
            "https://www.youtube.com/watch?v=UDrDg6uUOVs&list=PLdsnXVqbHDUeowsAO0sChHDY4D65T5s1U&index=2",
            "https://www.youtube.com/watch?v=0TndL-Nh6Ok&list=PLdsnXVqbHDUcTGjNZuRYCVj3AZtdt6oG7",
            "https://www.youtube.com/watch?v=gcv5hXyTcIo&list=PLdsnXVqbHDUcTGjNZuRYCVj3AZtdt6oG7&index=4",
            "https://www.youtube.com/watch?v=z9YKsZt7-ZM&list=PLI06bAnBnph1TWWdO68KaMrk0TSabGvs4",
            "https://www.youtube.com/watch?v=s3PaJTu9rtU&list=PLI06bAnBnph1TWWdO68KaMrk0TSabGvs4",
            "https://www.youtube.com/watch?v=tSGMyE9lirE&list=PLiNWW5aJmJyxUklvdL4Da1HO_ESH9c21Z",
            "https://www.youtube.com/watch?v=06e1kSSyQPg&pp=ygUYYXVsYSBlbmdlbmhhcmlhIGVsZXRyaWNh",
            "https://www.youtube.com/watch?v=kYIUzzg61jU",
            "https://www.youtube.com/watch?v=E9AnAWahYKk&pp=ygUhYXVsYSBUSSBlIEluZnJhZXN0cnV0dXJhIGRlIFJlZGVz",
            "https://www.youtube.com/watch?v=kP1kktlbUTs&pp=ygUhYXVsYSBUSSBlIEluZnJhZXN0cnV0dXJhIGRlIFJlZGVz",
            "https://www.youtube.com/watch?v=U1Sweidt0Vs",
            "https://www.youtube.com/watch?v=Xhorz6goaG4&list=PLBHvKE3Zqoe5QWQdUaJ7koxJUyShXNU20&index=2",
            "https://www.youtube.com/watch?v=yMzvYDbYWxs&pp=ygUnYXVsYSBSb2LDs3RpY2E6IFByb2dyYW1hw6fDo28gZGUgUm9iw7Rz",
            "https://www.youtube.com/watch?v=yMzvYDbYWxs&pp=ygUnYXVsYSBSb2LDs3RpY2E6IFByb2dyYW1hw6fDo28gZGUgUm9iw7Rz",
            "https://www.youtube.com/watch?v=_Dfm-FPfal0&pp=ygU4YXVsYSBDdXJzbyBkZSBkaXJlaXRvIGVtcHJlc2FyaWFsIC0gTGVnaXNsYcOnw6NvIGLDoXNpY2E%3D"
    );
    private static final List<String> listaEspecialidades = Arrays.asList(
            "Análise de Dados", "Automação Industrial", "Ciência de Dados", "Desenvolvimento de Jogos",
            "Design Gráfico", "Direito Empresarial", "Engenharia Civil", "Engenharia de Software",
            "Engenharia Elétrica", "Engenharia Mecânica", "Finanças e Contabilidade", "Gestão de Projetos",
            "Inglês", "Inteligência Artificial", "Marketing Digital", "Mecatrônica", "Negócios e Empreendedorismo",
            "Programação", "Recursos Humanos", "Redes de Computadores", "Robótica",
            "Segurança da Informação", "Tecnologia da Informação"
    );
    private static final List<String> listaNomes = Arrays.asList(
            "João", "Pedro", "Lucas", "Mateus", "Gabriel", "Rafael", "Gustavo", "Felipe", "Leonardo", "Arthur",
            "Marcos", "Thiago", "José", "Carlos", "Bruno",
            "Maria", "Ana", "Beatriz", "Camila", "Julia", "Sofia", "Isabela", "Larissa", "Fernanda", "Luana",
            "Patrícia", "Aline", "Viviane", "Renata", "Gabriela"
    );
    private static final List<String> listaSobrenomes = Arrays.asList(
            "Silva", "Santos", "Oliveira", "Souza", "Pereira", "Lima", "Carvalho", "Almeida", "Ribeiro", "Ferreira",
            "Costa", "Gomes", "Martins", "Araujo", "Mendes", "Barbosa", "Rocha", "Dias", "Teixeira", "Correia",
            "Freitas", "Vieira", "Castro", "Moreira", "Pinto", "Cardoso", "Moraes", "Barros", "Santana", "Monteiro"
    );
    static {
        listaCursoDescricao.put("Análise de Dados", Arrays.asList(
                "Curso de introdução à análise de grandes volumes de dados.",
                "Curso avançado sobre técnicas de análise e visualização de dados."
        ));
        listaCursoDescricao.put("Automação Industrial", Arrays.asList(
                "Aprenda a automatizar processos industriais usando PLCs.",
                "Curso completo sobre sistemas de controle e automação."
        ));
        listaCursoDescricao.put("Ciência de Dados", Arrays.asList(
                "Curso de fundamentos em ciência de dados e aprendizado de máquina.",
                "Aprenda a manipular e interpretar grandes volumes de dados."
        ));
        listaCursoDescricao.put("Desenvolvimento de Jogos", Arrays.asList(
                "Curso prático de criação de jogos 2D e 3D.",
                "Introdução ao desenvolvimento de jogos com Unity e Unreal."
        ));
        listaCursoDescricao.put("Design Gráfico", Arrays.asList(
                "Curso de design gráfico com foco em criação de identidade visual.",
                "Aprenda a utilizar softwares de design como Photoshop e Illustrator."
        ));
        listaCursoDescricao.put("Direito Empresarial", Arrays.asList(
                "Introdução ao direito empresarial e contratos corporativos.",
                "Curso sobre legislações empresariais e responsabilidade civil."
        ));
        listaCursoDescricao.put("Engenharia Civil", Arrays.asList(
                "Fundamentos de engenharia civil e construção de edifícios.",
                "Curso sobre gestão de obras e análise estrutural de projetos."
        ));
        listaCursoDescricao.put("Engenharia de Software", Arrays.asList(
                "Curso completo sobre desenvolvimento e arquitetura de software.",
                "Aprenda sobre metodologias ágeis e ciclo de vida de software."
        ));
        listaCursoDescricao.put("Engenharia Elétrica", Arrays.asList(
                "Curso sobre circuitos elétricos e sistemas de distribuição de energia.",
                "Fundamentos de eletricidade aplicada e eletrônica de potência."
        ));
        listaCursoDescricao.put("Engenharia Mecânica", Arrays.asList(
                "Introdução à mecânica aplicada e termodinâmica.",
                "Curso sobre projeto e análise de sistemas mecânicos."
        ));
        listaCursoDescricao.put("Finanças e Contabilidade", Arrays.asList(
                "Fundamentos de contabilidade e análise financeira.",
                "Curso sobre gestão financeira empresarial e contabilidade gerencial."
        ));
        listaCursoDescricao.put("Gestão de Projetos", Arrays.asList(
                "Curso prático de gestão de projetos com foco em metodologias ágeis.",
                "Aprenda a gerenciar projetos complexos e liderar equipes eficazmente."
        ));
        listaCursoDescricao.put("Inglês", Arrays.asList(
                "Curso de inglês básico para iniciantes.",
                "Curso de conversação avançada em inglês para negócios."
        ));
        listaCursoDescricao.put("Inteligência Artificial", Arrays.asList(
                "Introdução aos conceitos e aplicações da inteligência artificial.",
                "Curso avançado sobre redes neurais e aprendizado profundo."
        ));
        listaCursoDescricao.put("Marketing Digital", Arrays.asList(
                "Fundamentos de marketing digital e estratégias de SEO.",
                "Curso sobre campanhas de publicidade online e mídias sociais."
        ));
        listaCursoDescricao.put("Mecatrônica", Arrays.asList(
                "Curso introdutório sobre sistemas mecatrônicos e robótica.",
                "Aprenda a projetar sistemas integrados de mecânica e eletrônica."
        ));
        listaCursoDescricao.put("Negócios e Empreendedorismo", Arrays.asList(
                "Curso sobre criação e gestão de startups.",
                "Fundamentos de empreendedorismo e estratégias de negócios."
        ));
        listaCursoDescricao.put("Programação", Arrays.asList(
                "Curso de programação para iniciantes com Python.",
                "Desenvolvimento de aplicações com Java para programadores experientes."
        ));
        listaCursoDescricao.put("Recursos Humanos", Arrays.asList(
                "Fundamentos de gestão de pessoas e recursos humanos.",
                "Curso sobre recrutamento, seleção e desenvolvimento de talentos."
        ));
        listaCursoDescricao.put("Redes de Computadores", Arrays.asList(
                "Curso sobre administração de redes e protocolos de comunicação.",
                "Aprenda a configurar e gerenciar redes locais e remotas."
        ));
        listaCursoDescricao.put("Robótica", Arrays.asList(
                "Introdução à robótica e automação de sistemas.",
                "Curso avançado de controle de robôs e sensores embarcados."
        ));
        listaCursoDescricao.put("Segurança da Informação", Arrays.asList(
                "Fundamentos de segurança da informação e proteção de dados.",
                "Curso sobre criptografia e segurança em redes e sistemas."
        ));
        listaCursoDescricao.put("Tecnologia da Informação", Arrays.asList(
                "Curso de fundamentos de TI e infraestrutura de sistemas.",
                "Gestão de serviços de TI com foco em práticas ITIL e COBIT."
        ));
        listaAulaDescricao.put("Análise de Dados", Arrays.asList(
                "Aula prática de análise de dados usando ferramentas como Excel.",
                "Aula sobre conceitos básicos de visualização de dados.",
                "Introdução à análise de grandes volumes de dados.",
                "Técnicas avançadas de análise de dados com Python."
        ));
        listaAulaDescricao.put("Automação Industrial", Arrays.asList(
                "Aula prática sobre sensores em sistemas de automação.",
                "Aula sobre controle e monitoramento de processos industriais.",
                "Introdução à automação de fábricas inteligentes.",
                "Implementação de sistemas de controle PLC em indústrias."
        ));
        listaAulaDescricao.put("Ciência de Dados", Arrays.asList(
                "Introdução ao aprendizado de máquina.",
                "Aula prática sobre mineração de dados e modelos preditivos.",
                "Fundamentos de ciência de dados aplicados à indústria.",
                "Modelos estatísticos e algoritmos para análise preditiva."
        ));
        listaAulaDescricao.put("Desenvolvimento de Jogos", Arrays.asList(
                "Aula prática de criação de jogos 2D com Unity.",
                "Introdução à programação de jogos com C#.",
                "Desenvolvimento de jogos 3D usando Unreal Engine.",
                "Técnicas de animação para jogos com Blender."
        ));
        listaAulaDescricao.put("Design Gráfico", Arrays.asList(
                "Introdução ao design gráfico com Adobe Photoshop.",
                "Criação de logotipos e identidade visual.",
                "Aula prática de manipulação de imagens e edição digital.",
                "Design gráfico avançado com Illustrator e InDesign."
        ));
        listaAulaDescricao.put("Engenharia Civil", Arrays.asList(
                "Aula sobre análise estrutural de edifícios.",
                "Fundamentos de engenharia de pontes e rodovias.",
                "Introdução à gestão de obras e construção civil.",
                "Aula prática sobre fundações e terraplanagem."
        ));
        listaAulaDescricao.put("Engenharia de Software", Arrays.asList(
                "Aula sobre padrões de projeto em desenvolvimento de software.",
                "Desenvolvimento de software com metodologias ágeis.",
                "Introdução à arquitetura de microserviços.",
                "Testes de software automatizados com JUnit e Selenium."
        ));
        listaAulaDescricao.put("Inteligência Artificial", Arrays.asList(
                "Introdução à inteligência artificial e redes neurais.",
                "Aula prática de aprendizado profundo com TensorFlow.",
                "Fundamentos de redes neurais convolucionais para visão computacional.",
                "Técnicas avançadas de processamento de linguagem natural."
        ));
        listaAulaDescricao.put("Programação", Arrays.asList(
                "Introdução à programação em Python para iniciantes.",
                "Aula sobre algoritmos e estruturas de dados com Java.",
                "Desenvolvimento de aplicações web com JavaScript e Node.js.",
                "Programação orientada a objetos com C#."
        ));
        listaAulaDescricao.put("Robótica", Arrays.asList(
                "Aula prática de construção de robôs autônomos.",
                "Programação de robôs industriais com ROS.",
                "Introdução à robótica aplicada à automação de processos.",
                "Simulação de robôs em ambientes industriais."
        ));
        listaAulaDescricao.put("Segurança da Informação", Arrays.asList(
                "Aula prática de proteção de dados em redes corporativas.",
                "Introdução à criptografia e segurança em TI.",
                "Técnicas de defesa cibernética contra ataques.",
                "Análise de vulnerabilidades em sistemas e redes."
        ));
        listaAulaDescricao.put("Tecnologia da Informação", Arrays.asList(
                "Aula sobre infraestrutura de redes e servidores.",
                "Introdução à administração de sistemas Linux.",
                "Gestão de serviços de TI com ITIL e COBIT.",
                "Fundamentos de virtualização e computação em nuvem."
        ));
        listaAulaDescricao.put("Marketing Digital", Arrays.asList(
                "Aula sobre criação de campanhas de marketing no Google Ads.",
                "Introdução às estratégias de SEO para otimização de sites.",
                "Gestão de mídias sociais para empresas.",
                "Técnicas de email marketing e automação de vendas."
        ));
        listaAulaDescricao.put("Mecatrônica", Arrays.asList(
                "Introdução a sistemas mecatrônicos e robótica.",
                "Aula prática de controle de movimento em sistemas mecatrônicos.",
                "Integração de sistemas de controle com Arduino.",
                "Programação de sistemas embarcados para automação."
        ));
    }
    public static Random getRandom() {
        return random;
    }
    public static Curso gerarCurso() {
        Curso curso = new Curso();
        String nomeCurso = getNomeCursoComDescricao(curso);
        curso.setNomeCurso(nomeCurso);
        double precoCurso = 49.90 + (random.nextDouble() * (299.00 - 49.90));
        precoCurso = Math.round(precoCurso * 100.0) / 100.0;
        curso.setPrecoCurso(precoCurso);
        double precoCursoAulaParticular = 3.90 + (random.nextDouble() * (29.90 - 3.90));
        precoCursoAulaParticular = Math.round(precoCursoAulaParticular * 100.0) / 100.0;
        curso.setPrecoCursoAulaParticular(precoCursoAulaParticular);
        int duracaoHoras = 8 + random.nextInt(294);
        curso.setDuracaoHoras(duracaoHoras);
        curso.setDataCriacao(gerarDataCriacaoAleatoria());
        int popularidade = 1 + random.nextInt(100);
        curso.setPopularidade(popularidade);
        int recomendacao = 1 + random.nextInt(10);
        curso.setRecomendacao(recomendacao);
        return curso;
    }
    public static Date gerarDataCriacaoAleatoria() {
        Calendar calendar = Calendar.getInstance();
        int anoAleatorio = 2023 + random.nextInt(2); // Gera 2023 ou 2024
        int diaDoAno = random.nextInt(calendar.getActualMaximum(Calendar.DAY_OF_YEAR)); // Gera um dia aleatório no ano
        calendar.set(Calendar.YEAR, anoAleatorio);
        calendar.set(Calendar.DAY_OF_YEAR, diaDoAno);
        return calendar.getTime();
    }
    public static String getNomeCursoComDescricao(Curso curso) {
        String especialidade = listaEspecialidades.get(random.nextInt(listaEspecialidades.size()));
        List<String> descricoes = listaCursoDescricao.get(especialidade);
        String descricao = descricoes.get(random.nextInt(descricoes.size()));
        curso.setDescricao(descricao);
        return especialidade;
    }
    public static String gerarCpfAleatorio() {
        int[] cpf = new int[9];
        for (int i = 0; i < 9; i++) {
            cpf[i] = random.nextInt(10);
        }
        int digito1 = calcularDigitoCpf(cpf, 10);
        int digito2 = calcularDigitoCpf(cpf, 11);
        StringBuilder cpfGerado = new StringBuilder();
        for (int i : cpf) {
            cpfGerado.append(i);
        }
        cpfGerado.append(digito1).append(digito2);
        return cpfGerado.toString();
    }
    public static String gerarCelularAleatorio() {
        int ddd = 10 + random.nextInt(80); // Gera um DDD aleatório entre 10 e 99
        int celular = 900000000 + random.nextInt(100000000); // Gera um número de celular no formato 9XXXXXXX
        return String.valueOf(ddd) + String.valueOf(celular);
    }
    public static int calcularDigitoCpf(int[] cpf, int pesoInicial) {
        int soma = 0;
        for (int i = 0; i < cpf.length; i++) {
            soma += cpf[i] * (pesoInicial - i);
        }
        int digito = 11 - (soma % 11);
        return (digito > 9) ? 0 : digito;
    }
    public static AulaCurso gerarAulaGrupo(int idCurso) {
        AulaCurso aula = new AulaCurso();
        aula.setIdCurso(idCurso);
        String tituloAula = getTituloAulaComDescricao(aula);
        aula.setTitulo(tituloAula);
        boolean aulaOnline = random.nextBoolean();
        aula.setAulaOnline(aulaOnline);
        if (aulaOnline) {
            aula.setLinkAulaAoVivo(getLinkAula());
        }
        aula.setDataAula(gerarDataAulaAleatoria());
        return aula;
    }
    public static String getTituloAulaComDescricao(AulaCurso aula) {
        String especialidade = listaEspecialidades.get(random.nextInt(listaEspecialidades.size()));
        List<String> descricoes = listaAulaDescricao.get(especialidade);
        if (descricoes != null && !descricoes.isEmpty()) {
            String descricao = descricoes.get(random.nextInt(descricoes.size()));
            aula.setDescricao(descricao);
            return especialidade;
        } else {
            aula.setDescricao("Descrição padrão para " + especialidade);
            return "Aula de " + especialidade;
        }
    }
    public static Date gerarDataAulaAleatoria() {
        Calendar calendar = Calendar.getInstance();
        int anoAleatorio = 2023 + random.nextInt(2); // Gera um ano entre 2023 e 2024
        int diaDoAno = random.nextInt(calendar.getActualMaximum(Calendar.DAY_OF_YEAR)); // Gera um dia aleatório no ano
        calendar.set(Calendar.YEAR, anoAleatorio);
        calendar.set(Calendar.DAY_OF_YEAR, diaDoAno);
        return calendar.getTime();
    }
    public static String getLinkAula() {
        return listaLinksAula.get(random.nextInt(listaLinksAula.size()));
    }
    public static String formatarDataParaMarcacao(Date data) {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd", Locale.getDefault());
        return sdf.format(data);
    }
    private static final List<String> listaEnderecos = Arrays.asList(
            "Rua das Flores, 123", "Avenida Paulista, 1500", "Rua Augusta, 456", "Avenida Brasil, 789",
            "Rua da Consolação, 987", "Avenida Atlântica, 234", "Rua XV de Novembro, 111", "Avenida Rio Branco, 222"
    );
    private static final List<String> listaFotos = Arrays.asList(
            "https://example.com/imagem1.jpg", "https://example.com/imagem2.jpg", "https://example.com/imagem3.jpg",
            "https://example.com/imagem4.jpg", "https://example.com/imagem5.jpg"
    );
    private static final List<String> listaBios = Arrays.asList(
            "Professor com mais de 10 anos de experiência na área.",
            "Especialista em ensino de métodos avançados.",
            "Apaixonado por compartilhar conhecimento.",
            "Dedicado ao desenvolvimento pessoal dos alunos.",
            "Especialista em projetos de inovação."
    );
    private static final List<String> dominiosEmail = Arrays.asList(
            "example.com", "email.com", "edu.com", "professor.com", "school.com"
    );
    public static String gerarEnderecoAleatorio() {
        return listaEnderecos.get(random.nextInt(listaEnderecos.size()));
    }
    public static String gerarFotoAleatoria() {
        return listaFotos.get(random.nextInt(listaFotos.size()));
    }
    public static String gerarBioAleatoria() {
        return listaBios.get(random.nextInt(listaBios.size()));
    }
    public static String gerarEmailAleatorio() {
        String nome = gerarNomeAleatorio().toLowerCase().replaceAll(" ", ".");
        String dominio = dominiosEmail.get(random.nextInt(dominiosEmail.size()));
        return nome + "@" + dominio;
    }
    public static String gerarEspecialidadeAleatoria() {
        return listaEspecialidades.get(random.nextInt(listaEspecialidades.size()));
    }
    public static Date gerarDataAleatoria() {
        Calendar calendar = Calendar.getInstance();
        int anoAleatorio = 1990 + random.nextInt(30); // Gera ano entre 1990 e 2020
        int diaDoAno = random.nextInt(calendar.getActualMaximum(Calendar.DAY_OF_YEAR)); // Gera um dia aleatório
        calendar.set(Calendar.YEAR, anoAleatorio);
        calendar.set(Calendar.DAY_OF_YEAR, diaDoAno);
        return calendar.getTime();
    }
    public static Date gerarDataConclusaoAleatoria() {
        Calendar calendar = Calendar.getInstance();
        calendar.add(Calendar.MONTH, 6); // Conclusão em 6 meses
        return calendar.getTime();
    }
    public static String gerarNomeAleatorio() {
        String nome = listaNomes.get(random.nextInt(listaNomes.size()));
        String sobrenome = listaSobrenomes.get(random.nextInt(listaSobrenomes.size()));
        return nome + " " + sobrenome;
    }
    public static String gerarDescricaoAleatoria(String especialidade) {
        List<String> descricoes = listaAulaDescricao.get(especialidade);
        if (descricoes != null && !descricoes.isEmpty()) {
            return descricoes.get(random.nextInt(descricoes.size()));
        }
        return "Descrição padrão para " + especialidade;
    }
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/utils/geradores/GerarAluno.java ---
package br.com.domenic.edtech.app.utils.geradores;
public class GerarAluno {
    public static Aluno gerarAluno(int contadorAluno) {
        Aluno aluno = new Aluno();
        aluno.setNomeCompleto(GeradorDados.gerarNomeAleatorio());
        aluno.setDataNascimento(GeradorDados.gerarDataAleatoria());
        aluno.setCelular(GeradorDados.gerarCelularAleatorio());
        aluno.setEndereco(GeradorDados.gerarEnderecoAleatorio());
        aluno.setCpf(GeradorDados.gerarCpfAleatorio());
        aluno.setFotoPerfil(GeradorDados.gerarFotoAleatoria());
        aluno.setEmail("aluno" + contadorAluno + "@gmail.com");
        aluno.setSenha("1234");
        aluno.setDataCadastro(new Date());
        return aluno;
    }
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/utils/geradores/GerarAlunoCurso.java ---
package br.com.domenic.edtech.app.utils.geradores;
public class GerarAlunoCurso {
    public static AlunoCurso gerarAlunoCurso(int idAluno, int idCurso) {
        AlunoCurso alunoCurso = new AlunoCurso();
        alunoCurso.setIdAluno(idAluno);
        alunoCurso.setIdCurso(idCurso);
        alunoCurso.setDataMatricula(new Date());
        alunoCurso.setDataConclusao(GeradorDados.gerarDataConclusaoAleatoria());
        alunoCurso.setStatus("Iniciado");
        alunoCurso.setQtdCursoAulaParticular(0);
        alunoCurso.setNotaFinal(0.0);
        alunoCurso.setComentarios("");
        return alunoCurso;
    }
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/utils/geradores/GerarAulaCurso.java ---
package br.com.domenic.edtech.app.utils.geradores;
public class GerarAulaCurso {
    public static AulaCurso gerarAulaCurso(int idCurso, int idProfessor) {
        AulaCurso aulaCurso = new AulaCurso();
        aulaCurso.setIdCurso(idCurso);
        aulaCurso.setIdProfessor(idProfessor);
        aulaCurso.setAulaParticular(GeradorDados.getRandom().nextBoolean());
        aulaCurso.setAulaOnline(GeradorDados.getRandom().nextBoolean());
        String especialidade = GeradorDados.gerarEspecialidadeAleatoria();
        aulaCurso.setTitulo("Aula de " + especialidade);
        aulaCurso.setDescricao("Descrição de aula " + GeradorDados.gerarDescricaoAleatoria(especialidade));
        aulaCurso.setDataAula(GeradorDados.gerarDataAleatoria());
        aulaCurso.setLinkAulaAoVivo(GeradorDados.getLinkAula());
        return aulaCurso;
    }
}


--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/utils/geradores/GerarCurso.java ---
package br.com.domenic.edtech.app.utils.geradores;
public class GerarCurso {
    public static Curso gerarCurso(int idProfessor) {
        Curso curso = GeradorDados.gerarCurso();
        curso.setIdProfessor(idProfessor);
        return curso;
    }
    public static Curso gerarCursoAleatorio() {
        return GeradorDados.gerarCurso();
    }
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/utils/geradores/GerarMassa.java ---
package br.com.domenic.edtech.app.utils.geradores;
public class GerarMassa {
    private final ProfessorViewModel professorViewModel;
    private final CursoViewModel cursoViewModel;
    private final AulaCursoViewModel aulaCursoViewModel;
    private final AlunoViewModel alunoViewModel;
    private final AlunoCursoViewModel alunoCursoViewModel;
    private final Executor executor = Executors.newSingleThreadExecutor();
    private int contadorProfessor;
    private int contadorAluno;
    private final AppCompatActivity activity;
    public GerarMassa(ProfessorViewModel professorViewModel, CursoViewModel cursoViewModel,
                      AulaCursoViewModel aulaCursoViewModel, AlunoViewModel alunoViewModel,
                      AlunoCursoViewModel alunoCursoViewModel, AppCompatActivity activity) {
        this.professorViewModel = professorViewModel;
        this.cursoViewModel = cursoViewModel;
        this.aulaCursoViewModel = aulaCursoViewModel;
        this.alunoViewModel = alunoViewModel;
        this.alunoCursoViewModel = alunoCursoViewModel;
        this.activity = activity;
        initContadores();
    }
    private void initContadores() {
        activity.runOnUiThread(() -> {
            professorViewModel.getAll().observe(activity, professores -> contadorProfessor = professores != null ? professores.size() : 0);
            alunoViewModel.getAll().observe(activity, alunos -> contadorAluno = alunos != null ? alunos.size() : 0);
        });
    }
    public void gerarProfessorComCursoEAula(int qtdProfessores, int qtdCursoParaCadaProfessor, int qtdAulaParaCadaCurso) {
        executor.execute(() -> {
            for (int i = 0; i < qtdProfessores; i++) {
                Professor professor = GerarProfessor.gerarProfessor(++contadorProfessor);
                professorViewModel.insert(professor, () -> activity.runOnUiThread(() -> buscarProfessor(professor, qtdCursoParaCadaProfessor, qtdAulaParaCadaCurso)));
            }
        });
    }
    private void buscarProfessor(Professor professor, int qtdCursoParaCadaProfessor, int qtdAulaParaCadaCurso) {
        LiveData<List<Professor>> professorLiveData = professorViewModel.getAll();
        professorLiveData.observe(activity, professores -> {
            professorLiveData.removeObservers(activity);
            Professor professorInserido = professores.stream()
                    .filter(p -> p.getNomeCompleto().equals(professor.getNomeCompleto()))
                    .findFirst().orElse(null);
            if (professorInserido != null) {
                gerarCursosParaProfessor(professorInserido.getIdProfessor(), qtdCursoParaCadaProfessor, qtdAulaParaCadaCurso);
            }
        });
    }
    private void gerarCursosParaProfessor(int idProfessor, int qtdCursoParaCadaProfessor, int qtdAulaParaCadaCurso) {
        for (int j = 0; j < qtdCursoParaCadaProfessor; j++) {
            Curso curso = GerarCurso.gerarCurso(idProfessor);
            cursoViewModel.insert(curso, () -> activity.runOnUiThread(() -> buscarCurso(curso, idProfessor, qtdAulaParaCadaCurso)));
        }
    }
    private void buscarCurso(Curso curso, int idProfessor, int qtdAulaParaCadaCurso) {
        LiveData<List<Curso>> cursoLiveData = cursoViewModel.getAll();
        cursoLiveData.observe(activity, cursos -> {
            cursoLiveData.removeObservers(activity);
            Curso cursoInserido = cursos.stream()
                    .filter(c -> c.getIdProfessor() == idProfessor && c.getNomeCurso().equals(curso.getNomeCurso()))
                    .findFirst().orElse(null);
            if (cursoInserido != null) {
                gerarAulasParaCurso(cursoInserido.getIdCurso(), idProfessor, qtdAulaParaCadaCurso);
            }
        });
    }
    private void gerarAulasParaCurso(int idCurso, int idProfessor, int qtdAulaParaCadaCurso) {
        for (int k = 0; k < qtdAulaParaCadaCurso; k++) {
            AulaCurso aulaCurso = GerarAulaCurso.gerarAulaCurso(idCurso, idProfessor);
            aulaCursoViewModel.insert(aulaCurso, () -> Log.d("GerarMassa", "Aula cadastrada com sucesso: Curso ID " + idCurso));
        }
    }
    public void gerarAlunoComCurso(int qtdAlunos, int qtdCursoParaCadaAluno) {
        executor.execute(() -> {
            for (int i = 0; i < qtdAlunos; i++) {
                Aluno aluno = GerarAluno.gerarAluno(++contadorAluno);
                alunoViewModel.insert(aluno, () -> activity.runOnUiThread(() -> buscarAluno(aluno, qtdCursoParaCadaAluno)));
            }
        });
    }
    private void buscarAluno(Aluno aluno, int qtdCursoParaCadaAluno) {
        LiveData<List<Aluno>> alunoLiveData = alunoViewModel.getAll();
        alunoLiveData.observe(activity, alunos -> {
            alunoLiveData.removeObservers(activity);
            Aluno alunoInserido = alunos.stream()
                    .filter(a -> a.getNomeCompleto().equals(aluno.getNomeCompleto()))
                    .findFirst().orElse(null);
            if (alunoInserido != null) {
                gerarCursosParaAluno(alunoInserido.getIdAluno(), qtdCursoParaCadaAluno);
            }
        });
    }
    private void gerarCursosParaAluno(int idAluno, int qtdCursoParaCadaAluno) {
        cursoViewModel.getAll().observe(activity, cursosExistentes -> {
            if (cursosExistentes != null && !cursosExistentes.isEmpty()) {
                for (int j = 0; j < qtdCursoParaCadaAluno; j++) {
                    Curso cursoAleatorio = cursosExistentes.get(new Random().nextInt(cursosExistentes.size()));
                    gerarAlunoCurso(idAluno, cursoAleatorio.getIdCurso());
                }
            } else {
                Log.e("GerarMassa", "Nenhum curso disponível na base de dados.");
            }
        });
    }
    private void gerarAlunoCurso(int idAluno, int idCurso) {
        AlunoCurso alunoCurso = GerarAlunoCurso.gerarAlunoCurso(idAluno, idCurso);
        alunoCursoViewModel.insert(alunoCurso, () -> Log.d("GerarMassa", "Curso associado ao aluno com sucesso: Curso ID " + idCurso));
    }
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/java/br/com/domenic/edtech/app/utils/geradores/GerarProfessor.java ---
package br.com.domenic.edtech.app.utils.geradores;
public class GerarProfessor {
    public static Professor gerarProfessor(int contadorProfessor) {
        Professor professor = new Professor();
        professor.setNomeCompleto(GeradorDados.gerarNomeAleatorio());
        professor.setDataNascimento(GeradorDados.gerarDataAleatoria());
        professor.setCelular(GeradorDados.gerarCelularAleatorio());
        professor.setEndereco(GeradorDados.gerarEnderecoAleatorio());
        professor.setCpf(GeradorDados.gerarCpfAleatorio());
        professor.setBio(GeradorDados.gerarBioAleatoria());
        professor.setFotoPerfil(GeradorDados.gerarFotoAleatoria());
        professor.setEmail("professor" + contadorProfessor + "@gmail.com");
        professor.setSenha("1234");
        professor.setDataCadastro(new Date());
        professor.setEspecialidade(GeradorDados.gerarEspecialidadeAleatoria());
        return professor;
    }
}

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/res/layout/activity_cadastro.xml ---
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".ui.CadastroActivity">
    <!-- Toolbar para o menu superior -->
    <androidx.appcompat.widget.Toolbar
        android:id="@+id/toolbar"
        android:layout_width="match_parent"
        android:layout_height="?attr/actionBarSize"
        android:background="?attr/colorPrimary"
        app:navigationIcon="@drawable/baseline_arrow_back_ios_24"
        app:layout_constraintTop_toTopOf="parent">
        <!-- TextView para centralizar o texto -->
        <TextView
            android:id="@+id/toolbar_title"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_gravity="center"
            android:text="Cadastro"
            android:textColor="?attr/colorOnPrimary"
            android:textSize="24sp"
            android:textStyle="bold" />
    </androidx.appcompat.widget.Toolbar>
    <!-- LinearLayout para centralizar todas as views -->
    <LinearLayout
        android:layout_marginTop="16dp"
        android:id="@+id/linearLayoutContent"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        android:gravity="center"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent">
        <!-- Título "Cadastro" -->
        <TextView
            android:id="@+id/tvTituloCadastro"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Preencha os campos"
            android:textSize="18sp"
            android:textStyle="bold"
            android:gravity="start" />
        <!-- Nome Completo Input Layout -->
        <com.google.android.material.textfield.TextInputLayout
            android:id="@+id/tiNomeCompleto"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:hint="Nome Completo"
            app:boxStrokeColor="@color/md_theme_primary"
            app:boxStrokeWidth="2dp"
            android:layout_marginTop="24dp"
            android:layout_marginStart="32dp"
            android:layout_marginEnd="32dp">
            <com.google.android.material.textfield.TextInputEditText
                android:layout_width="match_parent"
                android:layout_height="wrap_content" />
        </com.google.android.material.textfield.TextInputLayout>
        <!-- Email Input Layout -->
        <com.google.android.material.textfield.TextInputLayout
            android:id="@+id/tiEmailCadastro"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:hint="Email"
            app:boxStrokeColor="@color/md_theme_primary"
            app:boxStrokeWidth="2dp"
            android:layout_marginTop="16dp"
            android:layout_marginStart="32dp"
            android:layout_marginEnd="32dp">
            <com.google.android.material.textfield.TextInputEditText
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:inputType="textEmailAddress" />
        </com.google.android.material.textfield.TextInputLayout>
        <!-- Senha Input Layout -->
        <com.google.android.material.textfield.TextInputLayout
            android:id="@+id/tiSenhaCadastro"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:hint="Senha"
            app:boxStrokeColor="@color/md_theme_primary"
            app:boxStrokeWidth="2dp"
            android:layout_marginTop="16dp"
            android:layout_marginStart="32dp"
            android:layout_marginEnd="32dp">
            <com.google.android.material.textfield.TextInputEditText
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:inputType="textPassword" />
        </com.google.android.material.textfield.TextInputLayout>
        <!-- Confirmar Senha Input Layout -->
        <com.google.android.material.textfield.TextInputLayout
            android:id="@+id/tiConfirmarSenha"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:hint="Confirmar Senha"
            app:boxStrokeColor="@color/md_theme_primary"
            app:boxStrokeWidth="2dp"
            android:layout_marginTop="16dp"
            android:layout_marginStart="32dp"
            android:layout_marginEnd="32dp">
            <com.google.android.material.textfield.TextInputEditText
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:inputType="textPassword" />
        </com.google.android.material.textfield.TextInputLayout>
        <!-- CPF Input Layout -->
        <com.google.android.material.textfield.TextInputLayout
            android:id="@+id/tiCPF"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:hint="CPF"
            app:boxStrokeColor="@color/md_theme_primary"
            app:boxStrokeWidth="2dp"
            android:layout_marginTop="16dp"
            android:layout_marginStart="32dp"
            android:layout_marginEnd="32dp">
            <com.google.android.material.textfield.TextInputEditText
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:inputType="number" />
        </com.google.android.material.textfield.TextInputLayout>
        <!-- Celular Input Layout -->
        <com.google.android.material.textfield.TextInputLayout
            android:id="@+id/tiCelular"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:hint="Celular"
            app:boxStrokeColor="@color/md_theme_primary"
            app:boxStrokeWidth="2dp"
            android:layout_marginTop="16dp"
            android:layout_marginStart="32dp"
            android:layout_marginEnd="32dp">
            <com.google.android.material.textfield.TextInputEditText
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:inputType="phone" />
        </com.google.android.material.textfield.TextInputLayout>
        <com.google.android.material.textfield.TextInputLayout
            android:id="@+id/tiEspecialidade"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:hint="Especialidade"
            android:layout_marginTop="16dp"
            android:layout_marginStart="32dp"
            android:layout_marginEnd="32dp"
            android:visibility="gone">
            <Spinner
                android:id="@+id/spinnerEspecialidade"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:entries="@array/especialidades_options"/>
        </com.google.android.material.textfield.TextInputLayout>
        <!-- Perfil RadioGroup -->
        <RadioGroup
            android:id="@+id/rgPerfil"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="horizontal"
            android:layout_marginTop="16dp"
            android:layout_marginStart="32dp"
            android:layout_marginEnd="32dp">
            <RadioButton
                android:id="@+id/rbAluno"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="Aluno"
                android:checked="true" />
            <RadioButton
                android:id="@+id/rbProfessor"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="Professor" />
        </RadioGroup>
        <!-- Botão de Cadastrar -->
        <com.google.android.material.button.MaterialButton
            android:id="@+id/btnCadastrar"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:text="Cadastrar"
            android:textColor="@android:color/white"
            android:backgroundTint="@color/md_theme_primary"
            android:layout_marginTop="24dp"
            android:layout_marginStart="32dp"
            android:layout_marginEnd="32dp" />
    </LinearLayout>
</androidx.constraintlayout.widget.ConstraintLayout>


--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/res/layout/activity_gerar_massa.xml ---
<com.google.android.material.card.MaterialCardView
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:layout_margin="16dp"
    app:cardElevation="4dp"
    app:cardCornerRadius="8dp">
    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        android:padding="16dp">
        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Gerar Massa"
            android:layout_gravity="center"
            android:textSize="18sp"
            android:textStyle="bold" />
        <!-- Espaçamento -->
        <Space
            android:layout_width="300dp"
            android:layout_height="0dp" />
        <!-- Botões de ação -->
        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="horizontal"
            android:layout_marginTop="16dp">
            <!-- Botão Inscrever-se -->
            <!-- Espaço entre os botões -->
            <com.google.android.material.button.MaterialButton
                android:id="@+id/btnGerarMassa"
                android:layout_width="0dp"
                android:layout_height="match_parent"
                android:layout_weight="1"
                android:text="Gerar" />
            <Space
                android:layout_width="10dp"
                android:layout_height="match_parent" />
            <!-- Botão Cancelar -->
            <com.google.android.material.button.MaterialButton
                android:id="@+id/btnDeletarMassa"
                android:layout_width="0dp"
                android:layout_height="match_parent"
                android:layout_weight="1"
                app:backgroundTint="@color/md_theme_error"
                android:text="Deletar" />
            <Space
                android:layout_width="10dp"
                android:layout_height="match_parent" />
            <!-- Botão Cancelar -->
            <com.google.android.material.button.MaterialButton
                android:id="@+id/btnCancelar"
                android:layout_width="5dp"
                android:layout_height="match_parent"
                android:layout_weight="1"
                app:backgroundTint="@color/md_theme_secondary"
                android:text="Cancelar" />
        </LinearLayout>
    </LinearLayout>
</com.google.android.material.card.MaterialCardView>

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/res/layout/activity_login.xml ---
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".ui.LoginActivity">
    <!-- LinearLayout para centralizar todas as views -->
    <LinearLayout
        android:id="@+id/linearLayoutContent"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        android:gravity="center"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent">
        <!-- Título "Domenic Edtech" -->
        <TextView
            android:id="@+id/tvTitulo"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Domenic Edtech"
            android:textSize="24sp"
            android:textStyle="bold"
            android:textColor="@color/md_theme_primary"
            android:layout_marginTop="32dp"
            android:gravity="center" />
        <!-- Subtítulo "Já possui conta? Entre" -->
        <TextView
            android:id="@+id/tvSubtitulo"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Já possui conta?\nEntre"
            android:textSize="16sp"
            android:textColor="@android:color/black"
            android:layout_marginTop="48dp"
            android:gravity="center" />
        <!-- Email Input Layout -->
        <com.google.android.material.textfield.TextInputLayout
            android:id="@+id/tiEmail"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:hint="Email"
            app:boxStrokeColor="@color/md_theme_primary"
            app:boxStrokeWidth="2dp"
            android:layout_marginTop="24dp"
            android:layout_marginStart="32dp"
            android:layout_marginEnd="32dp">
            <com.google.android.material.textfield.TextInputEditText
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:inputType="textEmailAddress"
                android:textColor="@android:color/black" />
        </com.google.android.material.textfield.TextInputLayout>
        <!-- Password Input Layout -->
        <com.google.android.material.textfield.TextInputLayout
            android:id="@+id/tiSenha"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:hint="Senha"
            app:boxStrokeColor="@color/md_theme_primary"
            app:boxStrokeWidth="2dp"
            android:layout_marginTop="16dp"
            android:layout_marginStart="32dp"
            android:layout_marginEnd="32dp">
            <com.google.android.material.textfield.TextInputEditText
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:inputType="textPassword"
                android:textColor="@android:color/black" />
        </com.google.android.material.textfield.TextInputLayout>
        <!-- Login Button -->
        <com.google.android.material.button.MaterialButton
            android:id="@+id/btnLogin"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:text="Login"
            android:textColor="@android:color/white"
            android:backgroundTint="@color/md_theme_primary"
            android:layout_marginTop="24dp"
            android:layout_marginStart="32dp"
            android:layout_marginEnd="32dp" />
        <!-- Subtitle for "Nao possui cadastro?" -->
        <TextView
            android:id="@+id/tvSubtitleNaoPossuiCadastro"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Não possui cadastro?"
            android:textColor="@color/md_theme_primary"
            android:textStyle="bold"
            android:layout_marginTop="24dp"
            android:gravity="center" />
    </LinearLayout>
</androidx.constraintlayout.widget.ConstraintLayout>

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/res/layout/activity_main_aluno.xml ---
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".ui.MainActivityAluno">
    <FrameLayout
        android:id="@+id/flMainContentAluno"
        android:layout_width="0dp"
        android:layout_height="0dp"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent" >
        <com.google.android.material.bottomnavigation.BottomNavigationView
            android:id="@+id/bottomNavigationAluno"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_gravity="bottom"
            android:background="?android:attr/windowBackground"
            app:menu="@menu/bottom_nav_menu_aluno" />
    </FrameLayout>
</androidx.constraintlayout.widget.ConstraintLayout>

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/res/layout/activity_main_professor.xml ---
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".ui.MainActivityProfessor">
    <FrameLayout
        android:id="@+id/flMainContentProfessor"
        android:layout_width="0dp"
        android:layout_height="0dp"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent" />
    <com.google.android.material.bottomnavigation.BottomNavigationView
        android:id="@+id/bottomNavigationProfessor"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_gravity="bottom"
        android:background="?android:attr/windowBackground"
        app:menu="@menu/bottom_nav_menu_professor"
        app:layout_constraintBottom_toBottomOf="parent" />
</androidx.constraintlayout.widget.ConstraintLayout>


--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/res/layout/calendar_aulas.xml ---
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp">
    <CalendarView
        android:id="@+id/calendarViewAulas"
        android:layout_width="match_parent"
        android:layout_height="wrap_content" />
    <androidx.recyclerview.widget.RecyclerView
        android:id="@+id/recyclerViewAulas"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:layout_marginTop="16dp" />
</LinearLayout>

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/res/layout/card_aluno.xml ---
<?xml version="1.0" encoding="utf-8"?>
<androidx.cardview.widget.CardView
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:layout_margin="8dp"
    app:cardElevation="4dp"
    app:cardCornerRadius="8dp">
    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        android:padding="16dp">
        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="horizontal">
            <ImageView
                android:id="@+id/ivAlunoFoto"
                android:layout_width="64dp"
                android:layout_height="64dp"
                android:src="@drawable/baseline_image_24"
                android:contentDescription="Foto do Aluno" />
            <LinearLayout
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:layout_weight="1"
                android:orientation="vertical"
                android:paddingStart="16dp">
                <TextView
                    android:id="@+id/tvNomeAluno"
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:text="Nome do Aluno"
                    android:textSize="16sp"
                    android:textStyle="bold" />
                <TextView
                    android:id="@+id/tvEmailAluno"
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:text="email@aluno.com" />
            </LinearLayout>
        </LinearLayout>
    </LinearLayout>
</androidx.cardview.widget.CardView>

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/res/layout/card_aula.xml ---
<?xml version="1.0" encoding="utf-8"?>
<androidx.cardview.widget.CardView
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:layout_margin="8dp"
    app:cardCornerRadius="8dp"
    app:cardElevation="4dp">
    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        android:padding="16dp">
        <TextView
            android:id="@+id/tvNomeAula"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Nome da Aula"
            android:textAppearance="?android:attr/textAppearanceMedium" />
        <TextView
            android:id="@+id/tvDataAula"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Data da Aula"
            android:textAppearance="?android:attr/textAppearanceSmall"
            android:layout_marginTop="8dp"/>
        <TextView
            android:id="@+id/tvModalidadeAula"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Tipo de Aula"
            android:textAppearance="?android:attr/textAppearanceSmall"
            android:layout_marginTop="8dp"/>
    </LinearLayout>
</androidx.cardview.widget.CardView>

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/res/layout/card_avaliacao_professor.xml ---
<androidx.cardview.widget.CardView
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:layout_margin="8dp"
    android:clickable="true"
    android:focusable="true"
    app:cardBackgroundColor="@color/md_theme_surface_mediumContrast"
    app:cardCornerRadius="4dp"
    app:cardElevation="4dp">
    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        android:padding="16dp">
        <RatingBar
            android:id="@+id/ratingBarAvaliacao"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:isIndicator="true"
            android:numStars="5"
            android:stepSize="0.5" />
        <TextView
            android:id="@+id/textComentario"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Comentário do Aluno"
            android:textSize="14sp"
            android:layout_marginTop="8dp" />
    </LinearLayout>
</androidx.cardview.widget.CardView>

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/res/layout/card_curso_com_nota.xml ---
<com.google.android.material.card.MaterialCardView
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:layout_margin="8dp">
    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        android:padding="16dp">
        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="horizontal">
            <ImageView
                android:id="@+id/tvTxtCursoAvaliacao"
                android:layout_width="150dp"
                android:layout_height="150dp"
                android:layout_weight="1"
                android:src="@drawable/baseline_image_24"
                android:text="Avaliação"
                android:gravity="center_vertical|center"
                android:textSize="18sp"
                android:textStyle="bold"/>
            <LinearLayout
                android:layout_width="wrap_content"
                android:layout_height="match_parent"
                android:orientation="vertical">
                <RatingBar
                    style="?android:attr/ratingBarStyleIndicator"
                    android:id="@+id/ratingCurso"
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:layout_gravity=""
                    android:numStars="5"
                    android:stepSize="1"/>
                <TextView
                    android:layout_marginTop="8dp"
                    android:id="@+id/tvCursoDescricao"
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:gravity="start"
                    android:text="Descricão do meu curso"
                    android:textSize="16sp" />
            </LinearLayout>
        </LinearLayout>
        <LinearLayout
            android:layout_marginTop="8dp"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="horizontal">
            <TextView
                android:id="@+id/tvTxCursoNome"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:layout_weight="1"
                android:text="Nome Curso"
                android:textSize="16sp"
                android:textStyle="bold"/>
            <TextView
                android:id="@+id/tvCursoNome"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:layout_weight="2"
                android:gravity="end"
                android:text="Nome do meu Curso"
                android:textSize="16sp" />
        </LinearLayout>
        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="horizontal">
            <TextView
                android:id="@+id/tvTxtCursoPreco"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:layout_weight="2"
                android:text="Preço Curso"
                android:textSize="16sp"
                android:textStyle="bold"/>
            <TextView
                android:id="@+id/tvCursoPreco"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:layout_weight="1"
                android:gravity="end"
                android:text="R$ 180,00"
                android:textSize="16sp" />
        </LinearLayout>
        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="horizontal">
            <TextView
                android:id="@+id/tvTxtCursoPrecoAulaParticular"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:layout_weight="2"
                android:text="Preço Aula Particular"
                android:textSize="16sp"
                android:textStyle="bold"/>
            <TextView
                android:id="@+id/tvCursoPrecoAulaParticular"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:layout_weight="1"
                android:gravity="end"
                android:text="R$ 29,90"
                android:textSize="16sp" />
        </LinearLayout>
    </LinearLayout>
</com.google.android.material.card.MaterialCardView>

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/res/layout/card_professor_com_nota.xml ---
<androidx.cardview.widget.CardView
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:layout_margin="8dp"
    app:cardElevation="4dp"
    app:cardCornerRadius="8dp">
    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        android:padding="16dp">
        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="horizontal">
            <ImageView
                android:id="@+id/ivProfessorFoto"
                android:layout_width="100dp"
                android:layout_height="100dp"
                android:src="@drawable/baseline_image_24"
                android:contentDescription="Foto do Professor" />
            <LinearLayout
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:layout_weight="1"
                android:orientation="vertical"
                android:paddingStart="16dp">
                <TextView
                    android:id="@+id/tvProfessorNome"
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:text="Nome do Professor"
                    android:textSize="16sp"
                    android:textStyle="bold" />
                <TextView
                    android:id="@+id/tvProfessorEspecialidade"
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:text="Especialidade do Professor" />
                <RatingBar
                    style="?android:attr/ratingBarStyleIndicator"
                    android:id="@+id/ratingProfessor"
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:numStars="5"
                    android:stepSize="0.5"
                    android:isIndicator="true"
                />
                <TextView
                    android:id="@+id/tvProfessorEmail"
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:text="email@professor.com" />
            </LinearLayout>
        </LinearLayout>
    </LinearLayout>
</androidx.cardview.widget.CardView>

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/res/layout/card_professor_com_nota_aluno.xml ---
<androidx.cardview.widget.CardView
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="200dp"
    android:layout_height="wrap_content"
    android:layout_margin="8dp"
    app:cardElevation="4dp"
    app:cardCornerRadius="8dp">
    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        android:padding="4dp">
        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:gravity="center"
            android:orientation="horizontal">
            <ImageView
                android:id="@+id/ivProfessorFoto"
                android:layout_width="50dp"
                android:layout_height="50dp"
                android:src="@drawable/baseline_image_24"
                android:contentDescription="Foto do Professor" />
        </LinearLayout>
        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="horizontal">
            <LinearLayout
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:layout_weight="1"
                android:orientation="vertical"
                android:paddingStart="16dp">
                <TextView
                    android:id="@+id/tvProfessorNome"
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:text="Nome do Professor"
                    android:textSize="16sp"
                    android:textStyle="bold" />
                <TextView
                    android:id="@+id/tvProfessorEspecialidade"
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:text="Especialidade do Professor" />
                <RatingBar
                    style="?android:attr/ratingBarStyleSmall"
                    android:id="@+id/ratingProfessor"
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:numStars="5"
                    android:stepSize="0.5"
                    android:isIndicator="true"
                    />
            </LinearLayout>
        </LinearLayout>
    </LinearLayout>
</androidx.cardview.widget.CardView>

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/res/layout/fragment_home_aluno.xml ---
<ScrollView
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:padding="16dp">
    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical">
        <!-- Professores -->
        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Professores >"
            android:textStyle="bold"
            android:textSize="18sp"
            android:paddingBottom="8dp"/>
        <androidx.recyclerview.widget.RecyclerView
            android:id="@+id/recyclerViewCardsProfessores"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="horizontal"/>
        <!-- Cursos Novidades -->
        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Novidades >"
            android:textStyle="bold"
            android:textSize="18sp"
            android:paddingTop="16dp"
            android:paddingBottom="8dp"/>
        <androidx.recyclerview.widget.RecyclerView
            android:id="@+id/recyclerViewCardsCursosNovidades"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="horizontal"/>
        <!-- Cursos Destaques -->
        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Destaques >"
            android:textStyle="bold"
            android:textSize="18sp"
            android:paddingTop="16dp"
            android:paddingBottom="8dp"/>
        <androidx.recyclerview.widget.RecyclerView
            android:id="@+id/recyclerViewCardsCursosDestaques"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="horizontal"/>
        <!-- Cursos Para Você -->
        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Para Você >"
            android:textStyle="bold"
            android:textSize="18sp"
            android:paddingTop="16dp"
            android:paddingBottom="8dp"/>
        <androidx.recyclerview.widget.RecyclerView
            android:id="@+id/recyclerViewCardsCursosParaVoce"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="horizontal"/>
    </LinearLayout>
</ScrollView>

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/res/layout/fragment_home_professor.xml ---
<ScrollView
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:padding="16dp">
    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical">
        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="horizontal"
            android:paddingBottom="16dp">
            <TextView
                android:id="@+id/tvHomeProfessor"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="Olá professor !"
                android:textSize="18sp"
                android:gravity="center" />
        </LinearLayout>
        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Sua avaliação >"
            android:textSize="18sp"
            android:textStyle="bold"
            android:paddingBottom="16dp"/>
        <include
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            layout="@layout/card_professor_com_nota"/>
    </LinearLayout>
</ScrollView>

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/res/layout/fragment_meus_cursos_aluno.xml ---
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp">
    <TextView
        android:id="@+id/tvMeusCursos"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Meus Cursos"
        android:textStyle="bold"
        android:textSize="18sp"
        android:paddingBottom="16dp"/>
    <androidx.recyclerview.widget.RecyclerView
        android:id="@+id/recyclerViewMeusCursos"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"/>
</LinearLayout>

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/res/layout/fragment_meus_cursos_professor.xml ---
<androidx.coordinatorlayout.widget.CoordinatorLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".ui.fragments.professor.MeusCursosProfessorFragment">
    <!-- Conteúdo principal -->
    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:orientation="vertical">
        <!-- Título -->
        <TextView
            android:id="@+id/tvTitulo"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Meus Cursos"
            android:textStyle="bold"
            android:textSize="18sp"
            android:padding="16dp"
            android:layout_gravity="center_horizontal" />
        <!-- RecyclerView para exibir cursos -->
        <androidx.recyclerview.widget.RecyclerView
            android:id="@+id/recyclerViewMeusCursos"
            android:layout_width="match_parent"
            android:layout_height="0dp"
            android:layout_weight="1" />
    </LinearLayout>
    <!-- Floating Action Button para adicionar curso -->
    <com.google.android.material.floatingactionbutton.FloatingActionButton
        android:id="@+id/fabAddCurso"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginBottom="80dp"
        android:src="@drawable/baseline_add_24"
        app:backgroundTint="@color/md_theme_primary"
        android:layout_gravity="center|bottom" />
</androidx.coordinatorlayout.widget.CoordinatorLayout>


--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/res/layout/fragment_meu_perfil.xml ---
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:gravity="center"
    android:padding="16dp">
    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Meu Perfil"
        android:textStyle="bold"
        android:textSize="18sp"
        android:paddingBottom="16dp"/>
    <ImageView
        android:layout_width="200dp"
        android:layout_height="200dp"
        android:src="@drawable/baseline_image_24"
        android:text="Meu Perfil"
        android:textStyle="bold"
        android:textSize="18sp"
        android:paddingBottom="16dp"/>
    <LinearLayout
        android:layout_width="250dp"
        android:layout_height="wrap_content"
        android:gravity="center"
        >
        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Nome:"
            android:textStyle="bold"
            android:layout_margin="8dp"/>
        <TextView
            android:id="@+id/tvNomeUsuario"
            android:text="Nome do usuario"
            android:layout_gravity="center_vertical"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"/>
    </LinearLayout>
    <LinearLayout
        android:layout_width="250dp"
        android:layout_height="wrap_content"
        android:gravity="center"
        >
        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Email:"
            android:textStyle="bold"
            android:layout_margin="8dp" />
        <TextView
            android:id="@+id/tvEmailUsuario"
            android:text="Email do usuario"
            android:layout_gravity="center_vertical"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"/>
    </LinearLayout>
    <LinearLayout
        android:layout_width="250dp"
        android:layout_height="wrap_content"
        android:layout_marginTop="24dp"
        android:gravity="center"
        >
        <com.google.android.material.button.MaterialButton
            android:id="@+id/btnLogout"
            android:layout_width="110dp"
            android:layout_height="wrap_content"
            android:text="Logout"
            android:textColor="@android:color/white"
            app:backgroundTint="@color/md_theme_secondary"/>
    </LinearLayout>
</LinearLayout>

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/res/layout/fragment_minhas_aulas_aluno.xml ---
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp">
    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Minhas Aulas"
        android:textStyle="bold"
        android:textSize="18sp"
        android:paddingBottom="16dp"/>
    <com.prolificinteractive.materialcalendarview.MaterialCalendarView
        android:id="@+id/calendarViewAulas"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        app:mcv_showOtherDates="all"
        android:layout_marginBottom="16dp"/>
    <androidx.recyclerview.widget.RecyclerView
        android:id="@+id/recyclerViewMinhasAulas"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"/>
</LinearLayout>

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/res/layout/fragment_minhas_aulas_professor.xml ---
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp">
    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Minhas Aulas"
        android:textStyle="bold"
        android:textSize="18sp"
        android:paddingBottom="16dp"/>
    <com.prolificinteractive.materialcalendarview.MaterialCalendarView
        android:id="@+id/calendarViewAulas"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        app:mcv_showOtherDates="all"
        android:layout_marginBottom="16dp"/>
    <androidx.recyclerview.widget.RecyclerView
        android:id="@+id/recyclerViewMinhasAulas"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"/>
</LinearLayout>

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/res/layout/modal_aderir_curso.xml ---
<com.google.android.material.card.MaterialCardView
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:layout_margin="16dp"
    app:cardElevation="4dp"
    app:cardCornerRadius="8dp">
    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        android:padding="16dp">
        <com.google.android.material.textview.MaterialTextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:text="Confirme sua adesão ao curso"
            android:textStyle="bold"
            android:textSize="18sp"
            android:gravity="center" />
        <!-- Campos de informações adicionais podem ser adicionados aqui -->
        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="horizontal"
            android:layout_marginTop="16dp">
            <Button
                android:id="@+id/btnCancelarAderirCurso"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:layout_weight="1"
                android:text="Cancelar" />
            <Button
                android:id="@+id/btnAderirCurso"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:layout_weight="1"
                android:text="Aderir" />
        </LinearLayout>
    </LinearLayout>
</com.google.android.material.card.MaterialCardView>

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/res/layout/modal_aula_em_grupo.xml ---
<com.google.android.material.card.MaterialCardView
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:layout_margin="16dp"
    app:cardElevation="4dp"
    app:cardCornerRadius="8dp">
    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        android:padding="16dp">
        <com.prolificinteractive.materialcalendarview.MaterialCalendarView
            android:id="@+id/calendarViewAulaEmGrupo"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Selecione o dia para a Aula em Grupo"
            android:textSize="18sp"
            android:textStyle="bold"
            android:layout_gravity="center_horizontal" />
        <LinearLayout
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:orientation="horizontal"
            android:layout_gravity="center"
            android:layout_marginTop="16dp">
            <com.google.android.material.button.MaterialButton
                android:id="@+id/btnCancelar"
                android:layout_width="130dp"
                android:layout_height="wrap_content"
                android:text="Cancelar" />
            <com.google.android.material.button.MaterialButton
                android:id="@+id/btnInscreverSe"
                android:layout_width="130dp"
                android:layout_height="wrap_content"
                android:text="Inscrever-se"
                android:layout_marginStart="8dp" />
        </LinearLayout>
    </LinearLayout>
</com.google.android.material.card.MaterialCardView>

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/res/layout/modal_aula_entrar.xml ---
<com.google.android.material.card.MaterialCardView
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:layout_margin="16dp"
    app:cardElevation="4dp"
    app:cardCornerRadius="8dp">
    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        android:padding="16dp">
        <TextView
            android:id="@+id/tvAulaCursoNome"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Nome da Aula"
            android:textSize="18sp"
            android:textStyle="bold" />
        <!-- Descrição da Aula -->
        <TextView
            android:id="@+id/tvAulaCursoDescricao"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Descrição detalhada da aula"
            android:layout_marginTop="16dp" />
        <LinearLayout
            android:layout_marginTop="16dp"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="horizontal">
            <TextView
                android:id="@+id/tvTxtAulaCurso"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="Em grupo - " />
            <!-- Descrição da Aula -->
            <TextView
                android:id="@+id/tvTipoAulaCurso"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="Online" />
        </LinearLayout>
        <LinearLayout
            android:layout_marginTop="4dp"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="horizontal">
            <TextView
                android:id="@+id/tvTxtAulaCursoData"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="Data da aula: " />
            <!-- Data da Aula -->
            <TextView
                android:id="@+id/tvAulaCursoData"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="12/09/2024" />
        </LinearLayout>
        <!-- Espaçamento -->
        <Space
            android:layout_width="300dp"
            android:layout_height="0dp" />
        <!-- Botões de ação -->
        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="horizontal"
            android:layout_marginTop="16dp">
            <!-- Botão Inscrever-se -->
            <!-- Espaço entre os botões -->
            <com.google.android.material.button.MaterialButton
                android:id="@+id/btnAulaCursoIncreverSe"
                android:layout_width="0dp"
                android:layout_height="match_parent"
                android:layout_weight="1"
                android:text="Entrar na Reunião" />
            <Space
                android:layout_width="20dp"
                android:layout_height="match_parent" />
            <!-- Botão Cancelar -->
            <com.google.android.material.button.MaterialButton
                android:id="@+id/btnAulaCursoCancelar"
                android:layout_width="0dp"
                android:layout_height="match_parent"
                android:layout_weight="1"
                app:backgroundTint="@color/md_theme_secondary"
                android:text="Cancelar" />
        </LinearLayout>
    </LinearLayout>
</com.google.android.material.card.MaterialCardView>

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/res/layout/modal_aula_inscricao_aluno.xml ---
<com.google.android.material.card.MaterialCardView
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:layout_margin="16dp"
    app:cardElevation="4dp"
    app:cardCornerRadius="8dp">
    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        android:padding="16dp">
        <TextView
            android:id="@+id/tvAulaGrupoNome"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Nome da Aula"
            android:textSize="18sp"
            android:textStyle="bold" />
        <!-- Descrição da Aula -->
        <TextView
            android:id="@+id/tvAulaGrupoDescricao"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Descrição detalhada da aula"
            android:layout_marginTop="16dp" />
        <LinearLayout
            android:layout_marginTop="16dp"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="horizontal">
            <TextView
                android:id="@+id/tvTxtAulaGrupo"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="Em grupo - " />
            <!-- Descrição da Aula -->
            <TextView
                android:id="@+id/tvTipoAula"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="Online" />
        </LinearLayout>
        <LinearLayout
            android:layout_marginTop="4dp"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="horizontal">
            <TextView
                android:id="@+id/tvTxtAulaGrupoData"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="Data da aula: " />
            <!-- Data da Aula -->
            <TextView
                android:id="@+id/tvAulaGrupoData"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="12/09/2024" />
        </LinearLayout>
        <!-- Espaçamento -->
        <Space
            android:layout_width="300dp"
            android:layout_height="0dp" />
        <!-- Botões de ação -->
        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="horizontal"
            android:layout_marginTop="16dp">
            <!-- Botão Inscrever-se -->
            <com.google.android.material.button.MaterialButton
                android:id="@+id/btnAulaGrupoIncreverSe"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:layout_weight="1"
                android:text="Inscrever-se" />
            <!-- Espaço entre os botões -->
            <Space
                android:layout_width="20dp"
                android:layout_height="match_parent" />
            <!-- Botão Cancelar -->
            <com.google.android.material.button.MaterialButton
                android:id="@+id/btnAulaGrupoCancelar"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:layout_weight="1"
                app:backgroundTint="@color/md_theme_secondary"
                android:text="Cancelar" />
        </LinearLayout>
    </LinearLayout>
</com.google.android.material.card.MaterialCardView>

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/res/layout/modal_aula_particular.xml ---
<com.google.android.material.card.MaterialCardView
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:layout_margin="16dp"
    app:cardElevation="4dp"
    app:cardCornerRadius="8dp">
    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        android:padding="16dp">
        <com.google.android.material.textview.MaterialTextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Selecione o dia para a Aula Particular"
            android:textSize="18sp"
            android:textStyle="bold"
            android:layout_gravity="center_horizontal" />
        <CalendarView
            android:id="@+id/calendarViewAulaParticular"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="16dp" />
        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="horizontal"
            android:layout_marginTop="16dp">
            <com.google.android.material.button.MaterialButton
                android:id="@+id/btnCancelar"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:layout_weight="1"
                android:text="Cancelar" />
            <com.google.android.material.button.MaterialButton
                android:id="@+id/btnSalvar"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:layout_weight="1"
                android:text="Salvar"
                android:layout_marginStart="16dp" />
        </LinearLayout>
    </LinearLayout>
</com.google.android.material.card.MaterialCardView>

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/res/layout/modal_aula_reagendar.xml ---
<com.google.android.material.card.MaterialCardView
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:layout_margin="16dp"
    app:cardElevation="4dp"
    app:cardCornerRadius="8dp">
    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        android:padding="16dp">
        <!-- Título do Modal -->
        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Reagendar Aula"
            android:textSize="18sp"
            android:textStyle="bold"
            android:layout_gravity="center_horizontal" />
        <!-- Selecione a nova data da aula -->
        <com.prolificinteractive.materialcalendarview.MaterialCalendarView
            android:id="@+id/calendarViewAulaReagendar"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="16dp" />
        <!-- Botões de ação -->
        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="horizontal"
            android:gravity="center"
            android:layout_marginTop="16dp">
            <com.google.android.material.button.MaterialButton
                android:id="@+id/btnReagendar"
                android:layout_width="138dp"
                android:layout_height="wrap_content"
                android:text="Reagendar"
                android:textColor="@android:color/white" />
            <Space
                android:layout_width="16dp"
                android:layout_height="0dp" />
            <com.google.android.material.button.MaterialButton
                android:id="@+id/btnCancelarAula"
                android:layout_width="138dp"
                android:layout_height="wrap_content"
                android:text="Cancelar Aula"
                android:textColor="@android:color/white"
                app:backgroundTint="@color/md_theme_secondary" />
        </LinearLayout>
    </LinearLayout>
</com.google.android.material.card.MaterialCardView>


--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/res/layout/modal_cadastrar_aula.xml ---
<com.google.android.material.card.MaterialCardView
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:layout_margin="16dp"
    app:cardElevation="4dp"
    app:cardCornerRadius="8dp">
    <LinearLayout
        android:background="@color/md_theme_surface_mediumContrast"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        android:padding="16dp">
        <!-- Título do modal -->
        <com.google.android.material.textview.MaterialTextView
            android:id="@+id/tvTituloTipoAgendamento"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Agendando aula particular"
            android:textSize="18sp"
            android:textStyle="bold"
            android:layout_gravity="center_horizontal" />
        <!-- Texto para seleção de dia -->
        <com.google.android.material.textview.MaterialTextView
            android:layout_marginTop="8dp"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Selecione o dia"
            android:textSize="14sp"
            android:layout_gravity="center_horizontal" />
        <!-- Calendário para selecionar dia -->
        <com.prolificinteractive.materialcalendarview.MaterialCalendarView
            android:background="@color/md_theme_surfaceContainerLow"
            android:id="@+id/calendarViewAulaEmGrupo"
            android:layout_width="match_parent"
            android:layout_height="280dp"
            android:layout_marginTop="16dp" />
        <!-- Seletor para Aula Online ou Remota -->
        <com.google.android.material.textview.MaterialTextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Selecione o tipo de aula:"
            android:textSize="14sp"
            android:layout_marginTop="16dp"
            android:layout_gravity="center_horizontal" />
        <!-- RadioGroup com opções de Aula Online e Aula Remota -->
        <RadioGroup
            android:id="@+id/radioGroupTipoAula"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_gravity="center_horizontal"
            android:orientation="horizontal">
            <!-- Opção Aula Online -->
            <RadioButton
                android:id="@+id/radioIsAulaOnline"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="Aula Online"
                android:checked="true" />
            <!-- Espaçamento -->
            <Space
                android:layout_width="32dp"
                android:layout_height="wrap_content" />
            <!-- Opção Aula Remota -->
            <RadioButton
                android:id="@+id/radioIsAulaRemota"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="Aula Remota" />
        </RadioGroup>
        <!-- Campo de texto para o título da aula com TextInputLayout -->
        <com.google.android.material.textfield.TextInputLayout
            android:layout_width="match_parent"
            android:layout_height="50dp"
            android:hint="Título">
            <com.google.android.material.textfield.TextInputEditText
                android:id="@+id/etTituloAulaGrupo"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:enabled="false" />
        </com.google.android.material.textfield.TextInputLayout>
        <!-- Campo de texto para a descrição da aula com TextInputLayout -->
        <com.google.android.material.textfield.TextInputLayout
            android:layout_width="match_parent"
            android:layout_height="50dp"
            android:hint="Descrição">
            <com.google.android.material.textfield.TextInputEditText
                android:id="@+id/etDescricaoAulaGrupo"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:enabled="false" />
        </com.google.android.material.textfield.TextInputLayout>
        <!-- Campo de texto para o link da aula online com TextInputLayout -->
        <com.google.android.material.textfield.TextInputLayout
            android:layout_width="match_parent"
            android:layout_height="50dp"
            android:hint="Link Aula Online (opcional)">
            <com.google.android.material.textfield.TextInputEditText
                android:id="@+id/etLinkAulaGrupo"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:enabled="false" />
        </com.google.android.material.textfield.TextInputLayout>
        <!-- Espaçamento -->
        <Space
            android:layout_gravity="center"
            android:layout_width="300dp"
            android:layout_height="0dp" />
        <!-- Botões Cadastrar e Cancelar -->
        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="horizontal"
            android:gravity="center"
            android:layout_marginTop="16dp">
            <com.google.android.material.button.MaterialButton
                android:id="@+id/btnCadastrar"
                android:layout_width="115dp"
                android:layout_height="wrap_content"
                android:text="Cadastrar"
                android:textColor="@android:color/white"
                android:enabled="false" />
            <Space
                android:layout_width="32dp"
                android:layout_height="0dp" />
            <com.google.android.material.button.MaterialButton
                android:id="@+id/btnCancelar"
                android:layout_width="115dp"
                android:layout_height="wrap_content"
                android:text="Cancelar"
                android:textColor="@android:color/white"
                app:backgroundTint="@color/md_theme_secondary" />
        </LinearLayout>
    </LinearLayout>
</com.google.android.material.card.MaterialCardView>


--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/res/layout/modal_cadastrar_aula_em_grupo.xml ---
<com.google.android.material.card.MaterialCardView
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:layout_margin="16dp"
    app:cardElevation="4dp"
    app:cardCornerRadius="8dp">
    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        android:padding="16dp">
        <com.google.android.material.textview.MaterialTextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Selecione o dia para a Aula em Grupo"
            android:textSize="18sp"
            android:textStyle="bold"
            android:layout_gravity="center_horizontal" />
        <com.prolificinteractive.materialcalendarview.MaterialCalendarView
            android:id="@+id/calendarViewAulaEmGrupo"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="16dp" />
        <com.google.android.material.textfield.TextInputEditText
            android:id="@+id/etTituloAulaGrupo"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:hint="Título"
            android:enabled="false" />
        <com.google.android.material.textfield.TextInputEditText
            android:id="@+id/etDescricaoAulaGrupo"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:hint="Descrição"
            android:enabled="false" />
        <com.google.android.material.textfield.TextInputEditText
            android:id="@+id/etLinkAulaGrupo"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:hint="Link Aula Online (opcional)"
            android:enabled="false" />
        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="horizontal"
            android:gravity="center"
            android:layout_marginTop="16dp">
            <com.google.android.material.button.MaterialButton
                android:id="@+id/btnCadastrar"
                android:layout_width="115dp"
                android:layout_height="wrap_content"
                android:text="Cadastrar"
                android:textColor="@android:color/white"
                android:enabled="false" />
            <Space
                android:layout_width="32dp"
                android:layout_height="0dp" />
            <com.google.android.material.button.MaterialButton
                android:id="@+id/btnCancelar"
                android:layout_width="115dp"
                android:layout_height="wrap_content"
                android:text="Cancelar"
                android:textColor="@android:color/white"
                app:backgroundTint="@color/md_theme_secondary" />
        </LinearLayout>
    </LinearLayout>
</com.google.android.material.card.MaterialCardView>


--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/res/layout/modal_cadastrar_curso.xml ---
<?xml version="1.0" encoding="utf-8"?>
<com.google.android.material.card.MaterialCardView
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:layout_margin="16dp"
    app:cardElevation="4dp"
    app:cardCornerRadius="8dp">
    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        android:padding="16dp">
        <!-- Nome do Curso -->
        <com.google.android.material.textview.MaterialTextView
            android:id="@+id/tvNomeCurso"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginBottom="8dp"
            android:text="Cadastrar novo curso"
            android:textAlignment="center"
            android:textColor="@android:color/black"
            android:textSize="18sp"
            android:textStyle="bold" />
        <com.google.android.material.textfield.TextInputLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginBottom="8dp">
            <com.google.android.material.textfield.TextInputEditText
                android:id="@+id/etNomeCurso"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:hint="Nome do Curso" />
        </com.google.android.material.textfield.TextInputLayout>
        <!-- Descrição do Curso -->
        <com.google.android.material.textfield.TextInputLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginBottom="8dp">
            <com.google.android.material.textfield.TextInputEditText
                android:id="@+id/etDescricaoCurso"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:hint="Descrição do Curso" />
        </com.google.android.material.textfield.TextInputLayout>
        <!-- Duração do Curso -->
        <com.google.android.material.textfield.TextInputLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginBottom="8dp">
            <com.google.android.material.textfield.TextInputEditText
                android:id="@+id/etDuracaoCurso"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:hint="Duração em Horas"
                android:inputType="numberDecimal" />
        </com.google.android.material.textfield.TextInputLayout>
        <com.google.android.material.textfield.TextInputLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginBottom="8dp">
            <com.google.android.material.textfield.TextInputEditText
                android:id="@+id/etPrecoCurso"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:hint="Preço do Curso"
                android:inputType="numberDecimal" />
        </com.google.android.material.textfield.TextInputLayout>
        <com.google.android.material.textfield.TextInputLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginBottom="16dp">
            <com.google.android.material.textfield.TextInputEditText
                android:id="@+id/etPrecoCursoAulaParticular"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:hint="Preço da Aula Particular"
                android:inputType="numberDecimal" />
        </com.google.android.material.textfield.TextInputLayout>
        <!-- Botões para Cadastrar e Cancelar -->
        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="horizontal"
            android:gravity="end">
            <com.google.android.material.button.MaterialButton
                android:id="@+id/btnCadastrar"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="Cadastrar"
                android:textColor="@android:color/white"
                app:backgroundTint="@color/md_theme_primary"
                android:layout_marginEnd="8dp"/>
            <com.google.android.material.button.MaterialButton
                android:id="@+id/btnCancelar"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="Cancelar"
                android:textColor="@android:color/white"
                app:backgroundTint="@color/md_theme_secondary"/>
        </LinearLayout>
    </LinearLayout>
</com.google.android.material.card.MaterialCardView>

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/res/layout/modal_curso_avaliacao.xml ---
<com.google.android.material.card.MaterialCardView
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:layout_margin="16dp"
    app:cardElevation="4dp"
    app:cardCornerRadius="8dp">
    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        android:padding="16dp">
        <com.google.android.material.textview.MaterialTextView
            android:id="@+id/tvTitle"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Avaliar"
            android:textSize="24sp"
            android:layout_gravity="center_horizontal"/>
        <com.google.android.material.textview.MaterialTextView
            android:id="@+id/tvNomeCurso"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginTop="16dp"
            android:text="Nome Curso"
            android:textSize="24sp"
            android:textStyle="bold"
            android:layout_gravity="center_horizontal"/>
        <RatingBar
            android:id="@+id/ratingBarAvaliarCurso"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginTop="16dp"
            android:layout_gravity="center"
            android:numStars="5"
            android:stepSize="1.0" />
        <com.google.android.material.textfield.TextInputLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="16dp"
            android:hint="Comentário">
            <com.google.android.material.textfield.TextInputEditText
                android:id="@+id/etComentario"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:inputType="text" />
        </com.google.android.material.textfield.TextInputLayout>
        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="horizontal"
            android:layout_marginTop="16dp">
            <com.google.android.material.button.MaterialButton
                android:id="@+id/btnCancelarAvaliarCurso"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:layout_weight="1"
                android:textAlignment="center"
                android:text="Cancelar" />
            <Space
                android:layout_width="20dp"
                android:layout_height="match_parent"/>
            <com.google.android.material.button.MaterialButton
                android:id="@+id/btnAvaliarCurso"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:layout_weight="1"
                android:textAlignment="center"
                android:text="Avaliar" />
        </LinearLayout>
    </LinearLayout>
</com.google.android.material.card.MaterialCardView>

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/res/layout/modal_curso_opcoes.xml ---
<?xml version="1.0" encoding="utf-8"?>
<com.google.android.material.card.MaterialCardView
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:layout_margin="16dp"
    app:cardElevation="4dp"
    app:cardCornerRadius="8dp">
    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        android:gravity="center"
        android:padding="16dp">
        <com.google.android.material.textview.MaterialTextView
            android:id="@+id/tvNomeCurso"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Nome do curso"
            android:textSize="18sp"
            android:textStyle="bold"
            android:layout_gravity="center_horizontal" />
        <com.google.android.material.textview.MaterialTextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Opções"
            android:textSize="14sp"
            android:layout_marginTop="8dp"
            android:layout_gravity="center_horizontal" />
        <com.google.android.material.button.MaterialButton
            android:id="@+id/btnAulaParticular"
            android:layout_width="200dp"
            android:layout_height="wrap_content"
            android:text="Aula Particular"
            android:layout_marginTop="16dp" />
        <com.google.android.material.button.MaterialButton
            android:id="@+id/btnAulaGrupo"
            android:layout_width="200dp"
            android:layout_height="wrap_content"
            android:text="Aula em Grupo"
            android:layout_marginTop="8dp" />
        <com.google.android.material.button.MaterialButton
            android:id="@+id/btnAvaliar"
            android:layout_width="200dp"
            android:layout_height="wrap_content"
            android:text="Avaliar"
            android:layout_marginTop="8dp" />
    </LinearLayout>
</com.google.android.material.card.MaterialCardView>

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/res/layout/modal_curso_opcoes_professor.xml ---
<?xml version="1.0" encoding="utf-8"?>
<com.google.android.material.card.MaterialCardView
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:layout_margin="16dp"
    app:cardElevation="4dp"
    app:cardCornerRadius="8dp">
    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        android:padding="16dp">
        <!-- Nome do Curso -->
        <com.google.android.material.textview.MaterialTextView
            android:id="@+id/tvNomeCurso"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:text="Curso de Android Avançado"
            android:textSize="18sp"
            android:textStyle="bold"
            android:textColor="@android:color/black"
            android:layout_marginBottom="8dp"/>
        <!-- Descrição do Curso -->
        <com.google.android.material.textview.MaterialTextView
            android:id="@+id/tvDescricaoCurso"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:text="Curso completo para desenvolvimento avançado de aplicativos Android, abordando tópicos como arquitetura, otimização e boas práticas."
            android:textSize="16sp"
            android:textColor="@android:color/darker_gray"
            android:layout_marginBottom="8dp"/>
        <!-- Duração do Curso -->
        <com.google.android.material.textview.MaterialTextView
            android:id="@+id/tvDuracaoCurso"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:text="Duração: 40 horas"
            android:textSize="16sp"
            android:textColor="@android:color/darker_gray"
            android:layout_marginBottom="16dp"/>
        <!-- Botões para Salvar e Deletar -->
        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="horizontal"
            android:gravity="end">
            <com.google.android.material.button.MaterialButton
                android:id="@+id/btnEditarCurso"
                android:layout_width="103dp"
                android:layout_height="wrap_content"
                android:text="Editar"
                android:textColor="@android:color/white"
                app:backgroundTint="@color/md_theme_primary"
                android:layout_marginEnd="8dp"/>
            <com.google.android.material.button.MaterialButton
                android:id="@+id/btnDeletarCurso"
                android:layout_width="103dp"
                android:layout_height="wrap_content"
                android:text="Deletar"
                android:textColor="@android:color/white"
                app:backgroundTint="@color/md_theme_error"
                android:layout_marginEnd="8dp"/>
            <com.google.android.material.button.MaterialButton
                android:id="@+id/btnCancelarCurso"
                android:layout_width="105dp"
                android:layout_height="wrap_content"
                android:text="Cancelar"
                android:textColor="@android:color/white"
                app:backgroundTint="@color/md_theme_secondary" />
        </LinearLayout>
        <!-- Botões para Salvar e Deletar -->
        <LinearLayout
            android:layout_marginTop="16dp"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="horizontal"
            android:gravity="center">
            <com.google.android.material.button.MaterialButton
                android:id="@+id/btnAgendarAulaEmGrupo"
                android:layout_width="230dp"
                android:layout_height="wrap_content"
                android:text="Agendar Aula Em Grupo"
                android:textColor="@android:color/white"
                app:backgroundTint="@color/md_theme_primary"
                app:icon="@drawable/baseline_calendar_month_24"
                android:layout_marginEnd="8dp"/>
        </LinearLayout>
    </LinearLayout>
</com.google.android.material.card.MaterialCardView>

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/res/layout/modal_deletar_curso.xml ---
<?xml version="1.0" encoding="utf-8"?>
<com.google.android.material.card.MaterialCardView
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:layout_margin="16dp"
    app:cardElevation="4dp"
    app:cardCornerRadius="8dp">
    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        android:padding="16dp">
        <com.google.android.material.textview.MaterialTextView
            android:id="@+id/tvConfirmacaoDeletar"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:text="Você realmente deseja excluir este curso?"
            android:textSize="16sp"
            android:textAlignment="center"
            android:textColor="@android:color/black"
            android:layout_marginBottom="16dp"/>
        <!-- Nome do Curso -->
        <com.google.android.material.textview.MaterialTextView
            android:id="@+id/tvNomeCurso"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginBottom="8dp"
            android:text="Nome do curso"
            android:textAlignment="center"
            android:textColor="@android:color/black"
            android:textSize="18sp"
            android:textStyle="bold" />
        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="horizontal"
            android:layout_marginTop="8dp"
            android:gravity="end">
            <com.google.android.material.button.MaterialButton
                android:id="@+id/btnConfirmarDeletar"
                android:layout_width="110dp"
                android:layout_height="wrap_content"
                android:text="Excluir"
                android:textColor="@android:color/white"
                app:backgroundTint="@color/md_theme_error"
                android:layout_marginEnd="8dp"/>
            <com.google.android.material.button.MaterialButton
                android:id="@+id/btnCancelarDeletar"
                android:layout_width="110dp"
                android:layout_height="wrap_content"
                android:text="Cancelar"
                android:textColor="@android:color/white"
                app:backgroundTint="@color/md_theme_secondary"/>
        </LinearLayout>
    </LinearLayout>
</com.google.android.material.card.MaterialCardView>

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/res/layout/modal_detalhe_aula_grupo.xml ---
<com.google.android.material.card.MaterialCardView
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:layout_margin="16dp">
    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        android:padding="16dp">
        <TextView
            android:id="@+id/tvAulaGrupoTitulo"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Título da Aula"
            android:textSize="18sp"
            android:textStyle="bold"/>
        <TextView
            android:id="@+id/tvAulaGrupoDescricao"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Descrição da Aula"
            android:paddingTop="8dp"/>
        <TextView
            android:id="@+id/tvAulaGrupoData"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Data da Aula"
            android:paddingTop="8dp"/>
        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="horizontal"
            android:layout_marginTop="16dp">
            <com.google.android.material.button.MaterialButton
                android:id="@+id/btnInscrever"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:layout_weight="1"
                android:text="Inscrever"/>
            <Space
                android:layout_width="16dp"
                android:layout_height="match_parent"/>
            <com.google.android.material.button.MaterialButton
                android:id="@+id/btnCancelarInscricao"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:layout_weight="1"
                android:text="Cancelar"/>
        </LinearLayout>
    </LinearLayout>
</com.google.android.material.card.MaterialCardView>


--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/res/layout/modal_editar_curso.xml ---
<?xml version="1.0" encoding="utf-8"?>
<com.google.android.material.card.MaterialCardView
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:layout_margin="16dp"
    app:cardElevation="4dp"
    app:cardCornerRadius="8dp">
    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        android:padding="16dp">
        <com.google.android.material.textview.MaterialTextView
            android:id="@+id/tvNomeCurso"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:text="Realizar alteração"
            android:textSize="18sp"
            android:textStyle="bold"
            android:textAlignment="center"
            android:textColor="@android:color/black"
            android:layout_marginBottom="8dp"/>
        <!-- Nome do Curso -->
        <com.google.android.material.textfield.TextInputLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginBottom="8dp">
            <com.google.android.material.textfield.TextInputEditText
                android:id="@+id/etNomeCurso"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:hint="Nome do Curso" />
        </com.google.android.material.textfield.TextInputLayout>
        <!-- Descrição do Curso -->
        <com.google.android.material.textfield.TextInputLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginBottom="8dp">
            <com.google.android.material.textfield.TextInputEditText
                android:id="@+id/etDescricaoCurso"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:hint="Descrição do Curso" />
        </com.google.android.material.textfield.TextInputLayout>
        <!-- Duração do Curso -->
        <com.google.android.material.textfield.TextInputLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginBottom="8dp">
            <com.google.android.material.textfield.TextInputEditText
                android:id="@+id/etDuracaoHoras"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:hint="Duração em Horas"
                android:inputType="numberDecimal" />
        </com.google.android.material.textfield.TextInputLayout>
        <!-- Preço do Curso -->
        <com.google.android.material.textfield.TextInputLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginBottom="8dp">
            <com.google.android.material.textfield.TextInputEditText
                android:id="@+id/etPrecoCurso"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:hint="Preço do Curso"
                android:inputType="numberDecimal" />
        </com.google.android.material.textfield.TextInputLayout>
        <!-- Preço da Aula Particular -->
        <com.google.android.material.textfield.TextInputLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginBottom="16dp">
            <com.google.android.material.textfield.TextInputEditText
                android:id="@+id/etPrecoCursoAulaParticular"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:hint="Preço da Aula Particular"
                android:inputType="numberDecimal" />
        </com.google.android.material.textfield.TextInputLayout>
        <!-- Botões para Salvar e Cancelar -->
        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="horizontal"
            android:gravity="end">
            <com.google.android.material.button.MaterialButton
                android:id="@+id/btnSalvarCurso"
                android:layout_width="110dp"
                android:layout_height="wrap_content"
                android:text="Salvar"
                android:textColor="@android:color/white"
                app:backgroundTint="@color/md_theme_primary"
                android:layout_marginEnd="8dp"/>
            <com.google.android.material.button.MaterialButton
                android:id="@+id/btnCancelarCurso"
                android:layout_width="110dp"
                android:layout_height="wrap_content"
                android:text="Cancelar"
                android:textColor="@android:color/white"
                app:backgroundTint="@color/md_theme_secondary"/>
        </LinearLayout>
    </LinearLayout>
</com.google.android.material.card.MaterialCardView>

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/res/layout/modal_matricula_curso.xml ---
<com.google.android.material.card.MaterialCardView
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:layout_margin="16dp"
    app:cardElevation="4dp"
    app:cardCornerRadius="8dp">
    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        android:padding="16dp">
        <TextView
            android:id="@+id/tvCursoModalNome"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Nome do Curso"
            android:textSize="18sp"
            android:textStyle="bold" />
        <TextView
            android:id="@+id/tvCursoModalDescricao"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Descrição detalhada do curso"
            android:layout_marginTop="8dp" />
        <TextView
            android:id="@+id/tvCursoModalPreco"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Preço: R$ 150,00"
            android:layout_marginTop="16dp" />
        <Space
            android:layout_width="300dp"
            android:layout_height="16dp"/>
        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="horizontal"
            android:layout_marginTop="16dp">
            <com.google.android.material.button.MaterialButton
                android:id="@+id/btnCancelarMatricula"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:layout_weight="1"
                android:text="Cancelar" />
            <Space
                android:layout_width="20dp"
                android:layout_height="match_parent" />
            <com.google.android.material.button.MaterialButton
                android:id="@+id/btnAderirMatriculaCurso"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:layout_weight="1"
                android:text="Aderir" />
        </LinearLayout>
    </LinearLayout>
</com.google.android.material.card.MaterialCardView>

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/res/layout/modal_professor_avaliacao.xml ---
<com.google.android.material.card.MaterialCardView
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:layout_margin="16dp"
    app:cardElevation="4dp"
    app:cardCornerRadius="8dp">
    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        android:padding="16dp">
        <com.google.android.material.textview.MaterialTextView
            android:id="@+id/tvTitle"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Avaliar"
            android:textSize="24sp"
            android:layout_gravity="center_horizontal"/>
        <com.google.android.material.textview.MaterialTextView
            android:id="@+id/tvNomeProfessor"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginTop="16dp"
            android:text="Nome Professor"
            android:textSize="24sp"
            android:textStyle="bold"
            android:layout_gravity="center_horizontal"/>
        <RatingBar
            android:id="@+id/ratingBarAvaliarProfessor"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginTop="16dp"
            android:layout_gravity="center"
            android:numStars="5"
            android:stepSize="1.0" />
        <com.google.android.material.textfield.TextInputLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="16dp"
            android:hint="Comentário">
            <com.google.android.material.textfield.TextInputEditText
                android:id="@+id/etComentario"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:inputType="text" />
        </com.google.android.material.textfield.TextInputLayout>
        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="horizontal"
            android:layout_marginTop="16dp">
            <com.google.android.material.button.MaterialButton
                android:id="@+id/btnCancelarAvaliarProfessor"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:layout_weight="1"
                android:text="Cancelar"
                android:gravity="start|center_vertical"/>
            <Space
                android:layout_width="20dp"
                android:layout_height="match_parent"/>
            <com.google.android.material.button.MaterialButton
                android:id="@+id/btnAvaliarProfessor"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:layout_weight="1"
                android:text="Avaliar"
                android:gravity="end|center_vertical"/>
        </LinearLayout>
    </LinearLayout>
</com.google.android.material.card.MaterialCardView>

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/res/menu/bottom_nav_menu_aluno.xml ---
<?xml version="1.0" encoding="utf-8"?>
<menu xmlns:android="http://schemas.android.com/apk/res/android">
    <item
        android:id="@+id/nav_home"
        android:icon="@drawable/book"
        android:title="Início" />
    <item
        android:id="@+id/nav_meus_cursos"
        android:icon="@drawable/aula_presencial"
        android:title="Meus Cursos" />
    <item
        android:id="@+id/nav_minhas_aulas"
        android:icon="@drawable/schedule"
        android:title="Minhas Aulas" />
    <item
        android:id="@+id/nav_meu_perfil"
        android:icon="@drawable/student"
        android:title="Meu Perfil" />
</menu>

--- Conteúdo do arquivo: C:/_projects/domenic/edtech/app/src/main/res/menu/bottom_nav_menu_professor.xml ---
<?xml version="1.0" encoding="utf-8"?>
<menu xmlns:android="http://schemas.android.com/apk/res/android">
    <item
        android:id="@+id/nav_home"
        android:icon="@drawable/book"
        android:title="Início" />
    <item
        android:id="@+id/nav_meus_cursos"
        android:icon="@drawable/aula_presencial"
        android:title="Meus Cursos" />
    <item
        android:id="@+id/nav_minhas_aulas"
        android:icon="@drawable/schedule"
        android:title="Minhas Aulas" />
    <item
        android:id="@+id/nav_meu_perfil"
        android:icon="@drawable/teacher"
        android:title="Meu Perfil" />
</menu>